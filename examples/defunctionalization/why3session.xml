<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Spass" version="3.9" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.4.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="6" name="Z3" version="3.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="9" name="Z3" version="4.6.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="10" name="CVC4" version="1.5" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="defunctionalization.mlw"/>
<theory name="DirectSem" proved="true">
 <goal name="eval_p3" proved="true">
 <proof prover="0"><result status="valid" time="0.01"/></proof>
 <proof prover="2"><result status="valid" time="0.02" steps="23"/></proof>
 <proof prover="6" memlimit="4000"><result status="valid" time="0.02"/></proof>
 <proof prover="9" memlimit="4000"><result status="valid" time="0.00" steps="1518"/></proof>
 <proof prover="10" memlimit="4000"><result status="valid" time="0.01" steps="1463"/></proof>
 </goal>
</theory>
<theory name="CPS" proved="true">
 <goal name="eval_1&#39;vc" expl="VC for eval_1" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="101"/></proof>
 </goal>
 <goal name="interpret_1&#39;vc" expl="VC for interpret_1" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="2"/></proof>
 </goal>
</theory>
<theory name="Defunctionalization" proved="true">
 <goal name="size_e_pos" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="size_e_pos.0" proved="true">
  <proof prover="2" timelimit="6"><result status="valid" time="0.04" steps="17"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="size_c_pos" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="size_c_pos.0" proved="true">
  <proof prover="2" timelimit="6"><result status="valid" time="0.02" steps="26"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="continue_2&#39;vc" expl="VC for continue_2" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="90"/></proof>
 </goal>
 <goal name="eval_2&#39;vc" expl="VC for eval_2" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="303"/></proof>
 </goal>
 <goal name="interpret_2&#39;vc" expl="VC for interpret_2" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="45"/></proof>
 </goal>
</theory>
<theory name="Defunctionalization2" proved="true">
 <goal name="continue_2&#39;vc" expl="VC for continue_2" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="122"/></proof>
 </goal>
 <goal name="eval_2&#39;vc" expl="VC for eval_2" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="eval_2&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.00" steps="23"/></proof>
  </goal>
  <goal name="eval_2&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.02" steps="3872"/></proof>
  </goal>
  <goal name="eval_2&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.00" steps="133"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="interpret_2&#39;vc" expl="VC for interpret_2" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="31"/></proof>
 </goal>
</theory>
<theory name="SemWithError" proved="true">
 <goal name="cps_correct_expr" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="cps_correct_expr.0" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="cps_correct_expr.0.0" proved="true">
   <proof prover="10" timelimit="1"><result status="valid" time="0.01" steps="3728"/></proof>
   </goal>
   <goal name="cps_correct_expr.0.1" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="cps_correct_expr.0.1.0" proved="true">
    <transf name="subst" proved="true" arg1="e">
     <goal name="cps_correct_expr.0.1.0.0" proved="true">
     <transf name="unfold" proved="true" arg1="eval_1">
      <goal name="cps_correct_expr.0.1.0.0.0" proved="true">
      <transf name="step" proved="true" >
       <goal name="cps_correct_expr.0.1.0.0.0.0" proved="true">
       <transf name="rewrite" proved="true" arg1="H">
        <goal name="cps_correct_expr.0.1.0.0.0.0.0" proved="true">
        <proof prover="9" timelimit="1"><result status="valid" time="0.04" steps="19619"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cps_correct" proved="true">
 <proof prover="0"><result status="valid" time="0.01"/></proof>
 <proof prover="2"><result status="valid" time="0.02" steps="8"/></proof>
 <proof prover="6"><result status="valid" time="0.01"/></proof>
 <proof prover="9"><result status="valid" time="0.00" steps="8904"/></proof>
 <proof prover="10"><result status="valid" time="0.01" steps="2849"/></proof>
 </goal>
 <goal name="cps2_correct_expr_aux" proved="true">
 <proof prover="2" timelimit="6"><result status="valid" time="0.02" steps="4"/></proof>
 </goal>
 <goal name="cps2_correct_expr" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="cps2_correct_expr.0" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="cps2_correct_expr.0.0" proved="true">
   <proof prover="2" timelimit="6"><result status="valid" time="0.01" steps="44"/></proof>
   </goal>
   <goal name="cps2_correct_expr.0.1" proved="true">
   <proof prover="9" timelimit="6"><result status="valid" time="0.01" steps="28512"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cps2_correct" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="28"/></proof>
 <proof prover="6"><result status="valid" time="0.03"/></proof>
 <proof prover="9"><result status="valid" time="0.01" steps="15100"/></proof>
 <proof prover="10"><result status="valid" time="0.03" steps="4918"/></proof>
 </goal>
 <goal name="cps3_correct_expr&#39;vc" expl="VC for cps3_correct_expr" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="cps3_correct_expr&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.00" steps="35"/></proof>
  </goal>
  <goal name="cps3_correct_expr&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="2"><result status="valid" time="0.00" steps="35"/></proof>
  </goal>
  <goal name="cps3_correct_expr&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.00" steps="6"/></proof>
  </goal>
  <goal name="cps3_correct_expr&#39;vc.3" expl="postcondition" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="cps3_correct_expr&#39;vc.3.0" expl="postcondition" proved="true">
   <proof prover="2" timelimit="1"><result status="valid" time="0.01" steps="51"/></proof>
   </goal>
   <goal name="cps3_correct_expr&#39;vc.3.1" expl="postcondition" proved="true">
   <proof prover="9" timelimit="1"><result status="valid" time="0.02" steps="42083"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="cps3_correct" proved="true">
 <proof prover="2"><result status="valid" time="0.03" steps="18"/></proof>
 <proof prover="6"><result status="valid" time="0.02"/></proof>
 <proof prover="9"><result status="valid" time="0.01" steps="17235"/></proof>
 <proof prover="10"><result status="valid" time="0.03" steps="5662"/></proof>
 </goal>
 <goal name="size_e_pos" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="size_e_pos.0" proved="true">
  <proof prover="2" timelimit="6"><result status="valid" time="0.02" steps="23"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="size_c_pos" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="size_c_pos.0" proved="true">
  <proof prover="2" timelimit="6"><result status="valid" time="0.03" steps="38"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="continue_4&#39;vc" expl="VC for continue_4" proved="true">
 <proof prover="2"><result status="valid" time="0.02" steps="251"/></proof>
 </goal>
 <goal name="eval_4&#39;vc" expl="VC for eval_4" proved="true">
 <proof prover="2"><result status="valid" time="0.23" steps="2469"/></proof>
 </goal>
 <goal name="interpret_4&#39;vc" expl="VC for interpret_4" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="95"/></proof>
 </goal>
</theory>
<theory name="ReductionSemantics" proved="true">
 <goal name="contract&#39;vc" expl="VC for contract" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="106"/></proof>
 </goal>
 <goal name="recompose_values&#39;vc" expl="VC for recompose_values" proved="true">
 <proof prover="2"><result status="valid" time="0.04" steps="272"/></proof>
 </goal>
 <goal name="size_c_pos" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="size_c_pos.0" proved="true">
  <proof prover="2" timelimit="6"><result status="valid" time="0.02" steps="33"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="decompose_term&#39;vc" expl="VC for decompose_term" proved="true">
 <proof prover="2"><result status="valid" time="0.03" steps="191"/></proof>
 </goal>
 <goal name="decompose_cont&#39;vc" expl="VC for decompose_cont" proved="true">
 <proof prover="2"><result status="valid" time="0.03" steps="409"/></proof>
 </goal>
 <goal name="decompose&#39;vc" expl="VC for decompose" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="16"/></proof>
 </goal>
 <goal name="reduce&#39;vc" expl="VC for reduce" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="25"/></proof>
 </goal>
 <goal name="itere&#39;vc" expl="VC for itere" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="35"/></proof>
 </goal>
 <goal name="refocus&#39;vc" expl="VC for refocus" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="9"/></proof>
 </goal>
 <goal name="itere_opt&#39;vc" expl="VC for itere_opt" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="itere_opt&#39;vc.0" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.00" steps="12"/></proof>
  </goal>
  <goal name="itere_opt&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.00" steps="20"/></proof>
  </goal>
  <goal name="itere_opt&#39;vc.2" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.00" steps="12"/></proof>
  </goal>
  <goal name="itere_opt&#39;vc.3" expl="unreachable point" proved="true">
  <proof prover="2"><result status="valid" time="0.00" steps="34"/></proof>
  </goal>
  <goal name="itere_opt&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.74"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="normalize&#39;vc" expl="VC for normalize" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="12"/></proof>
 </goal>
 <goal name="eval_1&#39;vc" expl="VC for eval_1" proved="true">
 <proof prover="2"><result status="valid" time="0.05" steps="95"/></proof>
 </goal>
 <goal name="eval_2&#39;vc" expl="VC for eval_2" proved="true">
 <proof prover="2"><result status="valid" time="0.04" steps="194"/></proof>
 </goal>
 <goal name="interpret&#39;vc" expl="VC for interpret" proved="true">
 <proof prover="2"><result status="valid" time="0.00" steps="12"/></proof>
 </goal>
</theory>
<theory name="RWithError" proved="true">
 <goal name="size_c_pos" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="size_c_pos.0" proved="true">
  <proof prover="2" timelimit="6"><result status="valid" time="0.02" steps="45"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="recompose_values&#39;vc" expl="VC for recompose_values" proved="true">
 <proof prover="2"><result status="valid" time="0.11" steps="1460"/></proof>
 </goal>
 <goal name="recompose_underflow&#39;vc" expl="VC for recompose_underflow" proved="true">
 <proof prover="2"><result status="valid" time="0.11" steps="482"/></proof>
 </goal>
 <goal name="eval_1&#39;vc" expl="VC for eval_1" proved="true">
 <proof prover="2"><result status="valid" time="0.04" steps="180"/></proof>
 </goal>
 <goal name="eval_2&#39;vc" expl="VC for eval_2" proved="true">
 <proof prover="2"><result status="valid" time="0.17" steps="983"/></proof>
 </goal>
 <goal name="interpret&#39;vc" expl="VC for interpret" proved="true">
 <proof prover="2"><result status="valid" time="0.01" steps="20"/></proof>
 </goal>
</theory>
</file>
</why3session>
