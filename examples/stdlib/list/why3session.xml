<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="4" name="Alt-Ergo" version="2.4.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="6" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="8" name="Z3" version="4.8.10" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name=".."/><path name=".."/><path name="stdlib"/>
<path name="list.mlw"/>
<theory name="List" proved="true">
 <goal name="is_nil&#39;vc" expl="VC for is_nil" proved="true">
 <proof prover="4"><result status="valid" time="0.00" steps="14"/></proof>
 </goal>
</theory>
<theory name="Length" proved="true">
 <goal name="Length_nonnegative" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="Length_nonnegative.0" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="15"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Length_nil" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="Length_nil.0" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="35"/></proof>
  </goal>
  <goal name="Length_nil.1" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="6"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Quant" proved="true">
 <goal name="for_all&#39;vc" expl="VC for for_all" proved="true">
 <proof prover="6"><result status="valid" time="0.04" steps="4037"/></proof>
 </goal>
 <goal name="for_some&#39;vc" expl="VC for for_some" proved="true">
 <proof prover="6"><result status="valid" time="0.02" steps="5319"/></proof>
 </goal>
 <goal name="mem&#39;vc" expl="VC for mem" proved="true">
 <proof prover="6"><result status="valid" time="0.02" steps="4528"/></proof>
 </goal>
</theory>
<theory name="Elements" proved="true">
 <goal name="elements_mem" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="elements_mem.0" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="47"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="NthLength" proved="true">
 <goal name="nth_none_1" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="nth_none_1.0" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="40"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="nth_none_2" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="nth_none_2.0" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="46"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="nth_none_3" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="nth_none_3.0" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="54"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="NthHdTl" proved="true">
 <goal name="Nth_tl" proved="true">
 <proof prover="4"><result status="valid" time="0.00" steps="35"/></proof>
 </goal>
 <goal name="Nth0_head" proved="true">
 <proof prover="4"><result status="valid" time="0.00" steps="25"/></proof>
 </goal>
</theory>
<theory name="Append" proved="true">
 <goal name="Append_assoc" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="Append_assoc.0" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="Append_assoc.0.0" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="5"/></proof>
   </goal>
   <goal name="Append_assoc.0.1" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="19"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Append_l_nil" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="Append_l_nil.0" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="13"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Append_length" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="Append_length.0" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="52"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mem_append" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="mem_append.0" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="103"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="mem_decomp" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="mem_decomp.0" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="mem_decomp.0.0" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="4"/></proof>
   </goal>
   <goal name="mem_decomp.0.1" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="436"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="NthLengthAppend" proved="true">
 <goal name="nth_append_1" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="nth_append_1.0" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="104"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="nth_append_2" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="nth_append_2.0" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="152"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Reverse" proved="true">
 <goal name="reverse_append" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="reverse_append.0" proved="true">
  <proof prover="4"><result status="valid" time="0.09" steps="1325"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="reverse_cons" proved="true">
 <proof prover="4"><result status="valid" time="0.01" steps="5"/></proof>
 </goal>
 <goal name="cons_reverse" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="cons_reverse.0" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="97"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="reverse_reverse" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="reverse_reverse.0" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="30"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="reverse_mem" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="reverse_mem.0" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="270"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Reverse_length" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="Reverse_length.0" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="62"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="RevAppend" proved="true">
 <goal name="rev_append_append_l" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="rev_append_append_l.0" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="50"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="rev_append_length" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="rev_append_length.0" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="54"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="rev_append_def" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="rev_append_def.0" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="87"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="rev_append_append_r" proved="true">
 <proof prover="4"><result status="valid" time="0.01" steps="108"/></proof>
 </goal>
</theory>
<theory name="Sorted" proved="true">
 <goal name="sorted&#39;vc" expl="VC for sorted" proved="true">
 <proof prover="8"><result status="valid" time="0.01" steps="11330"/></proof>
 </goal>
 <goal name="sorted_mem" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="sorted_mem.0" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="115"/></proof>
  </goal>
  <goal name="sorted_mem.1" proved="true">
  <transf name="induction_ty_lex" proved="true" >
   <goal name="sorted_mem.1.0" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="450"/></proof>
   <proof prover="8"><result status="valid" time="0.42" steps="3760453"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="sorted_mem.2" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="46"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="sorted_append" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="sorted_append.0" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="sorted_append.0.0" proved="true">
   <proof prover="4"><result status="valid" time="0.11" steps="10"/></proof>
   </goal>
   <goal name="sorted_append.0.1" proved="true">
   <proof prover="4"><result status="valid" time="0.01" steps="6"/></proof>
   </goal>
   <goal name="sorted_append.0.2" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="8"/></proof>
   </goal>
   <goal name="sorted_append.0.3" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="12"/></proof>
   </goal>
   <goal name="sorted_append.0.4" proved="true">
   <proof prover="4"><result status="valid" time="0.01" steps="205"/></proof>
   </goal>
   <goal name="sorted_append.0.5" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="137"/></proof>
   </goal>
   <goal name="sorted_append.0.6" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="44"/></proof>
   </goal>
   <goal name="sorted_append.0.7" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="654"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="SortedInt" proved="true">
 <goal name="Transitive.Trans" proved="true">
 <proof prover="4"><result status="valid" time="0.00" steps="4"/></proof>
 </goal>
</theory>
<theory name="RevSorted" proved="true">
 <goal name="Incr.Transitive.Trans" proved="true">
 <proof prover="4"><result status="valid" time="0.00" steps="6"/></proof>
 </goal>
 <goal name="Decr.Transitive.Trans" proved="true">
 <proof prover="4"><result status="valid" time="0.00" steps="8"/></proof>
 </goal>
 <goal name="rev_append_sorted_incr" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="rev_append_sorted_incr.0" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="rev_append_sorted_incr.0.0" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="7166"/></proof>
   </goal>
   <goal name="rev_append_sorted_incr.0.1" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="10"/></proof>
   </goal>
   <goal name="rev_append_sorted_incr.0.2" proved="true">
   <proof prover="4"><result status="valid" time="0.01" steps="78"/></proof>
   </goal>
   <goal name="rev_append_sorted_incr.0.3" proved="true">
   <proof prover="8"><result status="valid" time="0.01" steps="37831"/></proof>
   </goal>
   <goal name="rev_append_sorted_incr.0.4" proved="true">
   <proof prover="4"><result status="valid" time="0.55" steps="8149"/></proof>
   </goal>
   <goal name="rev_append_sorted_incr.0.5" proved="true">
   <proof prover="4"><result status="valid" time="0.01" steps="73"/></proof>
   </goal>
   <goal name="rev_append_sorted_incr.0.6" proved="true">
   <proof prover="4"><result status="valid" time="0.01" steps="348"/></proof>
   </goal>
   <goal name="rev_append_sorted_incr.0.7" proved="true">
   <proof prover="6"><result status="valid" time="0.06" steps="16681"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="rev_append_sorted_decr" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="rev_append_sorted_decr.0" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="rev_append_sorted_decr.0.0" proved="true">
   <proof prover="6"><result status="valid" time="0.05" steps="7238"/></proof>
   <proof prover="8"><result status="valid" time="0.02" steps="37541"/></proof>
   </goal>
   <goal name="rev_append_sorted_decr.0.1" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="11"/></proof>
   <proof prover="8"><result status="valid" time="0.01" steps="38215"/></proof>
   </goal>
   <goal name="rev_append_sorted_decr.0.2" proved="true">
   <proof prover="4"><result status="valid" time="0.01" steps="84"/></proof>
   <proof prover="8"><result status="valid" time="0.02" steps="38462"/></proof>
   </goal>
   <goal name="rev_append_sorted_decr.0.3" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="7766"/></proof>
   <proof prover="8"><result status="valid" time="0.01" steps="38630"/></proof>
   </goal>
   <goal name="rev_append_sorted_decr.0.4" proved="true">
   <proof prover="4"><result status="valid" time="0.66" steps="10294"/></proof>
   <proof prover="8"><result status="valid" time="0.52" steps="1896184"/></proof>
   </goal>
   <goal name="rev_append_sorted_decr.0.5" proved="true">
   <proof prover="4"><result status="valid" time="0.01" steps="77"/></proof>
   <proof prover="8"><result status="valid" time="0.03" steps="82607"/></proof>
   </goal>
   <goal name="rev_append_sorted_decr.0.6" proved="true">
   <proof prover="4"><result status="valid" time="0.01" steps="331"/></proof>
   <proof prover="8"><result status="valid" time="0.06" steps="191986"/></proof>
   </goal>
   <goal name="rev_append_sorted_decr.0.7" proved="true">
   <proof prover="8"><result status="valid" time="0.06" steps="192349"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="NumOcc" proved="true">
 <goal name="Num_Occ_NonNeg" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="Num_Occ_NonNeg.0" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="24"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Mem_Num_Occ" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="Mem_Num_Occ.0" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="Mem_Num_Occ.0.0" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="8"/></proof>
   </goal>
   <goal name="Mem_Num_Occ.0.1" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="9"/></proof>
   </goal>
   <goal name="Mem_Num_Occ.0.2" proved="true">
   <proof prover="4"><result status="valid" time="0.01" steps="35"/></proof>
   </goal>
   <goal name="Mem_Num_Occ.0.3" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="21"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Append_Num_Occ" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="Append_Num_Occ.0" proved="true">
  <proof prover="4"><result status="valid" time="0.02" steps="94"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="reverse_num_occ" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="reverse_num_occ.0" proved="true">
  <proof prover="4"><result status="valid" time="0.11" steps="229"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Permut" proved="true">
 <goal name="Permut_refl" proved="true">
 <proof prover="4"><result status="valid" time="0.01" steps="2"/></proof>
 </goal>
 <goal name="Permut_sym" proved="true">
 <proof prover="4"><result status="valid" time="0.01" steps="10"/></proof>
 </goal>
 <goal name="Permut_trans" proved="true">
 <proof prover="4"><result status="valid" time="0.01" steps="20"/></proof>
 </goal>
 <goal name="Permut_cons" proved="true">
 <proof prover="4"><result status="valid" time="0.06" steps="89"/></proof>
 </goal>
 <goal name="Permut_swap" proved="true">
 <proof prover="4"><result status="valid" time="0.11" steps="113"/></proof>
 </goal>
 <goal name="Permut_cons_append" proved="true">
 <proof prover="4"><result status="valid" time="0.11" steps="142"/></proof>
 </goal>
 <goal name="Permut_assoc" proved="true">
 <proof prover="4"><result status="valid" time="0.01" steps="18"/></proof>
 </goal>
 <goal name="Permut_append" proved="true">
 <proof prover="4"><result status="valid" time="0.01" steps="94"/></proof>
 </goal>
 <goal name="Permut_append_swap" proved="true">
 <proof prover="4"><result status="valid" time="0.01" steps="23"/></proof>
 </goal>
 <goal name="Permut_mem" proved="true">
 <proof prover="4"><result status="valid" time="0.01" steps="32"/></proof>
 </goal>
 <goal name="Permut_length" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="Permut_length.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="Permut_length.0.0" proved="true">
   <transf name="destruct_term" proved="true" arg1="l2">
    <goal name="Permut_length.0.0.0" proved="true">
    <proof prover="8" timelimit="1"><result status="valid" time="0.02" steps="53952"/></proof>
    </goal>
    <goal name="Permut_length.0.0.1" proved="true">
    <proof prover="6" timelimit="1"><result status="valid" time="0.01" steps="7402"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="Permut_length.0.1" proved="true">
   <transf name="unfold" proved="true" arg1="permut" arg2="in" arg3="H">
    <goal name="Permut_length.0.1.0" proved="true">
    <transf name="assert" proved="true" arg1="(num_occ x1 l1 &gt;= 1)">
     <goal name="Permut_length.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="6" timelimit="1"><result status="valid" time="0.02" steps="9188"/></proof>
     </goal>
     <goal name="Permut_length.0.1.0.1" proved="true">
     <transf name="assert" proved="true" arg1="(mem x1 l2)">
      <goal name="Permut_length.0.1.0.1.0" expl="asserted formula" proved="true">
      <proof prover="6" timelimit="1"><result status="valid" time="0.02" steps="9241"/></proof>
      </goal>
      <goal name="Permut_length.0.1.0.1.1" proved="true">
      <transf name="instantiate" proved="true" arg1="mem_decomp" arg2="x1,l2">
       <goal name="Permut_length.0.1.0.1.1.0" proved="true">
       <transf name="destruct" proved="true" arg1="Hinst">
        <goal name="Permut_length.0.1.0.1.1.0.0" expl="destruct premise" proved="true">
        <proof prover="6" timelimit="1"><result status="valid" time="0.01" steps="7900"/></proof>
        </goal>
        <goal name="Permut_length.0.1.0.1.1.0.1" proved="true">
        <transf name="destruct" proved="true" arg1="Hinst">
         <goal name="Permut_length.0.1.0.1.1.0.1.0" proved="true">
         <transf name="destruct" proved="true" arg1="Hinst">
          <goal name="Permut_length.0.1.0.1.1.0.1.0.0" proved="true">
          <transf name="assert" proved="true" arg1="(permut (Cons x1 x) (Cons x1 (l1 ++ l2)) )">
           <goal name="Permut_length.0.1.0.1.1.0.1.0.0.0" expl="asserted formula" proved="true">
           <proof prover="6"><result status="valid" time="0.05" steps="14986"/></proof>
           </goal>
           <goal name="Permut_length.0.1.0.1.1.0.1.0.0.1" proved="true">
           <transf name="assert" proved="true" arg1="(permut x (l1 ++ l2))">
            <goal name="Permut_length.0.1.0.1.1.0.1.0.0.1.0" expl="asserted formula" proved="true">
            <transf name="unfold" proved="true" arg1="permut">
             <goal name="Permut_length.0.1.0.1.1.0.1.0.0.1.0.0" proved="true">
             <proof prover="6"><result status="valid" time="0.76" steps="201407"/></proof>
             </goal>
            </transf>
            </goal>
            <goal name="Permut_length.0.1.0.1.1.0.1.0.0.1.1" proved="true">
            <proof prover="8"><result status="valid" time="0.03" steps="58816"/></proof>
            </goal>
           </transf>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Distinct" proved="true">
 <goal name="distinct_append" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="distinct_append.0" proved="true">
  <transf name="split_goal_right" proved="true" >
   <goal name="distinct_append.0.0" proved="true">
   <proof prover="4"><result status="valid" time="0.00" steps="9"/></proof>
   </goal>
   <goal name="distinct_append.0.1" proved="true">
   <proof prover="4"><result status="valid" time="0.17" steps="1175"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="FoldLeft" proved="true">
 <goal name="fold_left_append" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="fold_left_append.0" proved="true">
  <proof prover="4"><result status="valid" time="0.00" steps="48"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="FoldRight" proved="true">
 <goal name="fold_right_append" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="fold_right_append.0" proved="true">
  <proof prover="4"><result status="valid" time="0.01" steps="48"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
