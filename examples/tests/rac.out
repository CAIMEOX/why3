
* Local
** Local.test1 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 7, characters 14-20
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 8, characters 14-38
<rac-check-term-result>Assertion failed at "examples/tests/rac.mlw", line 9, characters 14-19
                       - Term: x = 0
                       - Variables: x -> 1
Assertion failed at "examples/tests/rac.mlw", line 9, characters 14-19
- Term: x = 0
- Variables: x -> 1
** Local.test2 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `Tuple0` is ok at "examples/tests/rac.mlw", line 14, characters 17-19
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 14, characters 17-19
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 14, characters 17-19
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 15, characters 14-21
result: () = ()
globals: <none>
** Local.test3 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 18, characters 17-18
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 18, characters 17-18
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 19, characters 14-20
<rac-check-term-result>Assertion failed at "examples/tests/rac.mlw", line 20, characters 14-20
                       - Term: x.contents > 10
                       - Variables: x -> {contents= 1}
Assertion failed at "examples/tests/rac.mlw", line 20, characters 14-20
- Term: x.contents > 10
- Variables: x -> {contents= 1}
** Local.test4 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 23, characters 14-29
result: () = ()
globals: <none>
** Local.test5 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `True` is ok at "examples/tests/rac.mlw", line 26, characters 13-17
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 27, characters 14-22
result: () = ()
globals: <none>

* Global
** Global.test1 ()
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 34, characters 13-18
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 34, characters 13-18
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 41, characters 15-17
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 41, characters 15-17
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 37, characters 14-19
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 38, characters 10-11
<rac-check-term-result>Postcondition of `(+)` is ok at "examples/tests/rac.mlw", line 38, characters 10-15
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 39, characters 14-19
result: () = ()
globals: x -> {contents= 1}, y -> {contents= 42}
** Global.test2 ()
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 34, characters 13-18
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 34, characters 13-18
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 41, characters 15-17
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 41, characters 15-17
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 44, characters 14-20
result: () = ()
globals: x -> {contents= 0}, y -> {contents= 42}

* Functions
** Functions.test1 ()
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 53, characters 15-16
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 53, characters 15-16
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 57, characters 14-28
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 58, characters 14-31
<rac-check-term-result>Assertion failed at "examples/tests/rac.mlw", line 59, characters 14-36
                       - Term: f1_aux 0 = ((f1_aux' @ 0) @ 1)
                       - Variables: <none>
Assertion failed at "examples/tests/rac.mlw", line 59, characters 14-36
- Term: f1_aux 0 = ((f1_aux' @ 0) @ 1)
- Variables: <none>
** Functions.test2 ()
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 53, characters 15-16
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 53, characters 15-16
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 63, characters 14-30
result: () = ()
globals: x -> {contents= 0}
** Functions.test3a ()
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 53, characters 15-16
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 53, characters 15-16
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 8-10
<rac-check-term-result>Precondition of `test3_aux` failed at "examples/tests/rac.mlw", line 71, characters 5-16
                       - Defined at "examples/tests/rac.mlw", line 66, characters 16-21
                       - Term: y > 0
                       - Variables: y -> 0
Precondition of `test3_aux` failed at "examples/tests/rac.mlw", line 71, characters 5-16
- Defined at "examples/tests/rac.mlw", line 66, characters 16-21
- Term: y > 0
- Variables: y -> 0
** Functions.test3b ()
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 53, characters 15-16
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 53, characters 15-16
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 8-10
<rac-check-term-result>Precondition of `test3_aux` is ok at "examples/tests/rac.mlw", line 74, characters 13-24
                       - Defined at "examples/tests/rac.mlw", line 66, characters 16-21
<rac-check-term-result>Postcondition of `test3_aux` is ok at "examples/tests/rac.mlw", line 74, characters 13-24
                       - Defined at "examples/tests/rac.mlw", line 67, characters 15-25
<rac-check-term-result>Precondition of `test3_aux` is ok at "examples/tests/rac.mlw", line 75, characters 5-16
                       - Defined at "examples/tests/rac.mlw", line 66, characters 16-21
<rac-check-term-result>Postcondition of `test3_aux` failed at "examples/tests/rac.mlw", line 75, characters 5-16
                       - Defined at "examples/tests/rac.mlw", line 67, characters 15-25
                       - Term: result = 1
                       - Variables: result -> 2
Postcondition of `test3_aux` failed at "examples/tests/rac.mlw", line 75, characters 5-16
- Defined at "examples/tests/rac.mlw", line 67, characters 15-25
- Term: result = 1
- Variables: result -> 2
** Functions.test4 ()
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 53, characters 15-16
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 53, characters 15-16
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `Tuple0` is ok at "examples/tests/rac.mlw", line 85, characters 19-21
<rac-check-term-result>Exceptional postcondition of `test4_aux` failed at "examples/tests/rac.mlw", line 85, characters 9-21
                       - Defined at "examples/tests/rac.mlw", line 80, characters 21-26
                       - Term: j = x.contents
                       - Variables: j -> 42, x -> {contents= 1}
Exceptional postcondition of `test4_aux` failed at "examples/tests/rac.mlw", line 85, characters 9-21
- Defined at "examples/tests/rac.mlw", line 80, characters 21-26
- Term: j = x.contents
- Variables: j -> 42, x -> {contents= 1}
** Functions.test5 ()
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 53, characters 15-16
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 53, characters 15-16
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 90, characters 10-11
<rac-check-term-result>Postcondition of `(+)` is ok at "examples/tests/rac.mlw", line 90, characters 10-15
<rac-check-term-result>Postcondition of `test5_aux` is ok at "examples/tests/rac.mlw", line 93, characters 5-16
                       - Defined at "examples/tests/rac.mlw", line 89, characters 15-28
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 90, characters 10-11
<rac-check-term-result>Postcondition of `(+)` is ok at "examples/tests/rac.mlw", line 90, characters 10-15
<rac-check-term-result>Postcondition of `test5_aux` failed at "examples/tests/rac.mlw", line 94, characters 5-16
                       - Defined at "examples/tests/rac.mlw", line 89, characters 15-28
                       - Term: x.contents = (x1.contents + 1)
                       - Variables: x -> {contents= 3}, x1 -> {contents= 1}
Postcondition of `test5_aux` failed at "examples/tests/rac.mlw", line 94, characters 5-16
- Defined at "examples/tests/rac.mlw", line 89, characters 15-28
- Term: x.contents = (x1.contents + 1)
- Variables: x -> {contents= 3}, x1 -> {contents= 1}
** Functions.test6 ()
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 53, characters 15-16
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 53, characters 15-16
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 103, characters 17-18
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 103, characters 17-18
<rac-check-term-result>Precondition of `test6_aux` is ok at "examples/tests/rac.mlw", line 104, characters 13-27
                       - Defined at "examples/tests/rac.mlw", line 97, characters 16-22
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 100, characters 5-6
<rac-check-term-result>Postcondition of `test6_aux` is ok at "examples/tests/rac.mlw", line 104, characters 13-27
                       - Defined at "examples/tests/rac.mlw", line 98, characters 15-25
<rac-check-term-result>Precondition of `test6_aux` failed at "examples/tests/rac.mlw", line 105, characters 13-27
                       - Defined at "examples/tests/rac.mlw", line 97, characters 16-22
                       - Term: not x.contents = y
                       - Variables: x -> {contents= 42}, y -> 42
Precondition of `test6_aux` failed at "examples/tests/rac.mlw", line 105, characters 13-27
- Defined at "examples/tests/rac.mlw", line 97, characters 16-22
- Term: not x.contents = y
- Variables: x -> {contents= 42}, y -> 42

* Loops
** Loops.test1 ()
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 112, characters 13-18
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 112, characters 13-18
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Precondition of `test1` is ok at "command line expression to execute", line 1, characters 1-9
                       - Defined at "examples/tests/rac.mlw", line 114, characters 27-32
<rac-check-term-result>Loop invariant init is ok at "examples/tests/rac.mlw", line 116, characters 19-30
<rac-check-term-result>Postcondition of `Tuple0` is ok at "examples/tests/rac.mlw", line 116, characters 32-32
<rac-check-term-result>Loop invariant preservation is ok at "examples/tests/rac.mlw", line 116, characters 19-30
<rac-check-term-result>Postcondition of `Tuple0` is ok at "examples/tests/rac.mlw", line 116, characters 32-32
<rac-check-term-result>Loop invariant preservation is ok at "examples/tests/rac.mlw", line 116, characters 19-30
<rac-check-term-result>Postcondition of `Tuple0` is ok at "examples/tests/rac.mlw", line 116, characters 32-32
<rac-check-term-result>Loop invariant preservation is ok at "examples/tests/rac.mlw", line 116, characters 19-30
<rac-check-term-result>Postcondition of `Tuple0` is ok at "examples/tests/rac.mlw", line 116, characters 32-32
<rac-check-term-result>Loop invariant preservation is ok at "examples/tests/rac.mlw", line 116, characters 19-30
<rac-check-term-result>Postcondition of `Tuple0` is ok at "examples/tests/rac.mlw", line 116, characters 32-32
<rac-check-term-result>Loop invariant preservation is ok at "examples/tests/rac.mlw", line 116, characters 19-30
<rac-check-term-result>Postcondition of `Tuple0` is ok at "examples/tests/rac.mlw", line 116, characters 32-32
<rac-check-term-result>Loop invariant preservation is ok at "examples/tests/rac.mlw", line 116, characters 19-30
<rac-check-term-result>Postcondition of `Tuple0` is ok at "examples/tests/rac.mlw", line 116, characters 32-32
<rac-check-term-result>Loop invariant preservation is ok at "examples/tests/rac.mlw", line 116, characters 19-30
<rac-check-term-result>Postcondition of `Tuple0` is ok at "examples/tests/rac.mlw", line 116, characters 32-32
<rac-check-term-result>Loop invariant preservation is ok at "examples/tests/rac.mlw", line 116, characters 19-30
<rac-check-term-result>Postcondition of `Tuple0` is ok at "examples/tests/rac.mlw", line 116, characters 32-32
<rac-check-term-result>Loop invariant preservation is ok at "examples/tests/rac.mlw", line 116, characters 19-30
<rac-check-term-result>Postcondition of `Tuple0` is ok at "examples/tests/rac.mlw", line 116, characters 32-32
<rac-check-term-result>Loop invariant preservation is ok at "examples/tests/rac.mlw", line 116, characters 19-30
result: () = ()
globals: x -> {contents= 0}
** Loops.test2 ()
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 112, characters 13-18
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 112, characters 13-18
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Precondition of `test2` is ok at "command line expression to execute", line 1, characters 1-9
                       - Defined at "examples/tests/rac.mlw", line 119, characters 27-32
<rac-check-term-result>Loop invariant init is ok at "examples/tests/rac.mlw", line 121, characters 19-33
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 122, characters 12-13
<rac-check-term-result>Postcondition of `(+)` is ok at "examples/tests/rac.mlw", line 122, characters 12-17
<rac-check-term-result>Loop invariant preservation is ok at "examples/tests/rac.mlw", line 121, characters 19-33
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 122, characters 12-13
<rac-check-term-result>Postcondition of `(+)` is ok at "examples/tests/rac.mlw", line 122, characters 12-17
<rac-check-term-result>Loop invariant preservation failed at "examples/tests/rac.mlw", line 121, characters 19-33
                       - Term: x.contents = 0 || x.contents = 1
                       - Variables: x -> {contents= 2}
Loop invariant preservation failed at "examples/tests/rac.mlw", line 121, characters 19-33
- Term: x.contents = 0 || x.contents = 1
- Variables: x -> {contents= 2}
** Loops.test3 ()
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 112, characters 13-18
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 112, characters 13-18
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Loop invariant init is ok at "examples/tests/rac.mlw", line 128, characters 19-25
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 126, characters 11-12
<rac-check-term-result>Postcondition of `(<)` is ok at "examples/tests/rac.mlw", line 126, characters 11-17
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 129, characters 12-13
<rac-check-term-result>Postcondition of `(+)` is ok at "examples/tests/rac.mlw", line 129, characters 12-17
<rac-check-term-result>Loop invariant preservation is ok at "examples/tests/rac.mlw", line 128, characters 19-25
<rac-check-term-result>Loop variant decrease is ok at "examples/tests/rac.mlw", line 127, characters 17-23
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 126, characters 11-12
<rac-check-term-result>Postcondition of `(<)` is ok at "examples/tests/rac.mlw", line 126, characters 11-17
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 129, characters 12-13
<rac-check-term-result>Postcondition of `(+)` is ok at "examples/tests/rac.mlw", line 129, characters 12-17
<rac-check-term-result>Loop invariant preservation is ok at "examples/tests/rac.mlw", line 128, characters 19-25
<rac-check-term-result>Loop variant decrease is ok at "examples/tests/rac.mlw", line 127, characters 17-23
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 126, characters 11-12
<rac-check-term-result>Postcondition of `(<)` is ok at "examples/tests/rac.mlw", line 126, characters 11-17
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 129, characters 12-13
<rac-check-term-result>Postcondition of `(+)` is ok at "examples/tests/rac.mlw", line 129, characters 12-17
<rac-check-term-result>Loop invariant preservation is ok at "examples/tests/rac.mlw", line 128, characters 19-25
<rac-check-term-result>Loop variant decrease is ok at "examples/tests/rac.mlw", line 127, characters 17-23
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 126, characters 11-12
<rac-check-term-result>Postcondition of `(<)` is ok at "examples/tests/rac.mlw", line 126, characters 11-17
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 129, characters 12-13
<rac-check-term-result>Postcondition of `(+)` is ok at "examples/tests/rac.mlw", line 129, characters 12-17
<rac-check-term-result>Loop invariant preservation is ok at "examples/tests/rac.mlw", line 128, characters 19-25
<rac-check-term-result>Loop variant decrease is ok at "examples/tests/rac.mlw", line 127, characters 17-23
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 126, characters 11-12
<rac-check-term-result>Postcondition of `(<)` is ok at "examples/tests/rac.mlw", line 126, characters 11-17
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 129, characters 12-13
<rac-check-term-result>Postcondition of `(+)` is ok at "examples/tests/rac.mlw", line 129, characters 12-17
<rac-check-term-result>Loop invariant preservation is ok at "examples/tests/rac.mlw", line 128, characters 19-25
<rac-check-term-result>Loop variant decrease is ok at "examples/tests/rac.mlw", line 127, characters 17-23
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 126, characters 11-12
<rac-check-term-result>Postcondition of `(<)` is ok at "examples/tests/rac.mlw", line 126, characters 11-17
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 129, characters 12-13
<rac-check-term-result>Postcondition of `(+)` is ok at "examples/tests/rac.mlw", line 129, characters 12-17
<rac-check-term-result>Loop invariant preservation failed at "examples/tests/rac.mlw", line 128, characters 19-25
                       - Term: 5 >= x.contents
                       - Variables: x -> {contents= 6}
Loop invariant preservation failed at "examples/tests/rac.mlw", line 128, characters 19-25
- Term: 5 >= x.contents
- Variables: x -> {contents= 6}

* Aliasing
** Aliasing.test1 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `r'mk` is ok at "examples/tests/rac.mlw", line 140, characters 13-23
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 143, characters 14-45
<rac-check-term-result>Postcondition of `value` is ok at "examples/tests/rac.mlw", line 144, characters 14-21
<rac-check-term-result>Postcondition of `value` is ok at "examples/tests/rac.mlw", line 144, characters 5-12
<rac-check-term-result>Postcondition of `Tuple2` is ok at "examples/tests/rac.mlw", line 144, characters 5-21
result: (int, int) = (100, 100)
globals: <none>
** Aliasing.test2 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `True` is ok at "examples/tests/rac.mlw", line 157, characters 26-30
<rac-check-term-result>Postcondition of `r'mk` is ok at "examples/tests/rac.mlw", line 147, characters 13-23
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 153, characters 14-28
<rac-check-term-result>Postcondition of `value` is ok at "examples/tests/rac.mlw", line 154, characters 14-21
<rac-check-term-result>Postcondition of `value` is ok at "examples/tests/rac.mlw", line 154, characters 5-12
<rac-check-term-result>Postcondition of `Tuple2` is ok at "examples/tests/rac.mlw", line 154, characters 5-21
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 158, characters 14-33
<rac-check-term-result>Postcondition of `False` is ok at "examples/tests/rac.mlw", line 159, characters 26-31
<rac-check-term-result>Postcondition of `r'mk` is ok at "examples/tests/rac.mlw", line 147, characters 13-23
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 153, characters 14-28
<rac-check-term-result>Postcondition of `value` is ok at "examples/tests/rac.mlw", line 154, characters 14-21
<rac-check-term-result>Postcondition of `value` is ok at "examples/tests/rac.mlw", line 154, characters 5-12
<rac-check-term-result>Postcondition of `Tuple2` is ok at "examples/tests/rac.mlw", line 154, characters 5-21
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 160, characters 14-33
result: () = ()
globals: <none>

* Labels
** Labels.test1 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `r'mk` is ok at "examples/tests/rac.mlw", line 169, characters 13-23
<rac-check-term-result>Postcondition of `value` is ok at "examples/tests/rac.mlw", line 171, characters 16-23
<rac-check-term-result>Postcondition of `(+)` is ok at "examples/tests/rac.mlw", line 171, characters 16-27
<rac-check-term-result>Postcondition of `value` is ok at "examples/tests/rac.mlw", line 173, characters 16-23
<rac-check-term-result>Postcondition of `(+)` is ok at "examples/tests/rac.mlw", line 173, characters 16-27
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 174, characters 14-59
result: () = ()
globals: <none>

* RecordMutGhost
** RecordMutGhost.test ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 6-8
<rac-check-term-result>Postcondition of `t'mk` is ok at "examples/tests/rac.mlw", line 212, characters 13-44
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 213, characters 14-21
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 214, characters 14-23
<rac-check-term-result>Postcondition of `f` is ok at "examples/tests/rac.mlw", line 215, characters 21-24
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 216, characters 14-24
<rac-check-term-result>Postcondition of `f` is ok at "examples/tests/rac.mlw", line 217, characters 21-24
<rac-check-term-result>Postcondition of `(=)` is ok at "examples/tests/rac.mlw", line 215, characters 48-53
                       - Defined at "WHY3DATA/stdlib/int.mlw", line 16, characters 40-56
<rac-check-term-result>Postcondition of `(@)` is ok at "examples/tests/rac.mlw", line 217, characters 21-26
<rac-check-term-result>Postcondition of `(+)` is ok at "examples/tests/rac.mlw", line 217, characters 5-26
result: int = 43
globals: <none>

* PolyContext
** PolyContext.test1 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `poly` is ok at "examples/tests/rac.mlw", line 227, characters 5-11
                       - Defined at "examples/tests/rac.mlw", line 222, characters 27-28
<rac-check-term-result>Postcondition of `test1` is ok at "command line expression to execute", line 1, characters 1-9
                       - Defined at "examples/tests/rac.mlw", line 226, characters 13-15
result: int = 42
globals: <none>
** PolyContext.test2 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `poly` is ok at "examples/tests/rac.mlw", line 231, characters 5-11
                       - Defined at "examples/tests/rac.mlw", line 222, characters 27-28
<rac-check-term-result>Postcondition of `poly'` is ok at "examples/tests/rac.mlw", line 235, characters 5-12
                       - Defined at "examples/tests/rac.mlw", line 222, characters 27-28
<rac-check-term-result>Postcondition of `test2` is ok at "command line expression to execute", line 1, characters 1-9
                       - Defined at "examples/tests/rac.mlw", line 234, characters 13-15
result: int = 42
globals: <none>

* PolyRefContracts
** PolyRefContracts.test1 ()
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 253, characters 19-20
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 253, characters 19-20
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 243, characters 13-18
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 243, characters 13-18
<rac-check-term-result>Postcondition of `contents` is ok at "WHY3DATA/stdlib/ref.mlw", line 18, characters 34-44
<rac-check-term-result>Postcondition of `(!)` is ok at "examples/tests/rac.mlw", line 244, characters 10-12
<rac-check-term-result>Postcondition of `(+)` is ok at "examples/tests/rac.mlw", line 244, characters 10-16
<rac-check-term-result>Postcondition of `(:=)` is ok at "examples/tests/rac.mlw", line 244, characters 5-16
                       - Defined at "WHY3DATA/stdlib/ref.mlw", line 20, characters 40-45
result: () = ()
globals: myref -> {contents= 0}
** PolyRefContracts.test2a ()
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 253, characters 19-20
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 253, characters 19-20
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 8-10
<rac-check-term-result>Precondition of `test2_aux` is ok at "examples/tests/rac.mlw", line 256, characters 5-24
                       - Defined at "examples/tests/rac.mlw", line 247, characters 16-30
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 251, characters 5-11
<rac-check-term-result>Postcondition of `test2_aux` is ok at "examples/tests/rac.mlw", line 256, characters 5-24
                       - Defined at "examples/tests/rac.mlw", line 248, characters 15-28
<rac-check-term-result>Postcondition of `test2_aux` is ok at "examples/tests/rac.mlw", line 256, characters 5-24
                       - Defined at "examples/tests/rac.mlw", line 249, characters 15-28
result: int = 1
globals: myref -> {contents= 1}
** PolyRefContracts.test2b ()
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 253, characters 19-20
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 253, characters 19-20
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 8-10
<rac-check-term-result>Precondition of `test2_aux` failed at "examples/tests/rac.mlw", line 259, characters 5-24
                       - Defined at "examples/tests/rac.mlw", line 247, characters 16-30
                       - Term: not argref.contents = argx
                       - Variables: argref -> {contents= 0}, argx -> 0
Precondition of `test2_aux` failed at "examples/tests/rac.mlw", line 259, characters 5-24
- Defined at "examples/tests/rac.mlw", line 247, characters 16-30
- Term: not argref.contents = argx
- Variables: argref -> {contents= 0}, argx -> 0
** PolyRefContracts.test2c ()
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 253, characters 19-20
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 253, characters 19-20
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 8-10
<rac-check-term-result>Precondition of `test2_aux` is ok at "examples/tests/rac.mlw", line 262, characters 5-24
                       - Defined at "examples/tests/rac.mlw", line 247, characters 16-30
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 251, characters 5-11
<rac-check-term-result>Postcondition of `test2_aux` is ok at "examples/tests/rac.mlw", line 262, characters 5-24
                       - Defined at "examples/tests/rac.mlw", line 248, characters 15-28
<rac-check-term-result>Postcondition of `test2_aux` failed at "examples/tests/rac.mlw", line 262, characters 5-24
                       - Defined at "examples/tests/rac.mlw", line 249, characters 15-28
                       - Term: result = argy
                       - Variables: argy -> 2, result -> 1
Postcondition of `test2_aux` failed at "examples/tests/rac.mlw", line 262, characters 5-24
- Defined at "examples/tests/rac.mlw", line 249, characters 15-28
- Term: result = argy
- Variables: argy -> 2, result -> 1

* RecordPoly
** RecordPoly.test1 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `t1'mk` is ok at "examples/tests/rac.mlw", line 270, characters 13-19
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 271, characters 14-21
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 273, characters 14-23
result: () = ()
globals: <none>
** RecordPoly.test2 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `t2'mk` is ok at "examples/tests/rac.mlw", line 277, characters 13-40
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 278, characters 14-26
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 279, characters 14-26
<rac-check-term-result>Postcondition of `f` is ok at "examples/tests/rac.mlw", line 280, characters 21-24
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 281, characters 14-27
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 282, characters 14-26
result: () = ()
globals: <none>
** RecordPoly.test3 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `t3'mk` is ok at "examples/tests/rac.mlw", line 295, characters 13-53
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 296, characters 14-29
<rac-check-term-result>Postcondition of `False` is ok at "examples/tests/rac.mlw", line 297, characters 16-21
<rac-check-term-result>Precondition of `update` is ok at "examples/tests/rac.mlw", line 297, characters 5-21
                       - Defined at "examples/tests/rac.mlw", line 287, characters 16-32
<rac-check-term-result>Postcondition of `elts` is ok at "examples/tests/rac.mlw", line 290, characters 23-29
<rac-check-term-result>Postcondition of `update` is ok at "examples/tests/rac.mlw", line 297, characters 5-21
                       - Defined at "examples/tests/rac.mlw", line 288, characters 15-78
<rac-check-term-result>Postcondition of `update` is ok at "examples/tests/rac.mlw", line 297, characters 5-21
                       - Defined at "examples/tests/rac.mlw", line 289, characters 15-27
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 298, characters 14-30
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 299, characters 14-29
<rac-check-term-result>Assertion failed at "examples/tests/rac.mlw", line 300, characters 14-30
                       - Term: (r.elts @ 1) = False
                       - Variables: r -> {elts=
                                          (fun j -> if j = i then x
                                             else f j) with i = 3, x = false, f = (fun _ -> true);
                                          length= 5}
Assertion failed at "examples/tests/rac.mlw", line 300, characters 14-30
- Term: (r.elts @ 1) = False
- Variables: r -> {elts=
                   (fun j -> if j = i then x
                      else f j) with i = 3, x = false, f = (fun _ -> true);
                   length= 5}

* PolyFunc
** PolyFunc.test1 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `mk` is ok at "examples/tests/rac.mlw", line 309, characters 7-11
<rac-check-term-result>Postcondition of `test1` is ok at "command line expression to execute", line 1, characters 1-9
result: int -> int = (fun _ -> v) with v = 0
globals: <none>
** PolyFunc.test2 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `t'mk` is ok at "examples/tests/rac.mlw", line 320, characters 13-28
<rac-check-term-result>Postcondition of `f` is ok at "examples/tests/rac.mlw", line 317, characters 23-26
<rac-check-term-result>Postcondition of `map_update` is ok at "examples/tests/rac.mlw", line 317, characters 12-30
<rac-check-term-result>Postcondition of `f` is ok at "examples/tests/rac.mlw", line 323, characters 12-15
<rac-check-term-result>Postcondition of `(=)` is ok at "examples/tests/rac.mlw", line 314, characters 24-29
                       - Defined at "WHY3DATA/stdlib/int.mlw", line 16, characters 40-56
<rac-check-term-result>Postcondition of `(@)` is ok at "examples/tests/rac.mlw", line 314, characters 42-45
<rac-check-term-result>Postcondition of `(@)` is ok at "examples/tests/rac.mlw", line 323, characters 12-17
<rac-check-term-result>Postcondition of `f` is ok at "examples/tests/rac.mlw", line 323, characters 5-8
<rac-check-term-result>Postcondition of `(=)` is ok at "examples/tests/rac.mlw", line 314, characters 24-29
                       - Defined at "WHY3DATA/stdlib/int.mlw", line 16, characters 40-56
<rac-check-term-result>Postcondition of `(@)` is ok at "examples/tests/rac.mlw", line 323, characters 5-10
<rac-check-term-result>Postcondition of `Tuple2` is ok at "examples/tests/rac.mlw", line 323, characters 5-17
result: (int, int) = (111, 0)
globals: <none>

* ArrayExec
** ArrayExec.test1 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `array'mk` is ok at "examples/tests/rac.mlw", line 349, characters 13-49
<rac-check-term-result>Postcondition of `elts` is ok at "examples/tests/rac.mlw", line 350, characters 15-21
<rac-check-term-result>Postcondition of `(@)` is ok at "examples/tests/rac.mlw", line 350, characters 15-23
<rac-check-term-result>Postcondition of `elts` is ok at "examples/tests/rac.mlw", line 350, characters 5-11
<rac-check-term-result>Postcondition of `(@)` is ok at "examples/tests/rac.mlw", line 350, characters 5-13
<rac-check-term-result>Postcondition of `Tuple2` is ok at "examples/tests/rac.mlw", line 350, characters 5-23
<rac-check-term-result>Postcondition of `test1` is ok at "command line expression to execute", line 1, characters 1-9
                       - Defined at "examples/tests/rac.mlw", line 349, character 5 to line 350, character 23
result: (int, int) = (0, 0)
globals: <none>
** ArrayExec.test2 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `array'mk` is ok at "examples/tests/rac.mlw", line 353, characters 13-49
<rac-check-term-result>Postcondition of `elts` is ok at "examples/tests/rac.mlw", line 354, characters 24-30
<rac-check-term-result>Postcondition of `elts` is ok at "examples/tests/rac.mlw", line 355, characters 15-21
<rac-check-term-result>Postcondition of `(=)` is ok at "examples/tests/rac.mlw", line 354, characters 54-59
                       - Defined at "WHY3DATA/stdlib/int.mlw", line 16, characters 40-56
<rac-check-term-result>Postcondition of `(@)` is ok at "examples/tests/rac.mlw", line 354, characters 73-76
<rac-check-term-result>Postcondition of `(@)` is ok at "examples/tests/rac.mlw", line 355, characters 15-23
<rac-check-term-result>Postcondition of `elts` is ok at "examples/tests/rac.mlw", line 355, characters 5-11
<rac-check-term-result>Postcondition of `(=)` is ok at "examples/tests/rac.mlw", line 354, characters 54-59
                       - Defined at "WHY3DATA/stdlib/int.mlw", line 16, characters 40-56
<rac-check-term-result>Postcondition of `(@)` is ok at "examples/tests/rac.mlw", line 355, characters 5-13
<rac-check-term-result>Postcondition of `Tuple2` is ok at "examples/tests/rac.mlw", line 355, characters 5-23
result: (int, int) = (11, 0)
globals: <none>
** ArrayExec.test3 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `array'mk` is ok at "examples/tests/rac.mlw", line 336, characters 5-34
<rac-check-term-result>Postcondition of `make` is ok at "examples/tests/rac.mlw", line 358, characters 13-22
                       - Defined at "examples/tests/rac.mlw", line 334, characters 15-32
<rac-check-term-result>Postcondition of `make` is ok at "examples/tests/rac.mlw", line 358, characters 13-22
                       - Defined at "examples/tests/rac.mlw", line 335, characters 15-56
<rac-check-term-result>Postcondition of `elts` is ok at "examples/tests/rac.mlw", line 346, characters 28-34
<rac-check-term-result>Postcondition of `map_update` is ok at "examples/tests/rac.mlw", line 346, characters 17-38
<rac-check-term-result>Postcondition of `elts` is ok at "examples/tests/rac.mlw", line 341, characters 42-48
<rac-check-term-result>Postcondition of `(=)` is ok at "examples/tests/rac.mlw", line 339, characters 24-29
                       - Defined at "WHY3DATA/stdlib/int.mlw", line 16, characters 40-56
<rac-check-term-result>Postcondition of `(@)` is ok at "examples/tests/rac.mlw", line 339, characters 42-45
<rac-check-term-result>Postcondition of `(@)` is ok at "examples/tests/rac.mlw", line 341, characters 42-50
<rac-check-term-result>Postcondition of `([])` is ok at "examples/tests/rac.mlw", line 360, characters 11-15
                       - Defined at "examples/tests/rac.mlw", line 341, characters 42-50
<rac-check-term-result>Postcondition of `elts` is ok at "examples/tests/rac.mlw", line 341, characters 42-48
<rac-check-term-result>Postcondition of `(=)` is ok at "examples/tests/rac.mlw", line 339, characters 24-29
                       - Defined at "WHY3DATA/stdlib/int.mlw", line 16, characters 40-56
<rac-check-term-result>Postcondition of `(@)` is ok at "examples/tests/rac.mlw", line 341, characters 42-50
<rac-check-term-result>Postcondition of `([])` is ok at "examples/tests/rac.mlw", line 360, characters 5-9
                       - Defined at "examples/tests/rac.mlw", line 341, characters 42-50
<rac-check-term-result>Postcondition of `Tuple2` is ok at "examples/tests/rac.mlw", line 360, characters 5-15
result: (int, int) = (10, 0)
globals: <none>
** ArrayExec.test4 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `array'mk` is ok at "examples/tests/rac.mlw", line 336, characters 5-34
<rac-check-term-result>Postcondition of `make` is ok at "examples/tests/rac.mlw", line 363, characters 13-22
                       - Defined at "examples/tests/rac.mlw", line 334, characters 15-32
<rac-check-term-result>Postcondition of `make` is ok at "examples/tests/rac.mlw", line 363, characters 13-22
                       - Defined at "examples/tests/rac.mlw", line 335, characters 15-56
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 364, characters 14-27
<rac-check-term-result>Postcondition of `elts` is ok at "examples/tests/rac.mlw", line 341, characters 42-48
<rac-check-term-result>Postcondition of `(@)` is ok at "examples/tests/rac.mlw", line 341, characters 42-50
<rac-check-term-result>Postcondition of `([])` is ok at "examples/tests/rac.mlw", line 365, characters 13-17
                       - Defined at "examples/tests/rac.mlw", line 341, characters 42-50
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 366, characters 14-19
<rac-check-term-result>Postcondition of `elts` is ok at "examples/tests/rac.mlw", line 346, characters 28-34
<rac-check-term-result>Postcondition of `map_update` is ok at "examples/tests/rac.mlw", line 346, characters 17-38
<rac-check-term-result>Postcondition of `elts` is ok at "examples/tests/rac.mlw", line 341, characters 42-48
<rac-check-term-result>Postcondition of `(=)` is ok at "examples/tests/rac.mlw", line 339, characters 24-29
                       - Defined at "WHY3DATA/stdlib/int.mlw", line 16, characters 40-56
<rac-check-term-result>Postcondition of `(@)` is ok at "examples/tests/rac.mlw", line 339, characters 42-45
<rac-check-term-result>Postcondition of `(@)` is ok at "examples/tests/rac.mlw", line 341, characters 42-50
<rac-check-term-result>Postcondition of `([])` is ok at "examples/tests/rac.mlw", line 368, characters 13-17
                       - Defined at "examples/tests/rac.mlw", line 341, characters 42-50
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 369, characters 14-19
<rac-check-term-result>Postcondition of `elts` is ok at "examples/tests/rac.mlw", line 341, characters 42-48
<rac-check-term-result>Postcondition of `(=)` is ok at "examples/tests/rac.mlw", line 339, characters 24-29
                       - Defined at "WHY3DATA/stdlib/int.mlw", line 16, characters 40-56
<rac-check-term-result>Postcondition of `(@)` is ok at "examples/tests/rac.mlw", line 341, characters 42-50
<rac-check-term-result>Postcondition of `([])` is ok at "examples/tests/rac.mlw", line 370, characters 13-17
                       - Defined at "examples/tests/rac.mlw", line 341, characters 42-50
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 371, characters 14-20
<rac-check-term-result>Postcondition of `elts` is ok at "examples/tests/rac.mlw", line 341, characters 42-48
<rac-check-term-result>Postcondition of `(=)` is ok at "examples/tests/rac.mlw", line 339, characters 24-29
                       - Defined at "WHY3DATA/stdlib/int.mlw", line 16, characters 40-56
<rac-check-term-result>Postcondition of `(@)` is ok at "examples/tests/rac.mlw", line 339, characters 42-45
<rac-check-term-result>Postcondition of `(@)` is ok at "examples/tests/rac.mlw", line 341, characters 42-50
<rac-check-term-result>Postcondition of `([])` is ok at "examples/tests/rac.mlw", line 372, characters 13-17
                       - Defined at "examples/tests/rac.mlw", line 341, characters 42-50
<rac-check-term-result>Assertion failed at "examples/tests/rac.mlw", line 373, characters 14-20
                       - Term: x = 11
                       - Variables: x -> 0
Assertion failed at "examples/tests/rac.mlw", line 373, characters 14-20
- Term: x = 11
- Variables: x -> 0

* Ghost
** Ghost.test1 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `t'mk` is ok at "examples/tests/rac.mlw", line 423, characters 13-31
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 424, characters 14-38
<rac-check-term-result>Postcondition of `i2` is ok at "examples/tests/rac.mlw", line 425, characters 12-16
<rac-check-term-result>Postcondition of `i1` is ok at "examples/tests/rac.mlw", line 425, characters 6-10
<rac-check-term-result>Postcondition of `Tuple2` is ok at "examples/tests/rac.mlw", line 425, characters 5-17
<rac-check-term-result>Postcondition of `test1` is ok at "command line expression to execute", line 1, characters 1-9
                       - Defined at "examples/tests/rac.mlw", line 423, character 5 to line 425, character 17
result: (int, int) = (123, 456)
globals: <none>
** Ghost.test2 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `(=)` is ok at "examples/tests/rac.mlw", line 428, characters 8-13
                       - Defined at "WHY3DATA/stdlib/int.mlw", line 16, characters 40-56
<rac-check-term-result>Postcondition of `f1` is ok at "examples/tests/rac.mlw", line 431, characters 19-25
                       - Defined at "examples/tests/rac.mlw", line 428, characters 5-31
<rac-check-term-result>Postcondition of `(+)` is ok at "examples/tests/rac.mlw", line 432, characters 5-10
<rac-check-term-result>Postcondition of `test2` is ok at "command line expression to execute", line 1, characters 1-9
                       - Defined at "examples/tests/rac.mlw", line 432, characters 5-10
result: int = 457
globals: <none>

* Predicates
** Predicates.test1 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 442, characters 14-20
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 444, characters 14-16
<rac-check-term-result>Postcondition of `True` is ok
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 446, characters 14-16
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 448, characters 14-20
result: () = ()
globals: <none>
** Predicates.test2 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 452, characters 14-16
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 454, characters 14-19
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 456, characters 14-16
<rac-check-term-result>Postcondition of `Tuple3` is ok at "examples/tests/rac.mlw", line 457, characters 5-16
<rac-check-term-result>Postcondition of `test2` is ok at "command line expression to execute", line 1, characters 1-9
                       - Defined at "examples/tests/rac.mlw", line 451, character 5 to line 457, character 16
result: (bool, int, bool) = (True, 0, True)
globals: <none>

* Arrays
** Arrays.test0 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Precondition of `make` is ok at "examples/tests/rac.mlw", line 389, characters 13-22
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 60, characters 44-50
<rac-check-term-result>Postcondition of `make` is ok at "examples/tests/rac.mlw", line 389, characters 13-22
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 61, characters 15-56
<rac-check-term-result>Postcondition of `make` is ok at "examples/tests/rac.mlw", line 389, characters 13-22
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 62, characters 15-32
<rac-check-term-result>Precondition of `([]<-)` is ok at "examples/tests/rac.mlw", line 390, characters 5-15
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 31, characters 46-63
<rac-check-term-result>Postcondition of `([]<-)` cannot be evaluated at "examples/tests/rac.mlw", line 390, characters 5-15
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 32, characters 16-49
Warning: Postcondition of `([]<-)` cannot be evaluated.

<rac-check-term-result>Postcondition of `([]<-)` cannot be evaluated at "examples/tests/rac.mlw", line 390, characters 5-15
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 33, characters 16-35
Warning: Postcondition of `([]<-)` cannot be evaluated.

<rac-check-term-result>Precondition of `([])` is ok at "examples/tests/rac.mlw", line 391, characters 11-15
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 23, characters 46-63
<rac-check-term-result>Postcondition of `([])` is ok at "examples/tests/rac.mlw", line 391, characters 11-15
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 24, characters 16-29
<rac-check-term-result>Precondition of `([])` is ok at "examples/tests/rac.mlw", line 391, characters 5-9
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 23, characters 46-63
<rac-check-term-result>Postcondition of `([])` is ok at "examples/tests/rac.mlw", line 391, characters 5-9
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 24, characters 16-29
<rac-check-term-result>Postcondition of `Tuple2` is ok at "examples/tests/rac.mlw", line 391, characters 5-15
result: (int, int) = (10, 0)
globals: <none>
** Arrays.test1 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Precondition of `make` is ok at "examples/tests/rac.mlw", line 394, characters 13-22
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 60, characters 44-50
<rac-check-term-result>Postcondition of `make` is ok at "examples/tests/rac.mlw", line 394, characters 13-22
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 61, characters 15-56
<rac-check-term-result>Postcondition of `make` is ok at "examples/tests/rac.mlw", line 394, characters 13-22
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 62, characters 15-32
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 395, characters 14-27
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 396, characters 14-22
<rac-check-term-result>Precondition of `([]<-)` is ok at "examples/tests/rac.mlw", line 397, characters 5-15
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 31, characters 46-63
<rac-check-term-result>Postcondition of `([]<-)` cannot be evaluated at "examples/tests/rac.mlw", line 397, characters 5-15
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 32, characters 16-49
Warning: Postcondition of `([]<-)` cannot be evaluated.

<rac-check-term-result>Postcondition of `([]<-)` cannot be evaluated at "examples/tests/rac.mlw", line 397, characters 5-15
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 33, characters 16-35
Warning: Postcondition of `([]<-)` cannot be evaluated.

<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 398, characters 14-22
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 399, characters 14-23
<rac-check-term-result>Assertion failed at "examples/tests/rac.mlw", line 400, characters 14-23
                       - Term: a[2] = 11
                       - Variables: a -> [0; 11; 0; 0; 0; 0; 0; 0; 0; 0]
Assertion failed at "examples/tests/rac.mlw", line 400, characters 14-23
- Term: a[2] = 11
- Variables: a -> [0; 11; 0; 0; 0; 0; 0; 0; 0; 0]
** Arrays.test2 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Precondition of `make` is ok at "examples/tests/rac.mlw", line 406, characters 13-22
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 60, characters 44-50
<rac-check-term-result>Postcondition of `make` is ok at "examples/tests/rac.mlw", line 406, characters 13-22
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 61, characters 15-56
<rac-check-term-result>Postcondition of `make` is ok at "examples/tests/rac.mlw", line 406, characters 13-22
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 62, characters 15-32
<rac-check-term-result>Assertion failed at "examples/tests/rac.mlw", line 407, characters 14-27
                       - Term: a.length = 42
                       - Variables: a -> [11]
Assertion failed at "examples/tests/rac.mlw", line 407, characters 14-27
- Term: a.length = 42
- Variables: a -> [11]
** Arrays.test3 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Postcondition of `Tuple0` is ok at "examples/tests/rac.mlw", line 410, characters 20-22
<rac-check-term-result>Postcondition of `empty` is ok at "examples/tests/rac.mlw", line 410, characters 13-35
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 65, characters 15-32
<rac-check-term-result>Assertion failed at "examples/tests/rac.mlw", line 411, characters 14-27
                       - Term: a.length = 42
                       - Variables: a -> []
Assertion failed at "examples/tests/rac.mlw", line 411, characters 14-27
- Term: a.length = 42
- Variables: a -> []

* Variants
** Variants.loop_var_ok1 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 14-16
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 463, characters 17-18
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 463, characters 17-18
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 464, characters 11-12
<rac-check-term-result>Postcondition of `(>=)` is ok at "examples/tests/rac.mlw", line 464, characters 11-17
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 466, characters 12-13
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 466, characters 12-17
<rac-check-term-result>Loop variant decrease is ok at "examples/tests/rac.mlw", line 465, characters 17-18
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 464, characters 11-12
<rac-check-term-result>Postcondition of `(>=)` is ok at "examples/tests/rac.mlw", line 464, characters 11-17
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 466, characters 12-13
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 466, characters 12-17
<rac-check-term-result>Loop variant decrease is ok at "examples/tests/rac.mlw", line 465, characters 17-18
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 464, characters 11-12
<rac-check-term-result>Postcondition of `(>=)` is ok at "examples/tests/rac.mlw", line 464, characters 11-17
result: () = ()
globals: <none>
** Variants.loop_var_ok2 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 14-16
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 469, characters 17-18
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 469, characters 17-18
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 470, characters 17-18
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 470, characters 17-18
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 471, characters 11-12
<rac-check-term-result>Postcondition of `(>=)` is ok at "examples/tests/rac.mlw", line 471, characters 11-17
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 473, characters 10-11
<rac-check-term-result>Postcondition of `(>)` is ok at "examples/tests/rac.mlw", line 473, characters 10-15
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 474, characters 14-15
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 474, characters 14-19
<rac-check-term-result>Loop variant decrease is ok at "examples/tests/rac.mlw", line 472, characters 17-18
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 471, characters 11-12
<rac-check-term-result>Postcondition of `(>=)` is ok at "examples/tests/rac.mlw", line 471, characters 11-17
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 473, characters 10-11
<rac-check-term-result>Postcondition of `(>)` is ok at "examples/tests/rac.mlw", line 473, characters 10-15
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 476, characters 14-15
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 476, characters 14-19
<rac-check-term-result>Loop variant decrease is ok at "examples/tests/rac.mlw", line 472, characters 17-18
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 471, characters 11-12
<rac-check-term-result>Postcondition of `(>=)` is ok at "examples/tests/rac.mlw", line 471, characters 11-17
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 473, characters 10-11
<rac-check-term-result>Postcondition of `(>)` is ok at "examples/tests/rac.mlw", line 473, characters 10-15
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 476, characters 14-15
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 476, characters 14-19
<rac-check-term-result>Loop variant decrease is ok at "examples/tests/rac.mlw", line 472, characters 17-18
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 471, characters 11-12
<rac-check-term-result>Postcondition of `(>=)` is ok at "examples/tests/rac.mlw", line 471, characters 11-17
result: () = ()
globals: <none>
** Variants.loop_var_fail1 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 16-18
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 479, characters 17-18
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 479, characters 17-18
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 480, characters 11-12
<rac-check-term-result>Postcondition of `(>=)` is ok at "examples/tests/rac.mlw", line 480, characters 11-17
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 482, characters 10-11
<rac-check-term-result>Postcondition of `(>)` is ok at "examples/tests/rac.mlw", line 482, characters 10-15
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 483, characters 14-15
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 483, characters 14-19
<rac-check-term-result>Loop variant decrease is ok at "examples/tests/rac.mlw", line 481, characters 17-18
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 480, characters 11-12
<rac-check-term-result>Postcondition of `(>=)` is ok at "examples/tests/rac.mlw", line 480, characters 11-17
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 482, characters 10-11
<rac-check-term-result>Postcondition of `(>)` is ok at "examples/tests/rac.mlw", line 482, characters 10-15
<rac-check-term-result>Postcondition of `Tuple0` is ok at "examples/tests/rac.mlw", line 482, character 7 to line 483, character 19
<rac-check-term-result>Loop variant decrease failed at "examples/tests/rac.mlw", line 481, characters 17-18
                       - Term: 0 <= i.contents /\ i1.contents < i.contents \/
                               i.contents = i1.contents /\ false
                       - Variables: i1 -> {contents= 1}, i -> {contents= 1}
Loop variant decrease failed at "examples/tests/rac.mlw", line 481, characters 17-18
- Term: 0 <= i.contents /\ i1.contents < i.contents \/
        i.contents = i1.contents /\ false
- Variables: i1 -> {contents= 1}, i -> {contents= 1}
** Variants.loop_var_fail2 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 16-18
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 486, characters 17-18
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 486, characters 17-18
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 487, characters 17-18
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 487, characters 17-18
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 488, characters 11-12
<rac-check-term-result>Postcondition of `(>=)` is ok at "examples/tests/rac.mlw", line 488, characters 11-17
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 490, characters 10-11
<rac-check-term-result>Postcondition of `(>)` is ok at "examples/tests/rac.mlw", line 490, characters 10-15
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 491, characters 14-15
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 491, characters 14-19
<rac-check-term-result>Loop variant decrease is ok at "examples/tests/rac.mlw", line 489, characters 17-18
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 488, characters 11-12
<rac-check-term-result>Postcondition of `(>=)` is ok at "examples/tests/rac.mlw", line 488, characters 11-17
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 490, characters 10-11
<rac-check-term-result>Postcondition of `(>)` is ok at "examples/tests/rac.mlw", line 490, characters 10-15
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 492, characters 15-16
<rac-check-term-result>Postcondition of `(>)` is ok at "examples/tests/rac.mlw", line 492, characters 15-20
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 493, characters 14-15
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 493, characters 14-19
<rac-check-term-result>Loop variant decrease is ok at "examples/tests/rac.mlw", line 489, characters 17-18
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 488, characters 11-12
<rac-check-term-result>Postcondition of `(>=)` is ok at "examples/tests/rac.mlw", line 488, characters 11-17
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 490, characters 10-11
<rac-check-term-result>Postcondition of `(>)` is ok at "examples/tests/rac.mlw", line 490, characters 10-15
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 492, characters 15-16
<rac-check-term-result>Postcondition of `(>)` is ok at "examples/tests/rac.mlw", line 492, characters 15-20
<rac-check-term-result>Postcondition of `Tuple0` is ok at "examples/tests/rac.mlw", line 492, character 12 to line 493, character 19
<rac-check-term-result>Loop variant decrease failed at "examples/tests/rac.mlw", line 489, characters 17-18
                       - Term: 0 <= i.contents /\ i1.contents < i.contents \/
                               i.contents = i1.contents /\
                               (0 <= j.contents /\ j1.contents < j.contents \/
                                j.contents = j1.contents /\ false)
                       - Variables: i1 -> {contents= 0},
                         i -> {contents= 0},
                         j1 -> {contents= 1},
                         j -> {contents= 1}
Loop variant decrease failed at "examples/tests/rac.mlw", line 489, characters 17-18
- Term: 0 <= i.contents /\ i1.contents < i.contents \/
        i.contents = i1.contents /\
        (0 <= j.contents /\ j1.contents < j.contents \/
         j.contents = j1.contents /\ false)
- Variables: i1 -> {contents= 0},
  i -> {contents= 0},
  j1 -> {contents= 1},
  j -> {contents= 1}
** Variants.loop_custom_variant ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 21-23
<rac-check-term-result>Postcondition of `ref'mk` is ok at "examples/tests/rac.mlw", line 500, characters 17-18
<rac-check-term-result>Postcondition of `ref` is ok at "examples/tests/rac.mlw", line 500, characters 17-18
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 501, characters 11-12
<rac-check-term-result>Postcondition of `(>=)` is ok at "examples/tests/rac.mlw", line 501, characters 11-17
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 503, characters 12-13
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 503, characters 12-17
<rac-check-term-result>Loop variant decrease is ok at "examples/tests/rac.mlw", line 502, characters 17-22
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 501, characters 11-12
<rac-check-term-result>Postcondition of `(>=)` is ok at "examples/tests/rac.mlw", line 501, characters 11-17
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 503, characters 12-13
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 503, characters 12-17
<rac-check-term-result>Loop variant decrease is ok at "examples/tests/rac.mlw", line 502, characters 17-22
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 501, characters 11-12
<rac-check-term-result>Postcondition of `(>=)` is ok at "examples/tests/rac.mlw", line 501, characters 11-17
<rac-check-term-result>Assertion is ok at "examples/tests/rac.mlw", line 505, characters 14-20
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 507, characters 11-12
<rac-check-term-result>Postcondition of `(>=)` is ok at "examples/tests/rac.mlw", line 507, characters 11-18
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 509, characters 12-13
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 509, characters 12-17
<rac-check-term-result>Loop variant decrease is ok at "examples/tests/rac.mlw", line 508, characters 17-22
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 507, characters 11-12
<rac-check-term-result>Postcondition of `(>=)` is ok at "examples/tests/rac.mlw", line 507, characters 11-18
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 509, characters 12-13
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 509, characters 12-17
<rac-check-term-result>Loop variant decrease is ok at "examples/tests/rac.mlw", line 508, characters 17-22
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 507, characters 11-12
<rac-check-term-result>Postcondition of `(>=)` is ok at "examples/tests/rac.mlw", line 507, characters 11-18
<rac-check-term-result>Postcondition of `contents` is ok at "examples/tests/rac.mlw", line 509, characters 12-13
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 509, characters 12-17
<rac-check-term-result>Loop variant decrease failed at "examples/tests/rac.mlw", line 508, characters 17-22
                       - Term: p (2 - i.contents) (2 - i1.contents) \/
                               (2 - i1.contents) = (2 - i.contents) /\ false
                       - Variables: i -> {contents= (-2)},
                         i1 -> {contents= (-1)}
Loop variant decrease failed at "examples/tests/rac.mlw", line 508, characters 17-22
- Term: p (2 - i.contents) (2 - i1.contents) \/
        (2 - i1.contents) = (2 - i.contents) /\ false
- Variables: i -> {contents= (-2)}, i1 -> {contents= (-1)}

* TestUInt64
** TestUInt64.test ()
<rac-check-term-result>Postcondition of `max_uint64` is ok
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/mach/int.mlw", line 567, characters 30-44
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 6-8
<rac-check-term-result>Precondition of `(-)` failed at "examples/tests/rac.mlw", line 515, characters 17-22
                       - Defined at "WHY3DATA/stdlib/mach/int.mlw", line 67, characters 41-58
                       - Term: in_bounds (a -' b)
                       - Variables: a -> 0, b -> 1
Precondition of `(-)` failed at "examples/tests/rac.mlw", line 515, characters 17-22
- Defined at "WHY3DATA/stdlib/mach/int.mlw", line 67, characters 41-58
- Term: in_bounds (a - b)
- Variables: a -> 0, b -> 1

* Premises
** Premises.test1 ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 7-9
<rac-check-term-result>Precondition of `test1` cannot be evaluated at "command line expression to execute", line 1, characters 1-9
                       - Defined at "examples/tests/rac.mlw", line 525, characters 16-20
Warning: Precondition of `test1` cannot be evaluated.

<rac-check-term-result>Postcondition of `Tuple0` is ok at "examples/tests/rac.mlw", line 527, characters 5-7
<rac-check-term-result>Postcondition of `test1` is ok at "command line expression to execute", line 1, characters 1-9
                       - Defined at "examples/tests/rac.mlw", line 526, characters 15-19
result: () = ()
globals: <none>

* FunctionVariant
** FunctionVariant.test1 2
<rac-check-term-result>Postcondition of `(>)` is ok at "examples/tests/rac.mlw", line 534, characters 8-13
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 534, characters 25-30
<rac-check-term-result>Variant decrease is ok at "examples/tests/rac.mlw", line 533, characters 36-37
<rac-check-term-result>Postcondition of `(>)` is ok at "examples/tests/rac.mlw", line 534, characters 8-13
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 534, characters 25-30
<rac-check-term-result>Variant decrease is ok at "examples/tests/rac.mlw", line 533, characters 36-37
<rac-check-term-result>Postcondition of `(>)` is ok at "examples/tests/rac.mlw", line 534, characters 8-13
result: int = 0
globals: <none>
** FunctionVariant.test2 2
<rac-check-term-result>Postcondition of `(>)` is ok at "examples/tests/rac.mlw", line 537, characters 8-13
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 537, characters 25-30
<rac-check-term-result>Variant decrease is ok at "examples/tests/rac.mlw", line 536, characters 36-37
<rac-check-term-result>Postcondition of `(>)` is ok at "examples/tests/rac.mlw", line 537, characters 8-13
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 537, characters 25-30
<rac-check-term-result>Variant decrease is ok at "examples/tests/rac.mlw", line 536, characters 36-37
<rac-check-term-result>Postcondition of `(>)` is ok at "examples/tests/rac.mlw", line 537, characters 8-13
<rac-check-term-result>Variant decrease failed at "examples/tests/rac.mlw", line 536, characters 36-37
                       - Term: 0 <= i /\ i1 < i \/ i = i1 /\ false
                       - Variables: i1 -> 0, i -> 0
Variant decrease failed at "examples/tests/rac.mlw", line 536, characters 36-37
- Term: 0 <= i /\ i1 < i \/ i = i1 /\ false
- Variables: i1 -> 0, i -> 0
** FunctionVariant.test3 2
<rac-check-term-result>Postcondition of `(=)` is ok at "examples/tests/rac.mlw", line 540, characters 8-13
                       - Defined at "WHY3DATA/stdlib/int.mlw", line 16, characters 40-56
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 540, characters 39-44
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 540, characters 33-38
<rac-check-term-result>Variant decrease is ok at "examples/tests/rac.mlw", line 541, characters 36-37
<rac-check-term-result>Postcondition of `(=)` is ok at "examples/tests/rac.mlw", line 542, characters 8-13
                       - Defined at "WHY3DATA/stdlib/int.mlw", line 16, characters 40-56
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 542, characters 41-48
<rac-check-term-result>Variant decrease is ok at "examples/tests/rac.mlw", line 541, characters 36-37
<rac-check-term-result>Postcondition of `(=)` is ok at "examples/tests/rac.mlw", line 542, characters 8-13
                       - Defined at "WHY3DATA/stdlib/int.mlw", line 16, characters 40-56
<rac-check-term-result>Variant decrease is ok at "examples/tests/rac.mlw", line 539, characters 36-37
<rac-check-term-result>Postcondition of `(=)` is ok at "examples/tests/rac.mlw", line 540, characters 8-13
                       - Defined at "WHY3DATA/stdlib/int.mlw", line 16, characters 40-56
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 540, characters 39-44
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 540, characters 33-38
<rac-check-term-result>Variant decrease is ok at "examples/tests/rac.mlw", line 541, characters 36-37
<rac-check-term-result>Postcondition of `(=)` is ok at "examples/tests/rac.mlw", line 542, characters 8-13
                       - Defined at "WHY3DATA/stdlib/int.mlw", line 16, characters 40-56
<rac-check-term-result>Variant decrease is ok at "examples/tests/rac.mlw", line 539, characters 36-37
<rac-check-term-result>Postcondition of `(=)` is ok at "examples/tests/rac.mlw", line 540, characters 8-13
                       - Defined at "WHY3DATA/stdlib/int.mlw", line 16, characters 40-56
result: int = 0
globals: <none>
** FunctionVariant.test4 2
<rac-check-term-result>Postcondition of `(=)` is ok at "examples/tests/rac.mlw", line 545, characters 8-13
                       - Defined at "WHY3DATA/stdlib/int.mlw", line 16, characters 40-56
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 545, characters 39-44
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 545, characters 33-38
<rac-check-term-result>Variant decrease is ok at "examples/tests/rac.mlw", line 546, characters 36-37
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 547, characters 14-21
<rac-check-term-result>Variant decrease is ok at "examples/tests/rac.mlw", line 546, characters 36-37
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 547, characters 14-21
<rac-check-term-result>Variant decrease is ok at "examples/tests/rac.mlw", line 546, characters 36-37
<rac-check-term-result>Postcondition of `(-_)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 40-42
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/int.mlw", line 23, characters 36-42
<rac-check-term-result>Postcondition of `(-)` is ok at "examples/tests/rac.mlw", line 547, characters 14-21
<rac-check-term-result>Variant decrease failed at "examples/tests/rac.mlw", line 546, characters 36-37
                       - Term: 0 <= i /\ i1 < i \/
                               i = i1 /\
                               (0 <= j /\ j1 < j \/ j = j1 /\ false)
                       - Variables: i1 -> 1, i -> 1, j1 -> (-2), j -> (-1)
Variant decrease failed at "examples/tests/rac.mlw", line 546, characters 36-37
- Term: 0 <= i /\ i1 < i \/ i = i1 /\ (0 <= j /\ j1 < j \/ j = j1 /\ false)
- Variables: i1 -> 1, i -> 1, j1 -> (-2), j -> (-1)
** FunctionVariant.test5 2
<rac-check-term-result>Postcondition of `(=)` is ok at "examples/tests/rac.mlw", line 550, characters 8-13
                       - Defined at "WHY3DATA/stdlib/int.mlw", line 16, characters 40-56
<rac-check-term-result>Variant decrease failed at "examples/tests/rac.mlw", line 551, characters 36-37
                       - Term: 0 <= i /\ i1 < i \/ i = i1 /\ false
                       - Variables: i1 -> 2, i -> 2
Variant decrease failed at "examples/tests/rac.mlw", line 551, characters 36-37
- Term: 0 <= i /\ i1 < i \/ i = i1 /\ false
- Variables: i1 -> 2, i -> 2

* ArrayList
** ArrayList.main ()
<rac-check-term-result>Postcondition of `Tuple0` is ok at "command line expression to execute", line 1, characters 6-8
<rac-check-term-result>Precondition of `make` is ok at "examples/tests/rac.mlw", line 562, characters 13-21
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 60, characters 44-50
<rac-check-term-result>Postcondition of `make` is ok at "examples/tests/rac.mlw", line 562, characters 13-21
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 61, characters 15-56
<rac-check-term-result>Postcondition of `make` is ok at "examples/tests/rac.mlw", line 562, characters 13-21
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 62, characters 15-32
<rac-check-term-result>Precondition of `to_list` is ok at "examples/tests/rac.mlw", line 563, characters 5-18
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 378, characters 16-39
<rac-check-term-result>Postcondition of `(<=)` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 8-14
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 50-55
<rac-check-term-result>Variant decrease is ok at "WHY3DATA/stdlib/array.mlw", line 379, characters 16-21
<rac-check-term-result>Precondition of `to_list1` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 39-58
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 378, characters 16-39
<rac-check-term-result>Postcondition of `(<=)` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 8-14
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 50-55
<rac-check-term-result>Variant decrease is ok at "WHY3DATA/stdlib/array.mlw", line 379, characters 16-21
<rac-check-term-result>Precondition of `to_list1` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 39-58
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 378, characters 16-39
<rac-check-term-result>Postcondition of `(<=)` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 8-14
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 50-55
<rac-check-term-result>Variant decrease is ok at "WHY3DATA/stdlib/array.mlw", line 379, characters 16-21
<rac-check-term-result>Precondition of `to_list1` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 39-58
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 378, characters 16-39
<rac-check-term-result>Postcondition of `(<=)` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 8-14
<rac-check-term-result>Postcondition of `(+)` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 50-55
<rac-check-term-result>Variant decrease is ok at "WHY3DATA/stdlib/array.mlw", line 379, characters 16-21
<rac-check-term-result>Precondition of `to_list1` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 39-58
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 378, characters 16-39
<rac-check-term-result>Postcondition of `(<=)` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 8-14
<rac-check-term-result>Postcondition of `Nil` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 20-23
<rac-check-term-result>Precondition of `([])` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 34-38
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 23, characters 46-63
<rac-check-term-result>Postcondition of `([])` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 34-38
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 24, characters 16-29
<rac-check-term-result>Postcondition of `Cons` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 29-58
<rac-check-term-result>Precondition of `([])` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 34-38
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 23, characters 46-63
<rac-check-term-result>Postcondition of `([])` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 34-38
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 24, characters 16-29
<rac-check-term-result>Postcondition of `Cons` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 29-58
<rac-check-term-result>Precondition of `([])` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 34-38
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 23, characters 46-63
<rac-check-term-result>Postcondition of `([])` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 34-38
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 24, characters 16-29
<rac-check-term-result>Postcondition of `Cons` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 29-58
<rac-check-term-result>Precondition of `([])` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 34-38
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 23, characters 46-63
<rac-check-term-result>Postcondition of `([])` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 34-38
                       - Defined at "WHY3DATA/stdlib/array.mlw", line 24, characters 16-29
<rac-check-term-result>Postcondition of `Cons` is ok at "WHY3DATA/stdlib/array.mlw", line 380, characters 29-58
<rac-check-term-result>Postcondition of `to_list` is ok at "examples/tests/rac.mlw", line 563, characters 5-18
result: list int = (Cons 0 (Cons 0 (Cons 0 (Cons 0 Nil))))
globals: <none>
