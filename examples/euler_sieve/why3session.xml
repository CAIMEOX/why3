<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.0.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="3.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.7.1" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Vampire" version="4.2.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Eprover" version="2.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="5" name="CVC4" version="1.7" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="6" name="Alt-Ergo" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="8" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="9" name="Alt-Ergo" version="2.3.3" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="10" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="11" name="Z3" version="4.8.10" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="euler_sieve.mlw"/>
<theory name="ArithmeticResults" proved="true">
 <goal name="mult_croissance_locale&#39;vc" expl="VC for mult_croissance_locale" proved="true">
 <proof prover="9"><result status="valid" time="0.00" steps="10"/></proof>
 </goal>
 <goal name="mult_croissance&#39;vc" expl="VC for mult_croissance" proved="true">
 <proof prover="9"><result status="valid" time="0.01" steps="16"/></proof>
 </goal>
 <goal name="comp_mult_2&#39;vc" expl="VC for comp_mult_2" proved="true">
 <proof prover="9"><result status="valid" time="0.01" steps="12"/></proof>
 </goal>
 <goal name="div_croissance_locale1&#39;vc" expl="VC for div_croissance_locale1" proved="true">
 <proof prover="10"><result status="valid" time="0.27" steps="49178"/></proof>
 </goal>
 <goal name="div_croissance1&#39;vc" expl="VC for div_croissance1" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
 </goal>
 <goal name="div_croissance_locale2&#39;vc" expl="VC for div_croissance_locale2" proved="true">
 <proof prover="10"><result status="valid" time="0.24" steps="56147"/></proof>
 </goal>
 <goal name="div_croissance2&#39;vc" expl="VC for div_croissance2" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="43"/></proof>
 </goal>
 <goal name="div_mult_1&#39;vc" expl="VC for div_mult_1" proved="true">
 <proof prover="10"><result status="valid" time="0.28" steps="61419"/></proof>
 </goal>
 <goal name="mult_borne_sous_exp&#39;vc" expl="VC for mult_borne_sous_exp" proved="true">
 <proof prover="9"><result status="valid" time="0.30" steps="387"/></proof>
 </goal>
 <goal name="sq_ineq&#39;vc" expl="VC for sq_ineq" proved="true">
 <proof prover="10"><result status="valid" time="0.18" steps="42238"/></proof>
 </goal>
</theory>
<theory name="DivisibilityResults" proved="true">
 <goal name="divides_div&#39;vc" expl="VC for divides_div" proved="true">
 <proof prover="9"><result status="valid" time="0.05" steps="77"/></proof>
 </goal>
 <goal name="divides_inf&#39;vc" expl="VC for divides_inf" proved="true">
 <proof prover="9"><result status="valid" time="0.04" steps="68"/></proof>
 </goal>
 <goal name="not_prime_divider_limits&#39;vc" expl="VC for not_prime_divider_limits" proved="true">
 <proof prover="9"><result status="valid" time="0.01" steps="46"/></proof>
 </goal>
 <goal name="no_prod_impl_no_divider&#39;vc" expl="VC for no_prod_impl_no_divider" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="no_prod_impl_no_divider&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(exists k:int. (2 &lt;= k /\ k &lt; n) /\ not k = i /\ divides k i)">
   <goal name="no_prod_impl_no_divider&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="no_prod_impl_no_divider&#39;vc.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0" expl="destruct premise" proved="true">
     <transf name="introduce_exists" proved="true" >
      <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0" expl="destruct premise" proved="true">
      <transf name="assert" proved="true" arg1="(exists l:int. l * k = i)">
       <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="0.02" steps="53"/></proof>
       </goal>
       <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1" expl="destruct premise" proved="true">
       <transf name="introduce_exists" proved="true" >
        <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0" expl="destruct premise" proved="true">
        <transf name="exists" proved="true" arg1="k">
         <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0" proved="true">
         <transf name="exists" proved="true" arg1="l">
          <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0" proved="true">
          <transf name="case" proved="true" arg1="(l = i)">
           <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0.0" expl="true case" proved="true">
           <transf name="assert" proved="true" arg1="(k = 1)">
            <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="3"><result status="valid" time="0.08"/></proof>
            </goal>
            <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0.0.1" expl="true case" proved="true">
            <proof prover="9"><result status="valid" time="0.01" steps="24"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0.1" expl="false case" proved="true">
           <proof prover="9"><result status="valid" time="3.16" steps="443"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.1" expl="true case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.01" steps="12"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="no_prod_impl_no_divider&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="22"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_prime_impl_divisor_under_sqrt&#39;vc" expl="VC for not_prime_impl_divisor_under_sqrt" proved="true">
 <proof prover="9"><result status="valid" time="0.03" steps="162"/></proof>
 </goal>
</theory>
<theory name="EulerSieveSpec" proved="true">
 <goal name="conservation_all_eliminated_marked_on_marked_change&#39;vc" expl="VC for conservation_all_eliminated_marked_on_marked_change" proved="true">
 <proof prover="9"><result status="valid" time="0.06" steps="177"/></proof>
 </goal>
 <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc" expl="VC for conservation_all_eliminated_marked_on_nexts_change" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc.0" expl="VC for conservation_all_eliminated_marked_on_nexts_change" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="51"/></proof>
    </goal>
    <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc.0.0.1" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.54" steps="1741"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="EulerSieve" proved="true">
 <goal name="multiples_of_marked_are_marked&#39;vc" expl="VC for multiples_of_marked_are_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="multiples_of_marked_are_marked&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiples_of_marked_are_marked&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="28"/></proof>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="28"/></proof>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="28"/></proof>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.3" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="28"/></proof>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.4" expl="VC for multiples_of_marked_are_marked" proved="true">
   <transf name="inline_all" proved="true" >
    <goal name="multiples_of_marked_are_marked&#39;vc.0.4.0" expl="VC for multiples_of_marked_are_marked" proved="true">
    <proof prover="8"><result status="valid" time="0.04"/></proof>
    <transf name="remove" proved="true" arg1="Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,even_or_odd,even_not_odd,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,mod_divides_computer,divides_mod_computer,odd_divides,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,H13,H12,Requires,H11,H10,H9,H8,H7,H6,H5,H4,H3,H">
     <goal name="multiples_of_marked_are_marked&#39;vc.0.4.0.0" expl="VC for multiples_of_marked_are_marked" proved="true">
     <proof prover="8"><result status="valid" time="0.01"/></proof>
     <proof prover="10"><result status="valid" time="0.03" steps="6438"/></proof>
     <proof prover="11"><result status="valid" time="0.01" steps="20965"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.5" expl="VC for multiples_of_marked_are_marked" proved="true">
   <transf name="assert" proved="true" arg1="(k * (i * j) = i*j + (k-1)*(i*j))">
    <goal name="multiples_of_marked_are_marked&#39;vc.0.5.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="29"/></proof>
    </goal>
    <goal name="multiples_of_marked_are_marked&#39;vc.0.5.1" expl="VC for multiples_of_marked_are_marked" proved="true">
    <transf name="assert" proved="true" arg1="((k-1)*(i*j) &gt;= 0)">
     <goal name="multiples_of_marked_are_marked&#39;vc.0.5.1.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
     </goal>
     <goal name="multiples_of_marked_are_marked&#39;vc.0.5.1.1" expl="VC for multiples_of_marked_are_marked" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.6" expl="VC for multiples_of_marked_are_marked" proved="true">
   <transf name="unfold" proved="true" arg1="previously_marked_multiples" arg2="in" arg3="Requires">
    <goal name="multiples_of_marked_are_marked&#39;vc.0.6.0" expl="VC for multiples_of_marked_are_marked" proved="true">
    <transf name="unfold" proved="true" arg1="all_multiples_marked" arg2="in" arg3="Requires">
     <goal name="multiples_of_marked_are_marked&#39;vc.0.6.0.0" expl="VC for multiples_of_marked_are_marked" proved="true">
     <proof prover="1"><result status="valid" time="0.04"/></proof>
     <transf name="remove" proved="true" arg1="zero,one,(-),even,([]),inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,Assoc1,Unit_def_r,Mul_distr_l,Refl,Trans,Div_unique,Div_bound,Div_minus1_left,Div_sign_pos,even_not_odd,odd_not_even,even_odd,odd_2k1,divides_left,divides_oppr_rev,divides_multl,divides_multr,divides_mod_euclidean,mod_divides_computer,prime_divisors,odd_prime,mult_croissance_locale,comp_mult_2,sq_ineq,divides_div,no_prod_impl_no_divider,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change">
      <goal name="multiples_of_marked_are_marked&#39;vc.0.6.0.0.0" expl="VC for multiples_of_marked_are_marked" proved="true">
      <proof prover="1"><result status="valid" time="0.03"/></proof>
      <proof prover="3"><result status="valid" time="0.11"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="prev_and_new_impl_all_multiples_marked&#39;vc" expl="VC for prev_and_new_impl_all_multiples_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="previously_marked_multiples" arg2="in" arg3="Requires2">
    <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.0.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="all_multiples_marked" arg2="in" arg3="Requires2">
     <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.0.0.0.0" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.03" steps="77"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="151"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="27"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="27"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.6" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.7" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.25" steps="256"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.8" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.9" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="82"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="120"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_only_multiples_marked&#39;vc" expl="VC for conservation_only_multiples_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_only_multiples_marked&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.12" steps="234"/></proof>
  </goal>
  <goal name="conservation_only_multiples_marked&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="137"/></proof>
  </goal>
  <goal name="conservation_only_multiples_marked&#39;vc.2" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="20"/></proof>
  </goal>
  <goal name="conservation_only_multiples_marked&#39;vc.3" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="conservation_only_multiples_marked&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="conservation_only_multiples_marked&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(k = i * j)">
     <goal name="conservation_only_multiples_marked&#39;vc.3.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.03" steps="61"/></proof>
     </goal>
     <goal name="conservation_only_multiples_marked&#39;vc.3.0.0.1" expl="false case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.10" steps="172"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_previously_marked_multiples&#39;vc" expl="VC for conservation_previously_marked_multiples" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_previously_marked_multiples&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="67"/></proof>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="92"/></proof>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_multiples&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
   </goal>
   <goal name="conservation_previously_marked_multiples&#39;vc.2.1" expl="VC for conservation_previously_marked_multiples" proved="true">
   <proof prover="9"><result status="valid" time="0.08" steps="234"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="28"/></proof>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.5" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_multiples&#39;vc.5.0" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="0.58"/></proof>
   </goal>
   <goal name="conservation_previously_marked_multiples&#39;vc.5.1" expl="VC for conservation_previously_marked_multiples" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="109"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.6" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_multiples&#39;vc.6.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="conservation_previously_marked_multiples&#39;vc.6.0.0" expl="assertion" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="conservation_previously_marked_multiples&#39;vc.6.0.0.0" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
     </goal>
     <goal name="conservation_previously_marked_multiples&#39;vc.6.0.0.1" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
     </goal>
     <goal name="conservation_previously_marked_multiples&#39;vc.6.0.0.2" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="38"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_previously_marked_multiples_on_marked_change" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="conservation_previously_marked_multiples_on_marked_change.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_multiples_on_marked_change.0.0" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.0" proved="true">
     <proof prover="9"><result status="valid" time="0.01" steps="12"/></proof>
     </goal>
     <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.1" proved="true">
     <proof prover="4"><result status="valid" time="0.13"/></proof>
     <transf name="remove" proved="true" arg1="zero,one,(-),(&gt;),(&lt;=),(&gt;=),abs,even,odd,divides,prime,([]),singleton,cons,snoc,(++),inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Unitary,NonTrivialRing,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_inf,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;def,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples">
      <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.1.0" proved="true">
      <proof prover="3"><result status="valid" time="0.04"/></proof>
      <proof prover="4" timelimit="1"><result status="valid" time="0.18"/></proof>
      <proof prover="9"><result status="valid" time="0.10" steps="543"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.2" proved="true">
     <transf name="inline_all" proved="true" >
      <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.2.0" proved="true">
      <proof prover="11"><result status="valid" time="0.08" steps="357527"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_not_marked_impl_next_not_marked&#39;vc" expl="VC for conservation_not_marked_impl_next_not_marked" proved="true">
 <proof prover="9"><result status="valid" time="0.35" steps="430"/></proof>
 </goal>
 <goal name="unchanged_other_elements&#39;vc" expl="VC for unchanged_other_elements" proved="true">
 <proof prover="9"><result status="valid" time="0.03" steps="67"/></proof>
 </goal>
 <goal name="t&#39;vc" expl="VC for t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="t&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="t&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="18"/></proof>
  </goal>
  <goal name="t&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
  </goal>
  <goal name="t&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="175"/></proof>
  </goal>
  <goal name="t&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="236"/></proof>
  </goal>
  <goal name="t&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
  </goal>
  <goal name="t&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="30"/></proof>
  </goal>
  <goal name="t&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="281"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="remove_products&#39;vc" expl="VC for remove_products" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="remove_products&#39;vc.0" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="25"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="130"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="61"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="63"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.4" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.4.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="83"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.4.1" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.08" steps="87"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.4.2" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.31" steps="461"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="215"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="92"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.7" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="91"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.8" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.8.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="89"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.8.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="89"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.9" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(mod (int63&#39;int n) 2 = 1)">
   <goal name="remove_products&#39;vc.9.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.33" steps="351"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.9.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="95"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.10" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.10.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.10.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.11" steps="99"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.10.2" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.11" steps="99"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.11" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="100"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.12" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.12.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.12.0.0" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.12.0.1" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.12.0.2" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.12" steps="101"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.12.0.3" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.13" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.13.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="100"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.13.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.13" steps="104"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.13.2" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.24" steps="412"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.14" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.14.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="102"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.14.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="102"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.14.2" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.14" steps="106"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.14.3" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="1.55" steps="446"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.15" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.15.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.15.0.0" expl="assertion" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="remove_products&#39;vc.15.0.0.0" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.12" steps="108"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.15.0.0.1" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.03" steps="104"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.15.0.0.2" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.13" steps="108"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.15.0.0.3" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.85" steps="453"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.15.1" expl="VC for remove_products" proved="true">
   <proof prover="0"><result status="valid" time="1.25" steps="768"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.16" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.16.0" expl="assertion" proved="true">
   <proof prover="10" timelimit="10"><result status="valid" time="8.38" steps="605071"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.16.1" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.72" steps="446"/></proof>
   <proof prover="10"><result status="valid" time="0.34" steps="75536"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.17" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="106"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.18" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="107"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.19" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.12" steps="112"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.20" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="110"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.21" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="111"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.22" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.21" steps="50192"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.23" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="120"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.24" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.14"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.25" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="120"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.26" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="120"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.27" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.17" steps="310"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.28" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="127"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.29" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.29.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.29.0.0" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="122"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.1" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="122"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.2" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.71" steps="636"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.3" expl="VC for remove_products" proved="true">
    <proof prover="9"><result status="valid" time="0.15" steps="128"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.4" expl="VC for remove_products" proved="true">
    <transf name="case" proved="true" arg1="(j &lt; x)">
     <goal name="remove_products&#39;vc.29.0.4.0" expl="true case" proved="true">
     <proof prover="9"><result status="valid" time="0.04" steps="131"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.29.0.4.1" expl="false case" proved="true">
     <transf name="unfold" proved="true" arg1="all_eliminated_marked_partial" arg2="in" arg3="Requires4">
      <goal name="remove_products&#39;vc.29.0.4.1.0" expl="false case" proved="true">
      <proof prover="10" timelimit="10"><result status="valid" time="8.25" steps="575582"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.30" expl="variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.51" steps="82026"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="313802"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.31" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.31.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="124"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="124"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.2" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="124"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.3" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="124"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.4" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="124"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.5" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="124"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.48" steps="83133"/></proof>
   <proof prover="11"><result status="valid" time="0.12" steps="313567"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.7" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.28" steps="61109"/></proof>
   <proof prover="11"><result status="valid" time="0.12" steps="347023"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.8" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.27" steps="60710"/></proof>
   <proof prover="11"><result status="valid" time="0.10" steps="306697"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.32" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.32.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.32.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.32.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.16" steps="133"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.42" steps="607"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.2" expl="VC for remove_products" proved="true">
     <transf name="unfold" proved="true" arg1="inv_remove_products" arg2="in" arg3="Requires8">
      <goal name="remove_products&#39;vc.32.0.0.2.0" expl="VC for remove_products" proved="true">
      <transf name="split_premise_right" proved="true" >
       <goal name="remove_products&#39;vc.32.0.0.2.0.0" expl="VC for remove_products" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="remove_products&#39;vc.32.0.0.2.0.0.0" expl="VC for remove_products" proved="true">
        <transf name="unfold" proved="true" arg1="all_primes" arg2="in" arg3="Requires11">
         <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0" expl="VC for remove_products" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.0" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.0.0" expl="VC for remove_products" proved="true">
           <proof prover="9"><result status="valid" time="0.56" steps="651"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.1" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.1.0" expl="VC for remove_products" proved="true">
           <proof prover="9"><result status="valid" time="0.56" steps="668"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.3" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.16" steps="133"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.4" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.40" steps="619"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.5" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.16" steps="133"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.32.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="34040"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.33" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.02" steps="514"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.34" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="135"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.35" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.29" steps="62179"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.36" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.37" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.37.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.37.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.16" steps="142"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.37.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.16" steps="142"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.37.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.37.0.3" expl="precondition" proved="true">
    <transf name="case" proved="true" arg1="(i = p)">
     <goal name="remove_products&#39;vc.37.0.3.0" expl="true case (precondition)" proved="true">
     <transf name="remove" proved="true" arg1="H24,H23,H22">
      <goal name="remove_products&#39;vc.37.0.3.0.0" expl="true case (precondition)" proved="true">
      <proof prover="9"><result status="valid" time="2.63" steps="712"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="remove_products&#39;vc.37.0.3.1" expl="false case (precondition)" proved="true">
     <transf name="assert" proved="true" arg1="(forall i. 0 &lt;= i &lt; div (length marked_old - 1) n -&gt; i &lt;&gt; p -&gt; (nexts t)[i] = (nexts t1)[i])">
      <goal name="remove_products&#39;vc.37.0.3.1.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.20" steps="158"/></proof>
      </goal>
      <goal name="remove_products&#39;vc.37.0.3.1.1" expl="false case (precondition)" proved="true">
      <transf name="inline_all" proved="true" >
       <goal name="remove_products&#39;vc.37.0.3.1.1.0" expl="false case (precondition)" proved="true">
       <proof prover="2"><result status="valid" time="0.07" steps="348198"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.38" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.40" steps="648"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.39" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.39.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.39.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.16" steps="146"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.17" steps="146"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="142"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.3" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.19" steps="146"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.4" expl="precondition" proved="true">
    <transf name="unfold" proved="true" arg1="not_marked_impl_next_not_marked_partial" arg2="in" arg3="Requires8">
     <goal name="remove_products&#39;vc.39.0.4.0" expl="precondition" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="remove_products&#39;vc.39.0.4.0.0" expl="precondition" proved="true">
      <transf name="instantiate" proved="true" arg1="Requires8" arg2="i">
       <goal name="remove_products&#39;vc.39.0.4.0.0.0" expl="precondition" proved="true">
       <proof prover="10"><result status="valid" time="0.70" steps="98845"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.40" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="144"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.42" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.43" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.44" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.45" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.46" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.47" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.69" steps="112996"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="256225"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.48" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.48.0" expl="variant decrease" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.48.1" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.36" steps="74264"/></proof>
   <proof prover="11"><result status="valid" time="0.10" steps="257438"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.49" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.49.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.2" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.3" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.4" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.5" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.38" steps="74254"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="228189"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.7" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.8" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.25" steps="56043"/></proof>
   <proof prover="11"><result status="valid" time="0.09" steps="256781"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.50" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.50.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.50.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.50.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.13" steps="118"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.29" steps="437"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.2" expl="VC for remove_products" proved="true">
     <transf name="unfold" proved="true" arg1="inv_remove_products" arg2="in" arg3="Requires8">
      <goal name="remove_products&#39;vc.50.0.0.2.0" expl="VC for remove_products" proved="true">
      <transf name="split_premise_right" proved="true" >
       <goal name="remove_products&#39;vc.50.0.0.2.0.0" expl="VC for remove_products" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="remove_products&#39;vc.50.0.0.2.0.0.0" expl="VC for remove_products" proved="true">
        <transf name="unfold" proved="true" arg1="all_primes" arg2="in" arg3="Requires11">
         <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0" expl="VC for remove_products" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.0" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.0.0" expl="VC for remove_products" proved="true">
           <proof prover="9"><result status="valid" time="0.36" steps="477"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.1" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.1.0" expl="VC for remove_products" proved="true">
           <proof prover="9"><result status="valid" time="0.34" steps="472"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.3" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.14" steps="118"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.4" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.27" steps="429"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.5" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.13" steps="118"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.50.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.08" steps="32264"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.51" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.64" steps="466"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.52" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.53" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.76" steps="475"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.54" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.10" steps="284313"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.55" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="126"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.56" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="127"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.57" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.57.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.57.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.14" steps="129"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.14" steps="129"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="127"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.3" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.17" steps="129"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.4" expl="precondition" proved="true">
    <transf name="unfold" proved="true" arg1="not_marked_impl_next_not_marked_partial" arg2="in" arg3="Requires8">
     <goal name="remove_products&#39;vc.57.0.4.0" expl="precondition" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="remove_products&#39;vc.57.0.4.0.0" expl="precondition" proved="true">
      <transf name="instantiate" proved="true" arg1="Requires8" arg2="i">
       <goal name="remove_products&#39;vc.57.0.4.0.0.0" expl="precondition" proved="true">
       <proof prover="10"><result status="valid" time="0.52" steps="88452"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.58" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="129"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.59" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.60" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.61" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.62" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.63" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.64" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.65" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.65.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="83"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.1" expl="VC for remove_products" proved="true">
   <proof prover="11"><result status="valid" time="0.08" steps="206183"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.2" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.59" steps="547"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.3" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.12" steps="300"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.4" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.10" steps="93"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.66" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.66.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.24" steps="60006"/></proof>
   <proof prover="11"><result status="valid" time="0.06" steps="211783"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="89"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.2" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.80" steps="583"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.3" expl="VC for remove_products" proved="true">
   <proof prover="10"><result status="valid" time="0.29" steps="61980"/></proof>
   <proof prover="11"><result status="valid" time="0.07" steps="204109"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.4" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="85"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.5" expl="VC for remove_products" proved="true">
   <proof prover="11"><result status="valid" time="0.09" steps="235500"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.67" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="87"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.68" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="87"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.69" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="87"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.70" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="87"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.71" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.71.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.71.0.0" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.06" steps="91"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.71.0.1" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.07" steps="91"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.71.0.2" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="87"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.71.0.3" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="prime_multiples_marked" arg2="in" arg3="Requires2">
     <goal name="remove_products&#39;vc.71.0.3.0" expl="postcondition" proved="true">
     <transf name="split_all_right" proved="true" >
      <goal name="remove_products&#39;vc.71.0.3.0.0" expl="postcondition" proved="true">
      <transf name="case" proved="true" arg1="(i &lt; (nexts t)[x])">
       <goal name="remove_products&#39;vc.71.0.3.0.0.0" expl="true case (postcondition)" proved="true">
       <proof prover="9"><result status="valid" time="0.08" steps="105"/></proof>
       </goal>
       <goal name="remove_products&#39;vc.71.0.3.0.0.1" expl="false case (postcondition)" proved="true">
       <proof prover="9"><result status="valid" time="0.16" steps="330"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.72" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="89"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.73" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.73.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.25" steps="58669"/></proof>
   <proof prover="11"><result status="valid" time="0.07" steps="206003"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="85"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.2" expl="VC for remove_products" proved="true">
   <proof prover="6"><result status="valid" time="1.68" steps="22064"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.3" expl="VC for remove_products" proved="true">
   <proof prover="10"><result status="valid" time="0.29" steps="61040"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="200938"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.4" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="81"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.5" expl="VC for remove_products" proved="true">
   <proof prover="11"><result status="valid" time="0.09" steps="228646"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.74" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="83"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.75" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="83"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.76" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="83"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.77" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="83"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.78" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="86"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.79" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="85"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.80" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="86"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.81" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="79"/></proof>
  <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,max,marked_old,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,t&#39;invariant,H2,H1,H,Requires4,Requires3,Requires1,Ensures1,Ensures,Requires">
   <goal name="remove_products&#39;vc.81.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.00" steps="16"/></proof>
   <proof prover="9"><result status="valid" time="0.00" steps="32"/></proof>
   <proof prover="11"><result status="valid" time="0.02" steps="35647"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.82" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="31"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.83" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="31"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.84" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(mod (int63&#39;int n) 2 = 1)">
   <goal name="remove_products&#39;vc.84.0" expl="asserted formula" proved="true">
   <proof prover="10"><result status="valid" time="0.17" steps="38200"/></proof>
   <proof prover="11"><result status="valid" time="0.06" steps="122594"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.84.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.08" steps="37"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.85" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="109"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.86" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="42"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.87" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.87.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.06" steps="179"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.87.1" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.22" steps="54438"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.87.2" expl="VC for remove_products" proved="true">
   <proof prover="10"><result status="valid" time="0.17" steps="44061"/></proof>
   <proof prover="11"><result status="valid" time="0.07" steps="169955"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.87.3" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="49"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.87.4" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="43"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.88" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.88.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.2" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.3" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.4" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.20" steps="48031"/></proof>
   <proof prover="11"><result status="valid" time="0.06" steps="168239"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.5" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.24" steps="53937"/></proof>
   <proof prover="11"><result status="valid" time="0.07" steps="170906"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.7" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.8" expl="precondition" proved="true">
   <proof prover="11"><result status="valid" time="0.08" steps="194850"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.89" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.89.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.89.0.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.18" steps="45763"/></proof>
    <proof prover="11"><result status="valid" time="0.07" steps="194135"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.1" expl="precondition" proved="true">
    <proof prover="11"><result status="valid" time="0.06" steps="171734"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.2" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(n * n &gt; n)">
     <goal name="remove_products&#39;vc.89.0.2.0" expl="asserted formula" proved="true">
     <proof prover="11"><result status="valid" time="0.07" steps="172813"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.89.0.2.1" expl="precondition" proved="true">
     <proof prover="10"><result status="valid" time="0.22" steps="56493"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="remove_products&#39;vc.89.0.3" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.15" steps="40201"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="165480"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.4" expl="precondition" proved="true">
    <proof prover="11"><result status="valid" time="0.07" steps="183589"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.5" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.16" steps="41864"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="174913"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.90" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="184615"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.91" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.14" steps="40307"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="170432"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.92" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.22" steps="49437"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.93" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.34"/></proof>
  <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),inv_nexts,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,max,marked_copy,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,H4,H3,H2,Requires8,Requires7,Requires6,Requires5,Ensures5,Ensures4,Ensures3,Ensures2,H,Ensures1,Ensures,Assert,Requires3,Requires2,Requires1,Requires">
   <goal name="remove_products&#39;vc.93.0" expl="precondition" proved="true">
   <proof prover="8" timelimit="1"><result status="valid" time="0.02"/></proof>
   <proof prover="9"><result status="valid" time="0.10" steps="174"/></proof>
   <proof prover="10"><result status="valid" time="0.06" steps="9957"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.94" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.94.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.94.0.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.15" steps="42318"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="179501"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.94.0.1" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.18" steps="44819"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="169357"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.94.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="54"/></proof>
    <proof prover="10"><result status="valid" time="0.15" steps="40299"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.94.0.3" expl="precondition" proved="true">
    <proof prover="11"><result status="valid" time="0.07" steps="183853"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.95" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.95.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.95.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.95.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="10"><result status="valid" time="0.20" steps="48181"/></proof>
     <proof prover="11"><result status="valid" time="0.08" steps="207636"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.95.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
     <proof prover="10"><result status="valid" time="0.11" steps="41479"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.95.0.0.2" expl="VC for remove_products" proved="true">
     <proof prover="10"><result status="valid" time="0.28" steps="61561"/></proof>
     <proof prover="11"><result status="valid" time="0.08" steps="205837"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.95.0.0.3" expl="VC for remove_products" proved="true">
     <proof prover="10"><result status="valid" time="0.26" steps="55537"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.96" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.96.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.96.0.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.15" steps="42333"/></proof>
    <proof prover="11"><result status="valid" time="0.08" steps="199419"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.1" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.18" steps="45080"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="170700"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="57"/></proof>
    <proof prover="10"><result status="valid" time="0.15" steps="40332"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="160091"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.3" expl="precondition" proved="true">
    <proof prover="11"><result status="valid" time="0.06" steps="189402"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.4" expl="precondition" proved="true">
    <transf name="inline_all" proved="true" >
     <goal name="remove_products&#39;vc.96.0.4.0" expl="precondition" proved="true">
     <proof prover="11"><result status="valid" time="0.08" steps="418282"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.97" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="59"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="40408"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="170544"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.98" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="54"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="45291"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="167789"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.99" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="38035"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11852"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.100" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="38038"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11857"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.101" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="38041"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11862"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.102" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="38044"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11867"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.103" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="38047"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11872"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.104" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.28" steps="61834"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="188359"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.105" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="39661"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12558"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.106" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="39667"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12563"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.107" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="47061"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="177606"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.108" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="39678"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12573"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.109" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="39681"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12578"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.110" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="37955"/></proof>
  <proof prover="11"><result status="valid" time="0.01" steps="11815"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.111" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="37958"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11820"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.112" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="37961"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11825"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.113" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.113.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.113.0.0" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="only_multiples_marked" arg2="in" arg3="Ensures5">
     <goal name="remove_products&#39;vc.113.0.0.0" expl="postcondition" proved="true">
     <transf name="instantiate" proved="true" arg1="Ensures5" arg2="k">
      <goal name="remove_products&#39;vc.113.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="0.80" steps="295"/></proof>
      <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,max,marked_old,marked_copy,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,H8,H6,Requires3,Requires2,Requires1,Requires,Ensures16,Ensures15,Ensures14,Ensures13,H5,Ensures12,Ensures11,Assert,Ensures10,Ensures9,Ensures8,Ensures7,Ensures6,Ensures5,Ensures4,Ensures3,Ensures2,Ensures1,Ensures">
       <goal name="remove_products&#39;vc.113.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="0"><result status="valid" time="0.06" steps="61"/></proof>
       <proof prover="9"><result status="valid" time="0.05" steps="91"/></proof>
       <proof prover="11"><result status="valid" time="0.02" steps="49116"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="previously_marked_multiples_impl_prime&#39;vc" expl="VC for previously_marked_multiples_impl_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="previously_marked_multiples_impl_prime&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="previously_marked_multiples_impl_prime&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="inline_all" proved="true" >
    <goal name="previously_marked_multiples_impl_prime&#39;vc.0.0.0" expl="assertion" proved="true">
    <proof prover="11"><result status="valid" time="0.10" steps="214770"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="previously_marked_multiples_impl_prime&#39;vc.0.1" expl="VC for previously_marked_multiples_impl_prime" proved="true">
   <proof prover="9"><result status="valid" time="0.45" steps="631"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="previously_marked_multiples_impl_prime&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="80"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="40225"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="134637"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="only_multiples_marked_impl_not_marked&#39;vc" expl="VC for only_multiples_marked_impl_not_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="only_multiples_marked_impl_not_marked&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="73"/></proof>
  </goal>
  <goal name="only_multiples_marked_impl_not_marked&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.48" steps="402"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="EulerSieveImpl" proved="true">
 <goal name="conservation_inv_arr_on_mark&#39;vc" expl="VC for conservation_inv_arr_on_mark" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_inv_arr_on_mark&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.30" steps="144"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="35846"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_mark&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="179"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="34610"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="137546"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_mark&#39;vc.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(abs arr[i] = abs arr[i &lt;- - arr[i]][i])">
   <goal name="conservation_inv_arr_on_mark&#39;vc.2.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.16" steps="141"/></proof>
   <proof prover="10"><result status="valid" time="0.16" steps="35103"/></proof>
   <proof prover="11"><result status="valid" time="0.05" steps="132725"/></proof>
   </goal>
   <goal name="conservation_inv_arr_on_mark&#39;vc.2.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(j = i)">
    <goal name="conservation_inv_arr_on_mark&#39;vc.2.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.23" steps="181"/></proof>
    <proof prover="10"><result status="valid" time="0.16" steps="35216"/></proof>
    </goal>
    <goal name="conservation_inv_arr_on_mark&#39;vc.2.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="1.95" steps="722"/></proof>
    <proof prover="10"><result status="valid" time="0.19" steps="40512"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_inv_arr_on_jump&#39;vc" expl="VC for conservation_inv_arr_on_jump" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_inv_arr_on_jump&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="22"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="30577"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="9349"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="22"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="32419"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="119754"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.2" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="2.28" steps="347"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="36220"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.3" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="3.45" steps="335"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="36502"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="5.49" steps="2893"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="t&#39;vc" expl="VC for t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t&#39;vc.0" expl="array creation size" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="10"/></proof>
  <proof prover="10"><result status="valid" time="0.09" steps="26332"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="7475"/></proof>
  </goal>
  <goal name="t&#39;vc.1" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="31370"/></proof>
  <proof prover="11"><result status="valid" time="0.01" steps="15822"/></proof>
  </goal>
  <goal name="t&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="16"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="32370"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="9985"/></proof>
  </goal>
  <goal name="t&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="20"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="36712"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="11901"/></proof>
  </goal>
  <goal name="t&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="24"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="37124"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="19653"/></proof>
  </goal>
  <goal name="t&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="70"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="41495"/></proof>
  </goal>
  <goal name="t&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.00" steps="30"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="37334"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12204"/></proof>
  </goal>
  <goal name="t&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="31"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="37402"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="19897"/></proof>
  </goal>
  <goal name="t&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="204"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="44527"/></proof>
  </goal>
  <goal name="t&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="269"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="45220"/></proof>
  </goal>
  <goal name="t&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="40113"/></proof>
  <proof prover="11"><result status="valid" time="0.03" steps="185928"/></proof>
  </goal>
  <goal name="t&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="40317"/></proof>
  </goal>
  <goal name="t&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.13" steps="357"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="44316"/></proof>
  </goal>
  <goal name="t&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="47182"/></proof>
  </goal>
  <goal name="t&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="3.66" steps="1585"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="47745"/></proof>
  </goal>
  <goal name="t&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="354"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="45465"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="219461"/></proof>
  </goal>
  <goal name="t&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="4.09" steps="899"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="49699"/></proof>
  <proof prover="11"><result status="valid" time="0.33" steps="893376"/></proof>
  </goal>
  <goal name="t&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="50588"/></proof>
  </goal>
  <goal name="t&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="4.75" steps="1547"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="51788"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="create&#39;vc.0" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="16"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="32058"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="108673"/></proof>
  </goal>
  <goal name="create&#39;vc.1" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="16"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="28893"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="8553"/></proof>
  </goal>
  <goal name="create&#39;vc.2" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="70"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="32374"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="110529"/></proof>
  </goal>
  <goal name="create&#39;vc.3" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="81"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="32484"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="111031"/></proof>
  </goal>
  <goal name="create&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="20"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="30760"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="107985"/></proof>
  </goal>
  <goal name="create&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="36"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="34597"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="10855"/></proof>
  </goal>
  <goal name="create&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="24"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="37650"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="159188"/></proof>
  </goal>
  <goal name="create&#39;vc.7" expl="array creation size" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="30"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="45251"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="192136"/></proof>
  </goal>
  <goal name="create&#39;vc.8" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="32"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="42758"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="192798"/></proof>
  </goal>
  <goal name="create&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="141"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="48985"/></proof>
  </goal>
  <goal name="create&#39;vc.10" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="42"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="42985"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="197477"/></proof>
  </goal>
  <goal name="create&#39;vc.11" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="46"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="46022"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="197424"/></proof>
  </goal>
  <goal name="create&#39;vc.12" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="48"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="47704"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="214210"/></proof>
  </goal>
  <goal name="create&#39;vc.13" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="50"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="47823"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="216974"/></proof>
  </goal>
  <goal name="create&#39;vc.14" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="48"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="46427"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="200858"/></proof>
  </goal>
  <goal name="create&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="2.99" steps="3258"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="50024"/></proof>
  </goal>
  <goal name="create&#39;vc.16" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="45961"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="195753"/></proof>
  </goal>
  <goal name="create&#39;vc.17" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="40663"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13352"/></proof>
  </goal>
  <goal name="create&#39;vc.18" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="41"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="46186"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="197580"/></proof>
  </goal>
  <goal name="create&#39;vc.19" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="40694"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="22399"/></proof>
  </goal>
  <goal name="create&#39;vc.20" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="42854"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="198896"/></proof>
  </goal>
  <goal name="create&#39;vc.21" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="43"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="50186"/></proof>
  </goal>
  <goal name="create&#39;vc.22" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="45"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="48685"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="210183"/></proof>
  </goal>
  <goal name="create&#39;vc.23" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.22" steps="51913"/></proof>
  </goal>
  <goal name="create&#39;vc.24" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.36" steps="58651"/></proof>
  </goal>
  <goal name="create&#39;vc.25" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="57"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="49611"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="209501"/></proof>
  </goal>
  <goal name="create&#39;vc.26" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="227"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="50703"/></proof>
  </goal>
  <goal name="create&#39;vc.27" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.55" steps="498"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="52223"/></proof>
  </goal>
  <goal name="create&#39;vc.28" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.23" steps="1435"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="53987"/></proof>
  </goal>
  <goal name="create&#39;vc.29" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.69" steps="848"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="53333"/></proof>
  </goal>
  <goal name="create&#39;vc.30" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.08" steps="1212"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="54654"/></proof>
  </goal>
  <goal name="create&#39;vc.31" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.13" steps="1214"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="53872"/></proof>
  </goal>
  <goal name="create&#39;vc.32" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="5.35" steps="2381"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="53103"/></proof>
  </goal>
  <goal name="create&#39;vc.33" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="55800"/></proof>
  </goal>
  <goal name="create&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="40846"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13442"/></proof>
  </goal>
  <goal name="create&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.44" steps="432"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="53252"/></proof>
  </goal>
  <goal name="create&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.51" steps="264"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="53923"/></proof>
  </goal>
  <goal name="create&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="72"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="54421"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="222731"/></proof>
  </goal>
  <goal name="create&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.10" steps="676"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="52464"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="244352"/></proof>
  </goal>
  <goal name="create&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.24" steps="789"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="55514"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="244033"/></proof>
  </goal>
  <goal name="create&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.50" steps="560"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="54257"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="223366"/></proof>
  </goal>
  <goal name="create&#39;vc.41" expl="out of loop bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="35"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="52205"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="219163"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_next&#39;vc" expl="VC for set_next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_next&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="35"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="43706"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="183395"/></proof>
  </goal>
  <goal name="set_next&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="37"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="43759"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="183790"/></proof>
  </goal>
  <goal name="set_next&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="39"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="43889"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="184322"/></proof>
  </goal>
  <goal name="set_next&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="41"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="43960"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="185578"/></proof>
  </goal>
  <goal name="set_next&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="43"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="44000"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="185945"/></proof>
  </goal>
  <goal name="set_next&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="49"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="44074"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="186064"/></proof>
  </goal>
  <goal name="set_next&#39;vc.6" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="34"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="33064"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="10218"/></proof>
  </goal>
  <goal name="set_next&#39;vc.7" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="188"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="37879"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="148401"/></proof>
  </goal>
  <goal name="set_next&#39;vc.8" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="98"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="45028"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="184617"/></proof>
  </goal>
  <goal name="set_next&#39;vc.9" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="43"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="42553"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="177220"/></proof>
  </goal>
  <goal name="set_next&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="46"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="43096"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="181606"/></proof>
  </goal>
  <goal name="set_next&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="52"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="45022"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="198664"/></proof>
  </goal>
  <goal name="set_next&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="45345"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="197306"/></proof>
  </goal>
  <goal name="set_next&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="57"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="47703"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="204414"/></proof>
  </goal>
  <goal name="set_next&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="51918"/></proof>
  </goal>
  <goal name="set_next&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="61"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="45721"/></proof>
  </goal>
  <goal name="set_next&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="69"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="48987"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="206754"/></proof>
  </goal>
  <goal name="set_next&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="1.18" steps="1205"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="51207"/></proof>
  </goal>
  <goal name="set_next&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="574"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="48791"/></proof>
  </goal>
  <goal name="set_next&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.24" steps="55290"/></proof>
  </goal>
  <goal name="set_next&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.31" steps="62264"/></proof>
  </goal>
  <goal name="set_next&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.30" steps="63840"/></proof>
  </goal>
  <goal name="set_next&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.27" steps="57671"/></proof>
  </goal>
  <goal name="set_next&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.23" steps="52271"/></proof>
  </goal>
  <goal name="set_next&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.30" steps="60576"/></proof>
  </goal>
  <goal name="set_next&#39;vc.25" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="54"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="37671"/></proof>
  <proof prover="11"><result status="valid" time="0.04" steps="96562"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_next&#39;vc" expl="VC for get_next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_next&#39;vc.0" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
  <proof prover="10"><result status="valid" time="0.09" steps="29078"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="8586"/></proof>
  </goal>
  <goal name="get_next&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="114"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="33518"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="124236"/></proof>
  </goal>
  <goal name="get_next&#39;vc.2" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="83"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="40254"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="160173"/></proof>
  </goal>
  <goal name="get_next&#39;vc.3" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="41379"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="169881"/></proof>
  </goal>
  <goal name="get_next&#39;vc.4" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="142"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="42328"/></proof>
  </goal>
  <goal name="get_next&#39;vc.5" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="41378"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="169751"/></proof>
  </goal>
  <goal name="get_next&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.63" steps="733"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="46038"/></proof>
  </goal>
  <goal name="get_next&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="229"/></proof>
  <proof prover="10"><result status="valid" time="0.47" steps="86029"/></proof>
  </goal>
  <goal name="get_next&#39;vc.8" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(i &gt;= 3)">
   <goal name="get_next&#39;vc.8.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="36"/></proof>
   <proof prover="10"><result status="valid" time="0.10" steps="32504"/></proof>
   <proof prover="11"><result status="valid" time="0.02" steps="9972"/></proof>
   </goal>
   <goal name="get_next&#39;vc.8.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(i &lt; max t - 1)">
    <goal name="get_next&#39;vc.8.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.05" steps="48"/></proof>
    <proof prover="10"><result status="valid" time="0.20" steps="40893"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="178055"/></proof>
    </goal>
    <goal name="get_next&#39;vc.8.1.1" expl="false case (postcondition)" proved="true">
    <transf name="case" proved="true" arg1="(i = max t)">
     <goal name="get_next&#39;vc.8.1.1.0" expl="false case (true case. postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.05" steps="50"/></proof>
     <proof prover="10"><result status="valid" time="0.14" steps="37818"/></proof>
     <proof prover="11"><result status="valid" time="0.06" steps="157436"/></proof>
     </goal>
     <goal name="get_next&#39;vc.8.1.1.1" expl="false case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.10" steps="193"/></proof>
     <proof prover="10"><result status="valid" time="0.26" steps="49389"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_mark&#39;vc" expl="VC for set_mark" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_mark&#39;vc.0" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="29078"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="8586"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="119"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="33472"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="124100"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="30"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="42796"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="179238"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="32"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="42879"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="179531"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="34"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="42968"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="179944"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="36"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="43049"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="181419"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.6" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="87"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="41081"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="164361"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="46"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="52858"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="185145"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="200"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="46475"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.9" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="96"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="42934"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="176551"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.10" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="36774"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="158969"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.11" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="96"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="42415"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="174908"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.12" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="39872"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="166335"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.13" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="107"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="42733"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="179494"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.14" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="46"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="44294"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="195777"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="49"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="45133"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="198602"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="127"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="45660"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="204887"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="45639"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="205261"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="48385"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="213945"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="45656"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="207120"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="64"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="45995"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.43" steps="262"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="50336"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="74"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="50228"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="227126"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="65"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="47688"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="210770"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="55850"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="58754"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.28" steps="58273"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.50" steps="78813"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.22" steps="51894"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.29" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.12" steps="78"/></proof>
  <proof prover="10"><result status="valid" time="0.37" steps="66399"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.30" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="39386"/></proof>
  <proof prover="11"><result status="valid" time="0.04" steps="108402"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.31" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="41937"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="180820"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.32" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="41"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="42780"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="183783"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.33" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="110"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="45013"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="200104"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="50"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="45069"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="200187"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="52"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="44978"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="201583"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="54"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="45095"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="201905"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="56"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="45418"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.41" steps="225"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="49299"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="66"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="49267"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="219567"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.40" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="57"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="46881"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="205541"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.41" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="65"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="48870"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="356"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="54307"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="68"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="50290"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="234802"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="68"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="53791"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="233403"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.45" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="65"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="51076"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.46" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="70"/></proof>
  <proof prover="10"><result status="valid" time="0.33" steps="62751"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="247449"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.47" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="50"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="37442"/></proof>
  <proof prover="11"><result status="valid" time="0.04" steps="101162"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_mark&#39;vc" expl="VC for get_mark" proved="true">
 <proof prover="9"><result status="valid" time="0.20" steps="337"/></proof>
 </goal>
 <goal name="get_max&#39;vc" expl="VC for get_max" proved="true">
 <proof prover="9"><result status="valid" time="0.03" steps="24"/></proof>
 <proof prover="10"><result status="valid" time="0.14" steps="33019"/></proof>
 <proof prover="11"><result status="valid" time="0.06" steps="110247"/></proof>
 </goal>
 <goal name="EulerSieve.t&#39;refn&#39;vc" expl="VC for t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t&#39;refn&#39;vc.0" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="38256"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="134678"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.1" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="38234"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="134711"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.2" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="48384"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="187044"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.3" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="43240"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="160550"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.4" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="43467"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="161265"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.5" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="38239"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="134897"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.6" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="18"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="43775"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="172383"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.7" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="20"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="44226"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="174180"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.8" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="42119"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="154212"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.9" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="14"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="42472"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="155613"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.10" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="14"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="42408"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="155625"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="EulerSieve.create&#39;refn&#39;vc" expl="VC for create&#39;refn" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="create&#39;refn&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="14"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="34048"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="17788"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="42272"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13432"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="42293"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="22739"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.28" steps="58971"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="105"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="206812"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="105"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="207888"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="42"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="49268"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="205064"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="EulerSieve.set_next&#39;refn&#39;vc" expl="VC for set_next&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.10" steps="206"/></proof>
 <proof prover="10"><result status="valid" time="0.16" steps="47509"/></proof>
 </goal>
 <goal name="EulerSieve.get_next&#39;refn&#39;vc" expl="VC for get_next&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
 <proof prover="10"><result status="valid" time="0.13" steps="36361"/></proof>
 <proof prover="11"><result status="valid" time="0.05" steps="132999"/></proof>
 </goal>
 <goal name="EulerSieve.set_mark&#39;refn&#39;vc" expl="VC for set_mark&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.03" steps="40"/></proof>
 <proof prover="10"><result status="valid" time="0.18" steps="42592"/></proof>
 <proof prover="11"><result status="valid" time="0.06" steps="153530"/></proof>
 </goal>
 <goal name="EulerSieve.get_mark&#39;refn&#39;vc" expl="VC for get_mark&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
 <proof prover="10"><result status="valid" time="0.13" steps="40052"/></proof>
 <proof prover="11"><result status="valid" time="0.05" steps="151600"/></proof>
 </goal>
 <goal name="EulerSieve.get_max&#39;refn&#39;vc" expl="VC for get_max&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="20"/></proof>
 <proof prover="10"><result status="valid" time="0.10" steps="34131"/></proof>
 <proof prover="11"><result status="valid" time="0.01" steps="10280"/></proof>
 </goal>
 <goal name="euler_sieve&#39;vc" expl="VC for euler_sieve" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="euler_sieve&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="14"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="34365"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="18074"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="45803"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="212013"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="43194"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13856"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="43197"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13861"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="43200"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13866"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="43203"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13871"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="78"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="45801"/></proof>
  <proof prover="11"><result status="valid" time="0.04" steps="115919"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.19" steps="258"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="57506"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="239306"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.8" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="84"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="46049"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="23717"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.9" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.18" steps="364"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="53183"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="227261"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.10" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.49" steps="403"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.11.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="68"/></proof>
   <proof prover="10"><result status="valid" time="0.18" steps="45916"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="214417"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.11.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.06" steps="72"/></proof>
   <proof prover="10"><result status="valid" time="0.11" steps="54522"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="256622"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.11.2" expl="precondition" proved="true">
   <transf name="unfold" proved="true" arg1="not_marked_impl_next_not_marked" arg2="in" arg3="Ensures5">
    <goal name="euler_sieve&#39;vc.11.2.0" expl="precondition" proved="true">
    <transf name="split_premise_right" proved="true" >
     <goal name="euler_sieve&#39;vc.11.2.0.0" expl="precondition" proved="true">
     <transf name="assert" proved="true" arg1="(int63&#39;int nn &lt;= div (int63&#39;int (max1 t)) (int63&#39;int nn))">
      <goal name="euler_sieve&#39;vc.11.2.0.0.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.10" steps="76"/></proof>
      <proof prover="11"><result status="valid" time="0.10" steps="280364"/></proof>
      </goal>
      <goal name="euler_sieve&#39;vc.11.2.0.0.1" expl="precondition" proved="true">
      <proof prover="11"><result status="valid" time="0.13" steps="392661"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.12" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="47792"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="240912"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.13" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.13.0" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.37" steps="69160"/></proof>
   <proof prover="11"><result status="valid" time="0.26" steps="647141"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.13.1" expl="VC for euler_sieve" proved="true">
   <transf name="unfold" proved="true" arg1="only_multiples_marked" arg2="in" arg3="Ensures4">
    <goal name="euler_sieve&#39;vc.13.1.0" expl="VC for euler_sieve" proved="true">
    <transf name="remove" proved="true" arg1="zero1,one1,(-),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,singleton,cons,snoc,(++),exchange,all_eliminated_marked_partial,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Refl,CompatOrderAdd,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,array63&#39;invariant,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H18,H17,Ensures13,H16,H15,H14,Ensures12,Ensures11,Ensures10,Ensures9,Ensures8,H13,H10,H9,Requires4,Requires3,Requires2,Requires,H8,Ensures7,Ensures6,Ensures5,H5,Ensures2,Ensures1,H3,Assert,Ensures,H12,H11,H7,H6">
     <goal name="euler_sieve&#39;vc.13.1.0.0" expl="VC for euler_sieve" proved="true">
     <proof prover="9"><result status="valid" time="0.05" steps="109"/></proof>
     <proof prover="11"><result status="valid" time="0.03" steps="60007"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.13.2" expl="VC for euler_sieve" proved="true">
   <transf name="remove" proved="true" arg1="(==)&#39;spec&#39;0,(==)&#39;spec,create&#39;spec&#39;0,create&#39;spec,set&#39;spec&#39;1,set&#39;spec&#39;0,set&#39;spec,singleton&#39;spec&#39;0,singleton&#39;spec,cons&#39;spec&#39;1,cons&#39;spec&#39;0,cons&#39;spec,snoc&#39;spec&#39;1,snoc&#39;spec&#39;0,snoc&#39;spec">
    <goal name="euler_sieve&#39;vc.13.2.0" expl="VC for euler_sieve" proved="true">
    <proof prover="3"><result status="valid" time="1.93"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.14" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="4.87" steps="749"/></proof>
  <proof prover="10"><result status="valid" time="0.34" steps="65472"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.15" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="53397"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="230953"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.16" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="43745"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14081"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.17" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="46325"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="231100"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.18" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="46337"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="231873"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.19" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.19.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="euler_sieve&#39;vc.19.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="euler_sieve&#39;vc.19.0.0.0" expl="VC for euler_sieve" proved="true">
     <proof prover="9"><result status="valid" time="0.07" steps="78"/></proof>
     <proof prover="10"><result status="valid" time="0.21" steps="54717"/></proof>
     <proof prover="11"><result status="valid" time="0.10" steps="275151"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.19.0.0.1" expl="VC for euler_sieve" proved="true">
     <proof prover="9"><result status="valid" time="0.07" steps="78"/></proof>
     <proof prover="10"><result status="valid" time="0.15" steps="61161"/></proof>
     <proof prover="11"><result status="valid" time="0.10" steps="262433"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.19.0.0.2" expl="VC for euler_sieve" proved="true">
     <proof prover="9"><result status="valid" time="0.03" steps="74"/></proof>
     <proof prover="10"><result status="valid" time="0.18" steps="51066"/></proof>
     <proof prover="11"><result status="valid" time="0.08" steps="233209"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.19.0.0.3" expl="VC for euler_sieve" proved="true">
     <proof prover="9"><result status="valid" time="1.49" steps="337"/></proof>
     <proof prover="11"><result status="valid" time="0.12" steps="362605"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.20" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.20.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.20.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.07" steps="79"/></proof>
    <proof prover="10"><result status="valid" time="0.18" steps="49621"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="252444"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.07" steps="79"/></proof>
    <proof prover="10"><result status="valid" time="0.17" steps="46431"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="231300"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.2" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.91" steps="106686"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.3" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="75"/></proof>
    <proof prover="10"><result status="valid" time="0.14" steps="43624"/></proof>
    <proof prover="11"><result status="valid" time="0.02" steps="14021"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.4" expl="precondition" proved="true">
    <transf name="unfold" proved="true" arg1="not_marked_impl_next_not_marked" arg2="in" arg3="Requires">
     <goal name="euler_sieve&#39;vc.20.0.4.0" expl="precondition" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.20.0.4.0.0" expl="precondition" proved="true">
      <transf name="assert" proved="true" arg1="(int63&#39;int nn &lt;= div (int63&#39;int (max1 t)) (int63&#39;int nn))">
       <goal name="euler_sieve&#39;vc.20.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="0.11" steps="83"/></proof>
       <proof prover="11"><result status="valid" time="0.10" steps="281380"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.20.0.4.0.0.1" expl="precondition" proved="true">
       <proof prover="11"><result status="valid" time="0.14" steps="422424"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.5" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.07" steps="79"/></proof>
    <proof prover="10"><result status="valid" time="0.18" steps="48041"/></proof>
    <proof prover="11"><result status="valid" time="0.08" steps="242042"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.12" steps="359"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="56666"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.22" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="88"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="46096"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="214701"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.23" expl="assertion" proved="true">
  <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Refl,Trans,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,odd_divides,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,array63&#39;invariant,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,t&#39;invariant,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H17,H16,H15,Ensures13,H14,H13,H12,Ensures12,Ensures11,Ensures10,Ensures9,Ensures8,H11,H10,H9,H8,Requires4,Requires3,Requires2,Requires1,Requires,H7,H6,Ensures7,Ensures6,Ensures4,H5,H4,Ensures2,Ensures1,H3,Ensures,H2">
   <goal name="euler_sieve&#39;vc.23.0" expl="assertion" proved="true">
   <proof prover="3" timelimit="1"><result status="valid" time="1.32"/></proof>
   <proof prover="9"><result status="valid" time="0.03" steps="258"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.24" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="88"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="48338"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="227106"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.25" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.25.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.07" steps="69"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.1" expl="VC for euler_sieve" proved="true">
   <proof prover="11"><result status="valid" time="0.10" steps="273964"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.2" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.94" steps="408"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="229295"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.3" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.10" steps="71"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.4" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="72"/></proof>
   <proof prover="10"><result status="valid" time="0.17" steps="49330"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="229773"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.5" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.07" steps="71"/></proof>
   <proof prover="10"><result status="valid" time="0.23" steps="55637"/></proof>
   <proof prover="11"><result status="valid" time="0.09" steps="264313"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.26" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.26.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.66" steps="574"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.73" steps="330"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.2" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.68" steps="332"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.3" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.08" steps="93"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="256119"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.4" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.57" steps="330"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.5" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.46" steps="318"/></proof>
   <proof prover="10"><result status="valid" time="0.29" steps="64960"/></proof>
   <proof prover="11"><result status="valid" time="0.11" steps="308262"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.27" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.27.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="2.20" steps="549"/></proof>
   <proof prover="10"><result status="valid" time="0.31" steps="69221"/></proof>
   <proof prover="11"><result status="valid" time="0.10" steps="307141"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.27.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(forall j k. 2 &lt;= j &lt; (nexts t)[n] -&gt; 2 &lt;= k &lt; length (marked t) -&gt; j * k &lt;&gt; i)">
    <goal name="euler_sieve&#39;vc.27.1.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.47" steps="310"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.27.1.1" expl="postcondition" proved="true">
    <proof prover="10"><result status="valid" time="0.29" steps="61771"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.28" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="34"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="42599"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13579"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.29" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="35"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="42617"/></proof>
  <proof prover="11"><result status="valid" time="0.01" steps="13586"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.30" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.15" steps="169"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.31" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.70" steps="634"/></proof>
  <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,divides,prime,singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,array63&#39;invariant,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H6,H5,H4,H3,H2,Ensures4,Ensures3,Ensures2,Ensures1,H,Requires2,Requires1,Requires">
   <goal name="euler_sieve&#39;vc.31.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="67"/></proof>
   <proof prover="9"><result status="valid" time="0.11" steps="161"/></proof>
   <proof prover="10"><result status="valid" time="0.06" steps="9519"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.32" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.32.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.32.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="32"/></proof>
    <proof prover="10"><result status="valid" time="0.22" steps="51639"/></proof>
    <proof prover="11"><result status="valid" time="0.08" steps="223805"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.32.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="32"/></proof>
    <proof prover="10"><result status="valid" time="0.20" steps="49905"/></proof>
    <proof prover="11"><result status="valid" time="0.07" steps="213635"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.32.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
    <proof prover="10"><result status="valid" time="0.13" steps="42569"/></proof>
    <proof prover="11"><result status="valid" time="0.02" steps="13555"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.32.0.3" expl="precondition" proved="true">
    <transf name="case" proved="true" arg1="(mod i 2 = 0)">
     <goal name="euler_sieve&#39;vc.32.0.3.0" expl="true case (precondition)" proved="true">
     <transf name="case" proved="true" arg1="(i &lt; max - 1)">
      <goal name="euler_sieve&#39;vc.32.0.3.0.0" expl="true case (precondition)" proved="true">
      <transf name="instantiate" proved="true" arg1="Ensures1" arg2="i">
       <goal name="euler_sieve&#39;vc.32.0.3.0.0.0" expl="true case (precondition)" proved="true">
       <proof prover="10"><result status="valid" time="0.43" steps="87069"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="euler_sieve&#39;vc.32.0.3.0.1" expl="false case (true case. precondition)" proved="true">
      <proof prover="9"><result status="valid" time="0.06" steps="44"/></proof>
      <proof prover="10"><result status="valid" time="0.21" steps="50506"/></proof>
      <proof prover="11"><result status="valid" time="0.08" steps="218450"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="euler_sieve&#39;vc.32.0.3.1" expl="false case (precondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.18" steps="141"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="62999"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.33" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.72" steps="943"/></proof>
  <proof prover="10"><result status="valid" time="0.36" steps="68829"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.34" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="223"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="54388"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.35" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(mod i 2 = 0)">
   <goal name="euler_sieve&#39;vc.35.0" expl="true case (assertion)" proved="true">
   <proof prover="9"><result status="valid" time="0.19" steps="206"/></proof>
   <proof prover="10"><result status="valid" time="0.24" steps="55373"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="239131"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.35.1" expl="false case (assertion)" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.35.1.0" expl="VC for euler_sieve" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="56"/></proof>
    <proof prover="10"><result status="valid" time="0.13" steps="44783"/></proof>
    <proof prover="11"><result status="valid" time="0.02" steps="14488"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.35.1.1" expl="VC for euler_sieve" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="56"/></proof>
    <proof prover="10"><result status="valid" time="0.14" steps="44802"/></proof>
    <proof prover="11"><result status="valid" time="0.02" steps="14499"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.35.1.2" expl="VC for euler_sieve" proved="true">
    <proof prover="9"><result status="valid" time="0.84" steps="907"/></proof>
    <proof prover="10"><result status="valid" time="0.46" steps="91259"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.36" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="2.85" steps="1437"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="55530"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.37" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="48"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="53235"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="240015"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.38" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="52"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="51870"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="232708"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.39" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="53"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="44898"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14617"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.40" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.17" steps="270"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="55246"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="248186"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.41" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="44962"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14662"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.42" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.42.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.42.0.0" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.42.0.0.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.05" steps="50"/></proof>
     <proof prover="10"><result status="valid" time="0.21" steps="53954"/></proof>
     <proof prover="11"><result status="valid" time="0.09" steps="254905"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.42.0.0.1" expl="loop invariant init" proved="true">
     <proof prover="9"><result status="valid" time="0.39" steps="177"/></proof>
     <proof prover="10"><result status="valid" time="0.26" steps="57930"/></proof>
     <proof prover="11"><result status="valid" time="0.10" steps="274991"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.1" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.60" steps="341"/></proof>
    <proof prover="10"><result status="valid" time="0.26" steps="57724"/></proof>
    <proof prover="11"><result status="valid" time="0.10" steps="285631"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.2" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.22" steps="275"/></proof>
    <proof prover="10"><result status="valid" time="0.26" steps="57527"/></proof>
    <proof prover="11"><result status="valid" time="0.10" steps="273561"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.3" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.12" steps="153"/></proof>
    <proof prover="10"><result status="valid" time="0.25" steps="57524"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="263057"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.4" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.42.0.4.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.06" steps="54"/></proof>
     <proof prover="10"><result status="valid" time="0.23" steps="54300"/></proof>
     <proof prover="11"><result status="valid" time="0.09" steps="262759"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.42.0.4.1" expl="loop invariant init" proved="true">
     <proof prover="9"><result status="valid" time="0.63" steps="570"/></proof>
     <proof prover="10"><result status="valid" time="0.31" steps="63729"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.5" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.32" steps="430"/></proof>
    <proof prover="10"><result status="valid" time="0.38" steps="71615"/></proof>
    <proof prover="11"><result status="valid" time="0.10" steps="281782"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.43" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="156"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="53464"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="247864"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.44" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.18" steps="373"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="57506"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.45" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="206"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="59078"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.46" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="200"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="59070"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="258644"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.47" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.54" steps="445"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="60448"/></proof>
  <proof prover="11"><result status="valid" time="0.12" steps="333425"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.48" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="69"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="54962"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="250641"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.49" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="71"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="55472"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.50" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="78"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="56616"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="264011"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.51" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="74"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="46628"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="15322"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.52" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="293"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="55427"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.53" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="189"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="55408"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.54" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="192"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="57179"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="294171"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.55" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="200"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="57395"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="302437"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.56" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="339"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="64215"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.57" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="57456"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="282317"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.58" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="218"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="57761"/></proof>
  <proof prover="11"><result status="valid" time="0.12" steps="319644"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.59" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="224"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="57912"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="305881"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.60" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.72" steps="1019"/></proof>
  <proof prover="10"><result status="valid" time="0.32" steps="68568"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.61" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.61.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant5">
    <goal name="euler_sieve&#39;vc.61.0.0" expl="assertion" proved="true">
    <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="(int63&#39;int p)">
     <goal name="euler_sieve&#39;vc.61.0.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="(int63&#39;int next)">
      <goal name="euler_sieve&#39;vc.61.0.0.0.0" expl="assertion" proved="true">
      <proof prover="10"><result status="valid" time="0.36" steps="83546"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.62" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.62.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="1.34" steps="1142"/></proof>
   <proof prover="10"><result status="valid" time="0.30" steps="65685"/></proof>
   <proof prover="11"><result status="valid" time="0.18" steps="533372"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.62.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="1.53" steps="1144"/></proof>
   <proof prover="10"><result status="valid" time="0.37" steps="78530"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.62.2" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="1.05" steps="978"/></proof>
   <proof prover="10"><result status="valid" time="0.29" steps="66181"/></proof>
   <proof prover="11"><result status="valid" time="0.11" steps="377994"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.63" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="104"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="51417"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="258032"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.64" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.13" steps="404129"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.65" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.33" steps="525"/></proof>
  <proof prover="10"><result status="valid" time="0.31" steps="68772"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.66" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="107"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="59602"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="312781"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.67" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="109"/></proof>
  <proof prover="10"><result status="valid" time="0.41" steps="80416"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.68" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="112"/></proof>
  <proof prover="10"><result status="valid" time="0.46" steps="87614"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.69" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.39" steps="410"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="66513"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.70" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant5">
   <goal name="euler_sieve&#39;vc.70.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.70.0.0" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.56" steps="417"/></proof>
    <proof prover="10"><result status="valid" time="2.21" steps="226002"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.70.0.1" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.54" steps="402"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="395220"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.71" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="111"/></proof>
  <proof prover="10"><result status="valid" time="0.34" steps="68977"/></proof>
  <proof prover="11"><result status="valid" time="0.12" steps="406810"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.72" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="49473"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="27903"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.73" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="49489"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="27912"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.74" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="110"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="52394"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="262550"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.75" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="111"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="49524"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="16567"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.76" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.76.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.76.0.0" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.76.0.0.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.10" steps="415"/></proof>
     <proof prover="10"><result status="valid" time="0.32" steps="69321"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.76.0.0.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.37" steps="416"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="67708"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.1" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.76.0.1.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.29" steps="409"/></proof>
     <proof prover="10"><result status="valid" time="0.32" steps="69345"/></proof>
     <proof prover="11"><result status="valid" time="0.22" steps="655579"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.76.0.1.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="0.94" steps="421"/></proof>
     <proof prover="10"><result status="valid" time="0.32" steps="69123"/></proof>
     <proof prover="11"><result status="valid" time="0.14" steps="451964"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="1.52" steps="1263"/></proof>
    <proof prover="10"><result status="valid" time="0.33" steps="68283"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.52" steps="390"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="69290"/></proof>
    <proof prover="11"><result status="valid" time="0.13" steps="410221"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.4" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="1.01" steps="416"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.5" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.76.0.5.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="8"><result status="valid" time="0.14"/></proof>
     <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,Refl,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,t&#39;invariant,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H39,H38,Ensures18,H37,H36,H35,Ensures17,Ensures16,Ensures15,Ensures14,Ensures13,H34,H33,Ensures12,Assert3,Assert2,Assert1,H30,H29,Ensures11,H28,H27,H26,H25,H24,LoopInvariant9,LoopInvariant8,LoopInvariant6,LoopInvariant5,LoopInvariant4,LoopInvariant3,LoopInvariant2,Ensures10,Ensures9,H23,Ensures8,Ensures7,H22,Ensures6,H17,Ensures5,Ensures4,H16,Ensures3,Ensures2,Assert,Ensures,LoopInvariant1,LoopInvariant,H32,H31,H21,H20,H19,H18,H14,H13,H12,H11,H10,H9,H8,H7,H6,H4">
      <goal name="euler_sieve&#39;vc.76.0.5.0.0" expl="true case (loop invariant preservation)" proved="true">
      <proof prover="8"><result status="valid" time="0.02"/></proof>
      <proof prover="9"><result status="valid" time="0.02" steps="61"/></proof>
      <proof prover="10"><result status="valid" time="0.04" steps="6334"/></proof>
      <proof prover="11"><result status="valid" time="0.02" steps="30624"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="euler_sieve&#39;vc.76.0.5.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.22" steps="1177"/></proof>
     <proof prover="10"><result status="valid" time="0.39" steps="72750"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.77" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.46" steps="86871"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.78" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.44" steps="84998"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.79" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.29" steps="697"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="70690"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.80" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="1.10" steps="980"/></proof>
  <proof prover="10"><result status="valid" time="0.31" steps="70248"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.81" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.81.0" expl="loop invariant preservation" proved="true">
   <proof prover="9"><result status="valid" time="1.46" steps="952"/></proof>
   <proof prover="10"><result status="valid" time="0.34" steps="72166"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.82" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="90"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="49699"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="266756"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.83" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="56041"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="270227"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.84" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="57464"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="284858"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.85" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="226"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="57810"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="300815"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.86" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="101"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.87" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="98"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="58011"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="286375"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.88" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.15" steps="389"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="59529"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="316357"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.89" expl="loop variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.38" steps="77768"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="329138"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.90" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.32" steps="380"/></proof>
  <proof prover="10"><result status="valid" time="0.35" steps="74722"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="320548"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.91" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.38" steps="395"/></proof>
  <proof prover="10"><result status="valid" time="0.40" steps="79559"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="324194"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.92" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="348"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="59825"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="308680"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.93" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="112"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="59082"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="311264"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.94" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.94.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.94.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="1.98" steps="892"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="68493"/></proof>
    <proof prover="11"><result status="valid" time="0.13" steps="430755"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="10"><result status="valid" time="0.32" steps="68512"/></proof>
    <proof prover="11"><result status="valid" time="0.13" steps="431699"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.52" steps="761"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="68286"/></proof>
    <proof prover="11"><result status="valid" time="0.11" steps="355464"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.41" steps="492"/></proof>
    <proof prover="10"><result status="valid" time="0.33" steps="68289"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="353897"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.4" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.94.0.4.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.94.0.4.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.94.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="0.41" steps="79723"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.94.0.4.0.0.1" expl="loop invariant preservation" proved="true">
       <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
        <goal name="euler_sieve&#39;vc.94.0.4.0.0.1.0" expl="loop invariant preservation" proved="true">
        <transf name="assert" proved="true" arg1="(cnt1 &lt;= i &lt; length t_arr1)">
         <goal name="euler_sieve&#39;vc.94.0.4.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.12" steps="101"/></proof>
         <proof prover="10"><result status="valid" time="0.24" steps="58492"/></proof>
         <proof prover="11"><result status="valid" time="0.12" steps="367596"/></proof>
         </goal>
         <goal name="euler_sieve&#39;vc.94.0.4.0.0.1.0.1" expl="loop invariant preservation" proved="true">
         <proof prover="8"><result status="valid" time="2.83"/></proof>
         <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Div_mod,Div_unique,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,empty&#39;def,set&#39;def,([&lt;-])&#39;def,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H33,H32,Ensures18,H31,H30,H29,Ensures17,Ensures16,Ensures15,Ensures14,Ensures13,H28,H27,Assert2,Assert1,H24,H23,Ensures10,H22,H21,H20,H19,H18,LoopInvariant15,LoopInvariant14,LoopInvariant7,LoopInvariant6,LoopInvariant3,LoopInvariant2,Ensures9,Ensures8,H17,Ensures7,Ensures6,H16,Ensures5,H11,Ensures4,Ensures3,H10,H9,Ensures2,Ensures1,Ensures,H8,LoopInvariant1,LoopInvariant,H26,H25,H15,H14,H13,H12,H7,H6,H5,H4,H2,(==)&#39;spec3,(==)&#39;spec2,(==)&#39;spec1,(==)&#39;spec,create&#39;spec1,create&#39;spec,set&#39;spec2,set&#39;spec1,set&#39;spec,singleton&#39;spec1,singleton&#39;spec,cons&#39;spec2,cons&#39;spec1,cons&#39;spec,snoc&#39;spec2,snoc&#39;spec1,snoc&#39;spec,([..])&#39;spec1,([..])&#39;spec,(++)&#39;spec2,(++)&#39;spec1,(++)&#39;spec,Abs_le2,Abs_le1,Abs_le,Div_bound3,Div_bound2,Mod_bound3,Mod_bound2,array63&#39;invariant3,array63&#39;invariant2,array63&#39;invariant1,array63&#39;invariant,Mod_bound1,Mod_bound,Div_bound1,Div_bound,divides&#39;spec1,divides&#39;spec,even_mod21,even_mod2,even_divides1,even_divides,odd_divides1,odd_divides,div_mult_11,div_mult_1,mult_borne_sous_exp1,mult_borne_sous_exp,t&#39;invariant22,t&#39;invariant21,t&#39;invariant20,t&#39;invariant19,t&#39;invariant18,t&#39;invariant17,t&#39;invariant16,t&#39;invariant15,t&#39;invariant14,t&#39;invariant13,t&#39;invariant12,t&#39;invariant11,t&#39;invariant10,t&#39;invariant9,t&#39;invariant8,t&#39;invariant7,t&#39;invariant6,t&#39;invariant5,t&#39;invariant4,t&#39;invariant3,t&#39;invariant2,t&#39;invariant1,t&#39;invariant,Ensures12,Ensures11,Assert4,Assert3,LoopInvariant13,LoopInvariant11,LoopInvariant10,LoopInvariant9,LoopInvariant8,LoopInvariant5,LoopInvariant4,h1">
          <goal name="euler_sieve&#39;vc.94.0.4.0.0.1.0.1.0" expl="loop invariant preservation" proved="true">
          <proof prover="8"><result status="valid" time="0.01"/></proof>
          <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
          <proof prover="10"><result status="valid" time="0.04" steps="6028"/></proof>
          <proof prover="11"><result status="valid" time="0.02" steps="25799"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.5" expl="loop invariant preservation" proved="true">
    <proof prover="11"><result status="valid" time="0.18" steps="510034"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.95" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.95.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.95.0.0" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(j = cnt1)">
     <goal name="euler_sieve&#39;vc.95.0.0.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="8"><result status="valid" time="2.90"/></proof>
     <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H32,H31,Ensures17,H30,H29,H28,Ensures16,Ensures15,Ensures14,Ensures13,Ensures12,H27,H26,Ensures11,Assert3,Assert2,Assert1,H23,H22,H20,H19,H18,H17,LoopInvariant10,LoopInvariant9,LoopInvariant8,LoopInvariant7,LoopInvariant5,LoopInvariant4,LoopInvariant3,Ensures9,Ensures8,H16,Ensures7,Ensures6,H15,Ensures5,H10,H9,H8,Ensures1,Ensures,H7,Assert,LoopInvariant2,LoopInvariant1,LoopInvariant,H25,H24,H14,H13,H12,H11,H6,H4">
      <goal name="euler_sieve&#39;vc.95.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
      <proof prover="8"><result status="valid" time="0.10"/></proof>
      <proof prover="9"><result status="valid" time="0.08" steps="158"/></proof>
      <proof prover="11"><result status="valid" time="0.02" steps="46458"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="euler_sieve&#39;vc.95.0.0.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.37" steps="1234"/></proof>
     <proof prover="10"><result status="valid" time="0.33" steps="71464"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.96" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.96.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.96.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.96.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.96.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant1">
       <goal name="euler_sieve&#39;vc.96.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="split_premise_right" proved="true" >
        <goal name="euler_sieve&#39;vc.96.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
        <transf name="instantiate" proved="true" arg1="LoopInvariant6" arg2="(int63&#39;int p1)">
         <goal name="euler_sieve&#39;vc.96.0.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
         <proof prover="10"><result status="valid" time="0.62" steps="104133"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.97" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="764"/></proof>
  <proof prover="10"><result status="valid" time="0.34" steps="70557"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.98" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.98.0" expl="loop invariant preservation" proved="true">
   <proof prover="9"><result status="valid" time="1.65" steps="1365"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.99" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.99.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.99.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="0.74" steps="841"/></proof>
    <proof prover="10"><result status="valid" time="0.33" steps="72150"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.99.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.99.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="10"><result status="valid" time="0.49" steps="90290"/></proof>
    <proof prover="11"><result status="valid" time="0.30" steps="788524"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.99.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="8"><result status="valid" time="2.02"/></proof>
    <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H24,H23,H22,Ensures17,H21,H20,H19,Ensures16,Ensures15,Ensures14,Ensures13,Ensures12,H18,H17,H16,Assert4,Assert3,Assert2,H15,Ensures10,H12,H11,H10,LoopInvariant16,LoopInvariant15,LoopInvariant13,LoopInvariant12,LoopInvariant11,LoopInvariant10,LoopInvariant9,Ensures9,Ensures8,H8,Ensures5,H6,Ensures4,Ensures3,H5,H4,Ensures2,Ensures1,Ensures,Assert,LoopInvariant8,LoopInvariant7,LoopInvariant6,LoopInvariant5,LoopInvariant4,LoopInvariant3,LoopInvariant2,LoopInvariant1,LoopInvariant,H2">
     <goal name="euler_sieve&#39;vc.99.1.1.0" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="0.18" steps="183"/></proof>
     </goal>
    </transf>
    <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H24,H23,H22,Ensures17,H21,H20,H19,Ensures16,Ensures15,Ensures14,Ensures13,Ensures12,H18,H17,H16,Ensures11,Assert4,Assert3,Assert2,H15,Ensures10,H12,H11,H10,LoopInvariant16,LoopInvariant15,LoopInvariant13,LoopInvariant12,LoopInvariant11,LoopInvariant10,LoopInvariant9,Ensures9,Ensures8,H8,Ensures4,Ensures3,H5,H4,Ensures2,Ensures1,Ensures,LoopInvariant8,LoopInvariant6,LoopInvariant5,LoopInvariant4,LoopInvariant3,LoopInvariant2,LoopInvariant,H2">
     <goal name="euler_sieve&#39;vc.99.1.1.0" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="8" timelimit="1"><result status="valid" time="0.05"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.100" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="84"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="49616"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="253999"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.101" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="86"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="55862"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="256936"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.102" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="88"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="57269"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="284572"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.103" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="215"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="57636"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="291771"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.104" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="91"/></proof>
  <proof prover="10"><result status="valid" time="0.31" steps="64615"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.105" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="57747"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="271926"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.106" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="57775"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="282246"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.107" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="374"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="58782"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="302168"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.108" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="97"/></proof>
  <proof prover="10"><result status="valid" time="0.28" steps="61311"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="294825"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.109" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="90"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="51244"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="250152"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.110" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="98"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="58038"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="295966"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.111" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="103"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="58260"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="303434"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.112" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="105"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="58611"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="308319"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.113" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.113.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.113.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="2.77" steps="1381"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="69962"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="417335"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="10"><result status="valid" time="0.31" steps="69075"/></proof>
    <proof prover="11"><result status="valid" time="0.13" steps="417847"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.73" steps="1013"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="69811"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="348734"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.35" steps="375"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="69046"/></proof>
    <proof prover="11"><result status="valid" time="0.11" steps="347229"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.4" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.113.0.4.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.113.0.4.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.113.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="0.42" steps="79852"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.113.0.4.0.0.1" expl="loop invariant preservation" proved="true">
       <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
        <goal name="euler_sieve&#39;vc.113.0.4.0.0.1.0" expl="loop invariant preservation" proved="true">
        <transf name="assert" proved="true" arg1="(cnt1 &lt;= i &lt; length t_arr1)">
         <goal name="euler_sieve&#39;vc.113.0.4.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.12" steps="94"/></proof>
         <proof prover="10"><result status="valid" time="0.23" steps="58414"/></proof>
         <proof prover="11"><result status="valid" time="0.13" steps="359595"/></proof>
         </goal>
         <goal name="euler_sieve&#39;vc.113.0.4.0.0.1.0.1" expl="loop invariant preservation" proved="true">
         <proof prover="8"><result status="valid" time="1.38"/></proof>
         <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Div_mod,Div_unique,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,empty&#39;def,set&#39;def,([&lt;-])&#39;def,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H27,H26,Ensures18,H25,H24,H23,Ensures17,Ensures16,Ensures15,Ensures14,Ensures13,H22,H21,Assert2,Assert1,H18,H17,Ensures10,H16,H15,H14,H13,H12,LoopInvariant15,LoopInvariant14,LoopInvariant7,LoopInvariant6,LoopInvariant3,LoopInvariant2,Ensures9,Ensures8,H11,Ensures7,Ensures6,H10,Ensures5,Ensures4,H9,H8,Ensures3,Ensures2,Ensures1,Ensures,LoopInvariant1,LoopInvariant,H20,H19,H7,H6,H5,H4,H2,(==)&#39;spec3,(==)&#39;spec2,(==)&#39;spec1,(==)&#39;spec,create&#39;spec1,create&#39;spec,set&#39;spec2,set&#39;spec1,set&#39;spec,singleton&#39;spec1,singleton&#39;spec,cons&#39;spec2,cons&#39;spec1,cons&#39;spec,snoc&#39;spec2,snoc&#39;spec1,snoc&#39;spec,([..])&#39;spec1,([..])&#39;spec,(++)&#39;spec2,(++)&#39;spec1,(++)&#39;spec,Abs_le2,Abs_le1,Abs_le,Div_bound3,Div_bound2,Mod_bound3,Mod_bound2,array63&#39;invariant3,array63&#39;invariant2,array63&#39;invariant1,array63&#39;invariant,Mod_bound1,Mod_bound,Div_bound1,Div_bound,divides&#39;spec1,divides&#39;spec,even_mod21,even_mod2,even_divides1,even_divides,odd_divides1,odd_divides,div_mult_11,div_mult_1,mult_borne_sous_exp1,mult_borne_sous_exp,t&#39;invariant22,t&#39;invariant21,t&#39;invariant20,t&#39;invariant19,t&#39;invariant18,t&#39;invariant17,t&#39;invariant16,t&#39;invariant15,t&#39;invariant14,t&#39;invariant13,t&#39;invariant12,t&#39;invariant11,t&#39;invariant10,t&#39;invariant9,t&#39;invariant8,t&#39;invariant7,t&#39;invariant6,t&#39;invariant5,t&#39;invariant4,t&#39;invariant3,t&#39;invariant2,t&#39;invariant1,t&#39;invariant,Ensures12,Ensures11,Assert4,Assert3,LoopInvariant13,LoopInvariant11,LoopInvariant10,LoopInvariant9,LoopInvariant8,LoopInvariant5,LoopInvariant4,h1">
          <goal name="euler_sieve&#39;vc.113.0.4.0.0.1.0.1.0" expl="loop invariant preservation" proved="true">
          <proof prover="8"><result status="valid" time="0.01"/></proof>
          <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
          <proof prover="10"><result status="valid" time="0.04" steps="6027"/></proof>
          <proof prover="11"><result status="valid" time="0.02" steps="25799"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.5" expl="loop invariant preservation" proved="true">
    <proof prover="11"><result status="valid" time="0.14" steps="468981"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.114" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.114.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.114.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="ordered" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.114.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.114.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="j">
       <goal name="euler_sieve&#39;vc.114.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="case" proved="true" arg1="(j = cnt1)">
        <goal name="euler_sieve&#39;vc.114.0.0.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
        <proof prover="9"><result status="valid" time="1.17" steps="1368"/></proof>
        <proof prover="10"><result status="valid" time="0.31" steps="70087"/></proof>
        </goal>
        <goal name="euler_sieve&#39;vc.114.0.0.0.0.0.1" expl="false case (loop invariant preservation)" proved="true">
        <proof prover="9"><result status="valid" time="0.29" steps="592"/></proof>
        <proof prover="10"><result status="valid" time="0.27" steps="61248"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.115" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.115.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.115.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.115.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.115.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="case" proved="true" arg1="(i &lt; cnt1)">
       <goal name="euler_sieve&#39;vc.115.0.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
       <proof prover="9"><result status="valid" time="0.17" steps="374"/></proof>
       <proof prover="10"><result status="valid" time="0.27" steps="60305"/></proof>
       <proof prover="11"><result status="valid" time="0.16" steps="463387"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.115.0.0.0.0.1" expl="false case (loop invariant preservation)" proved="true">
       <proof prover="9"><result status="valid" time="1.33" steps="1203"/></proof>
       <proof prover="10"><result status="valid" time="0.31" steps="71520"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.116" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="535"/></proof>
  <proof prover="10"><result status="valid" time="0.34" steps="71403"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.117" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; cnt1)">
   <goal name="euler_sieve&#39;vc.117.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="9"><result status="valid" time="1.00" steps="1076"/></proof>
   <proof prover="10"><result status="valid" time="0.33" steps="71376"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.117.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="9"><result status="valid" time="1.13" steps="1282"/></proof>
   <proof prover="10"><result status="valid" time="0.37" steps="77237"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.118" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.118.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.118.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="0.62" steps="838"/></proof>
    <proof prover="10"><result status="valid" time="0.33" steps="73318"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.118.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.118.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="10"><result status="valid" time="0.52" steps="98630"/></proof>
    <proof prover="11"><result status="valid" time="0.30" steps="721990"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.118.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="5.35" steps="1445"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.119" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="75"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="56756"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="257935"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.120" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.20" steps="282"/></proof>
  <proof prover="10"><result status="valid" time="0.74" steps="127066"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.121" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.22" steps="824"/></proof>
  <proof prover="10"><result status="valid" time="1.14" steps="143063"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.122" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="310"/></proof>
  <proof prover="10"><result status="valid" time="0.29" steps="67507"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.123" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.41" steps="85054"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.124" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="221"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.125" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.18" steps="258"/></proof>
  <proof prover="10"><result status="valid" time="2.22" steps="320031"/></proof>
  <proof prover="11"><result status="valid" time="0.12" steps="336649"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.126" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.72" steps="297"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="51446"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.127" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="36"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="50221"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="218118"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.128" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="48834"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="217812"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.129" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="41"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="43149"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13869"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.130" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="186"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="51456"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.131" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="43"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="43213"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13914"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.132" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.132.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.132.0.0" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.132.0.0.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.04" steps="44"/></proof>
     <proof prover="10"><result status="valid" time="0.21" steps="51014"/></proof>
     <proof prover="11"><result status="valid" time="0.08" steps="240318"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.132.0.0.1" expl="loop invariant init" proved="true">
     <proof prover="9"><result status="valid" time="0.33" steps="143"/></proof>
     <proof prover="10"><result status="valid" time="0.24" steps="54116"/></proof>
     <proof prover="11"><result status="valid" time="0.08" steps="247795"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.1" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.37" steps="263"/></proof>
    <proof prover="10"><result status="valid" time="0.24" steps="53988"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="253659"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.2" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.13" steps="199"/></proof>
    <proof prover="10"><result status="valid" time="0.24" steps="53782"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="242096"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.3" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.08" steps="121"/></proof>
    <proof prover="10"><result status="valid" time="0.25" steps="53779"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="241143"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.4" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.132.0.4.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.06" steps="48"/></proof>
     <proof prover="10"><result status="valid" time="0.22" steps="51360"/></proof>
     <proof prover="11"><result status="valid" time="0.09" steps="247556"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.132.0.4.1" expl="loop invariant init" proved="true">
     <proof prover="9"><result status="valid" time="0.84" steps="830"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="59857"/></proof>
     <proof prover="11"><result status="valid" time="0.12" steps="338837"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.5" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.17" steps="254"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="66335"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="254940"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.133" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="116"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="50390"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="232835"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.134" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="305"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="53653"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="238015"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.135" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="164"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="54927"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="250725"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.136" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="297"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="54944"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="240473"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.137" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.37" steps="577"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="56213"/></proof>
  <proof prover="11"><result status="valid" time="0.12" steps="302964"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.138" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="57"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="51850"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="235891"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.139" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="59"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="51948"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="236497"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.140" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="66"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="53489"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="249338"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.141" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="44879"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14574"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.142" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="240"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="52278"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.143" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="162"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="52289"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.144" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="165"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="54035"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="276281"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.145" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="173"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="54246"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="284303"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.146" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="277"/></proof>
  <proof prover="10"><result status="valid" time="0.28" steps="59602"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="303201"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.147" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="82"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="54316"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="270842"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.148" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="191"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="54607"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="300483"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.149" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="197"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="54758"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="291849"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.150" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.62" steps="995"/></proof>
  <proof prover="10"><result status="valid" time="0.32" steps="63730"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.151" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.151.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant5">
    <goal name="euler_sieve&#39;vc.151.0.0" expl="assertion" proved="true">
    <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="(int63&#39;int p)">
     <goal name="euler_sieve&#39;vc.151.0.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="(int63&#39;int next)">
      <goal name="euler_sieve&#39;vc.151.0.0.0.0" expl="assertion" proved="true">
      <proof prover="10"><result status="valid" time="0.33" steps="76286"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.152" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.152.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.62" steps="838"/></proof>
   <proof prover="10"><result status="valid" time="0.28" steps="61260"/></proof>
   <proof prover="11"><result status="valid" time="0.18" steps="527187"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.152.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="1.06" steps="1148"/></proof>
   <proof prover="10"><result status="valid" time="0.36" steps="73093"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.152.2" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.29" steps="321"/></proof>
   <proof prover="10"><result status="valid" time="0.28" steps="60520"/></proof>
   <proof prover="11"><result status="valid" time="0.12" steps="357703"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.153" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="49615"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="246603"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.154" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="3.30" steps="327313"/></proof>
  <proof prover="11"><result status="valid" time="0.14" steps="401407"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.155" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.03" steps="422"/></proof>
  <proof prover="10"><result status="valid" time="0.39" steps="75521"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.156" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="95"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="56451"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="302134"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.157" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="97"/></proof>
  <proof prover="10"><result status="valid" time="0.36" steps="74241"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.158" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.13" steps="100"/></proof>
  <proof prover="10"><result status="valid" time="0.42" steps="80688"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.159" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.33" steps="357"/></proof>
  <proof prover="10"><result status="valid" time="0.29" steps="61815"/></proof>
  <proof prover="11"><result status="valid" time="0.19" steps="541349"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.160" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.56" steps="745"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.161" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="99"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="65505"/></proof>
  <proof prover="11"><result status="valid" time="0.13" steps="370334"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.162" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="96"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="47724"/></proof>
  <proof prover="11"><result status="valid" time="0.03" steps="26807"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.163" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="96"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="47740"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="26816"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.164" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="98"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="50577"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="251096"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.165" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="99"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="47775"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="15819"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.166" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.166.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.166.0.0" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.166.0.0.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.14" steps="369"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="64449"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.166.0.0.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.27" steps="368"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="63752"/></proof>
     <proof prover="11"><result status="valid" time="0.51" steps="1142469"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.1" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.166.0.1.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="0.65" steps="364"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="64469"/></proof>
     <proof prover="11"><result status="valid" time="0.20" steps="564087"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.166.0.1.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="0.63" steps="375"/></proof>
     <proof prover="10"><result status="valid" time="0.28" steps="63907"/></proof>
     <proof prover="11"><result status="valid" time="0.12" steps="384224"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="1.24" steps="1154"/></proof>
    <proof prover="10"><result status="valid" time="0.28" steps="64767"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.40" steps="341"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="65022"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="363301"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.4" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="1.12" steps="369"/></proof>
    <proof prover="10"><result status="valid" time="0.38" steps="70041"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.5" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.166.0.5.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9" timelimit="20"><result status="valid" time="7.35" steps="4955"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.166.0.5.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.18" steps="1288"/></proof>
     <proof prover="10"><result status="valid" time="0.32" steps="66155"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.167" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.34" steps="68951"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.168" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="1.82" steps="2022"/></proof>
  <proof prover="10"><result status="valid" time="0.41" steps="78102"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.169" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="578"/></proof>
  <proof prover="10"><result status="valid" time="0.33" steps="66275"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.170" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="1.26" steps="830"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="66171"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.171" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="1.16" steps="148474"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.172" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="78"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="47882"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="255401"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.173" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="80"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="52940"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="258961"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.174" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="82"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="54329"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="273352"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.175" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="199"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="54656"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="286303"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.176" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="89"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.177" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="86"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="54857"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="275191"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.178" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.24" steps="372"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="55277"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="303082"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.179" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.41" steps="723"/></proof>
  <proof prover="10"><result status="valid" time="0.34" steps="70101"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="308362"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.180" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="318"/></proof>
  <proof prover="10"><result status="valid" time="0.32" steps="68887"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="300601"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.181" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.27" steps="318"/></proof>
  <proof prover="10"><result status="valid" time="0.36" steps="72286"/></proof>
  <proof prover="11"><result status="valid" time="0.11" steps="309595"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.182" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="308"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="55474"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="294453"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.183" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="100"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="55912"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="296943"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.184" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.184.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.184.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="2.18" steps="1047"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="64981"/></proof>
    <proof prover="11"><result status="valid" time="0.14" steps="375794"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="3.49" steps="1880"/></proof>
    <proof prover="10"><result status="valid" time="0.29" steps="64159"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="376733"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.44" steps="664"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="64875"/></proof>
    <proof prover="11"><result status="valid" time="0.11" steps="318160"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.34" steps="435"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="63908"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="316874"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.4" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.184.0.4.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.184.0.4.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.184.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="0.36" steps="74233"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.184.0.4.0.0.1" expl="loop invariant preservation" proved="true">
       <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
        <goal name="euler_sieve&#39;vc.184.0.4.0.0.1.0" expl="loop invariant preservation" proved="true">
        <transf name="assert" proved="true" arg1="(cnt1 &lt;= i &lt; length t_arr1)">
         <goal name="euler_sieve&#39;vc.184.0.4.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.11" steps="95"/></proof>
         <proof prover="10"><result status="valid" time="0.23" steps="56576"/></proof>
         <proof prover="11"><result status="valid" time="0.12" steps="352352"/></proof>
         </goal>
         <goal name="euler_sieve&#39;vc.184.0.4.0.0.1.0.1" expl="loop invariant preservation" proved="true">
         <proof prover="9"><result status="valid" time="4.92" steps="3181"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.5" expl="loop invariant preservation" proved="true">
    <proof prover="11"><result status="valid" time="0.16" steps="451102"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.185" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.185.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="euler_sieve&#39;vc.185.0.0" expl="loop invariant preservation" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="euler_sieve&#39;vc.185.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="case" proved="true" arg1="(j = cnt1)">
      <goal name="euler_sieve&#39;vc.185.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
      <proof prover="10"><result status="valid" time="0.26" steps="71550"/></proof>
      </goal>
      <goal name="euler_sieve&#39;vc.185.0.0.0.1" expl="false case (loop invariant preservation)" proved="true">
      <proof prover="9"><result status="valid" time="0.22" steps="473"/></proof>
      <proof prover="10"><result status="valid" time="0.41" steps="73307"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.186" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.186.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.186.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.186.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.186.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant1">
       <goal name="euler_sieve&#39;vc.186.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="split_premise_right" proved="true" >
        <goal name="euler_sieve&#39;vc.186.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
        <transf name="instantiate" proved="true" arg1="LoopInvariant6" arg2="(int63&#39;int p1)">
         <goal name="euler_sieve&#39;vc.186.0.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
         <proof prover="10"><result status="valid" time="0.66" steps="95923"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.187" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.20" steps="663"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="65914"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.188" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.188.0" expl="loop invariant preservation" proved="true">
   <proof prover="9"><result status="valid" time="1.72" steps="1727"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.189" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.189.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.189.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="0.53" steps="752"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="66430"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.189.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.189.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="10"><result status="valid" time="0.33" steps="67519"/></proof>
    <proof prover="11"><result status="valid" time="0.29" steps="744747"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.189.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="2.08" steps="1184"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.190" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="72"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="47799"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="242391"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.191" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="74"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="52769"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="245616"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.192" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="76"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="54132"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="271431"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.193" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="188"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="54482"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="278158"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.194" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="79"/></proof>
  <proof prover="10"><result status="valid" time="0.28" steps="60762"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.195" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="80"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="54595"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="260667"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.196" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="82"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="54632"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="261638"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.197" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.16" steps="331"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="55023"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="291634"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.198" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="85"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="58033"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="280903"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.199" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="78"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="49427"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="239084"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.200" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="86"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="54893"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="282256"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.201" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="91"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="55143"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="280283"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.202" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="93"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="55438"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="283920"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.203" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.203.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.203.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="10"><result status="valid" time="0.30" steps="65925"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="353996"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="1.23" steps="986"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="65015"/></proof>
    <proof prover="11"><result status="valid" time="0.12" steps="354872"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.52" steps="897"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="65820"/></proof>
    <proof prover="11"><result status="valid" time="0.10" steps="306768"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.28" steps="330"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="64974"/></proof>
    <proof prover="11"><result status="valid" time="0.11" steps="305551"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.4" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.203.0.4.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.203.0.4.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.203.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="0.37" steps="74500"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.203.0.4.0.0.1" expl="loop invariant preservation" proved="true">
       <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
        <goal name="euler_sieve&#39;vc.203.0.4.0.0.1.0" expl="loop invariant preservation" proved="true">
        <transf name="assert" proved="true" arg1="(cnt1 &lt;= i &lt; length t_arr1)">
         <goal name="euler_sieve&#39;vc.203.0.4.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.10" steps="88"/></proof>
         <proof prover="10"><result status="valid" time="0.23" steps="56498"/></proof>
         <proof prover="11"><result status="valid" time="0.12" steps="344437"/></proof>
         </goal>
         <goal name="euler_sieve&#39;vc.203.0.4.0.0.1.0.1" expl="loop invariant preservation" proved="true">
         <proof prover="8"><result status="valid" time="1.95"/></proof>
         <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Div_mod,Div_unique,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,empty&#39;def,set&#39;def,([&lt;-])&#39;def,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H24,H23,Ensures16,Ensures15,Ensures14,Ensures13,H22,H21,Assert2,Assert1,H18,H17,Ensures10,H16,H15,H14,H13,H12,LoopInvariant15,LoopInvariant14,LoopInvariant7,LoopInvariant6,LoopInvariant3,LoopInvariant2,Ensures9,Ensures8,H11,Ensures7,Ensures6,H10,Ensures5,Ensures4,H9,H8,Ensures3,Ensures2,Ensures1,Ensures,LoopInvariant1,LoopInvariant,H20,H19,H7,H6,H5,H4,H2,(==)&#39;spec3,(==)&#39;spec2,(==)&#39;spec1,(==)&#39;spec,create&#39;spec1,create&#39;spec,set&#39;spec2,set&#39;spec1,set&#39;spec,singleton&#39;spec1,singleton&#39;spec,cons&#39;spec2,cons&#39;spec1,cons&#39;spec,snoc&#39;spec2,snoc&#39;spec1,snoc&#39;spec,([..])&#39;spec1,([..])&#39;spec,(++)&#39;spec2,(++)&#39;spec1,(++)&#39;spec,Abs_le2,Abs_le1,Abs_le,Div_bound3,Div_bound2,Mod_bound3,Mod_bound2,array63&#39;invariant3,array63&#39;invariant2,array63&#39;invariant1,array63&#39;invariant,Mod_bound1,Mod_bound,Div_bound1,Div_bound,divides&#39;spec1,divides&#39;spec,even_mod21,even_mod2,even_divides1,even_divides,odd_divides1,odd_divides,div_mult_11,div_mult_1,mult_borne_sous_exp1,mult_borne_sous_exp,t&#39;invariant22,t&#39;invariant21,t&#39;invariant20,t&#39;invariant19,t&#39;invariant18,t&#39;invariant17,t&#39;invariant16,t&#39;invariant15,t&#39;invariant14,t&#39;invariant13,t&#39;invariant12,t&#39;invariant11,t&#39;invariant10,t&#39;invariant9,t&#39;invariant8,t&#39;invariant7,t&#39;invariant6,t&#39;invariant5,t&#39;invariant4,t&#39;invariant3,t&#39;invariant2,t&#39;invariant1,t&#39;invariant,Ensures12,Ensures11,Assert4,Assert3,LoopInvariant13,LoopInvariant11,LoopInvariant10,LoopInvariant9,LoopInvariant8,LoopInvariant5,LoopInvariant4,h1">
          <goal name="euler_sieve&#39;vc.203.0.4.0.0.1.0.1.0" expl="loop invariant preservation" proved="true">
          <proof prover="8"><result status="valid" time="0.01"/></proof>
          <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
          <proof prover="10"><result status="valid" time="0.03" steps="6014"/></proof>
          <proof prover="11"><result status="valid" time="0.02" steps="25726"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.5" expl="loop invariant preservation" proved="true">
    <proof prover="11"><result status="valid" time="0.14" steps="398036"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.204" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.204.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.204.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="ordered" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.204.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.204.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="j">
       <goal name="euler_sieve&#39;vc.204.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="case" proved="true" arg1="(j = cnt1)">
        <goal name="euler_sieve&#39;vc.204.0.0.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
        <proof prover="9"><result status="valid" time="1.88" steps="1983"/></proof>
        <proof prover="10"><result status="valid" time="0.28" steps="65881"/></proof>
        </goal>
        <goal name="euler_sieve&#39;vc.204.0.0.0.0.0.1" expl="false case (loop invariant preservation)" proved="true">
        <proof prover="9"><result status="valid" time="0.14" steps="349"/></proof>
        <proof prover="10"><result status="valid" time="0.26" steps="57651"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.205" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.205.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.205.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.205.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.205.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="case" proved="true" arg1="(i &lt; cnt1)">
       <goal name="euler_sieve&#39;vc.205.0.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
       <proof prover="9"><result status="valid" time="0.13" steps="414"/></proof>
       <proof prover="10"><result status="valid" time="0.26" steps="57047"/></proof>
       <proof prover="11"><result status="valid" time="0.14" steps="400216"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.205.0.0.0.0.1" expl="false case (loop invariant preservation)" proved="true">
       <proof prover="9"><result status="valid" time="0.71" steps="1036"/></proof>
       <proof prover="10"><result status="valid" time="0.30" steps="66185"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.206" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.18" steps="461"/></proof>
  <proof prover="10"><result status="valid" time="0.32" steps="66733"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.207" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="2.48" steps="2302"/></proof>
  <proof prover="10"><result status="valid" time="0.50" steps="99025"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.208" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.208.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.208.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="0.99" steps="1239"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="68581"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.208.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.208.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="10"><result status="valid" time="0.46" steps="91151"/></proof>
    <proof prover="11"><result status="valid" time="0.27" steps="681744"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.208.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="2.88" steps="1395"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.209" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="63"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="53638"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="245318"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.210" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.21" steps="401"/></proof>
  <proof prover="10"><result status="valid" time="0.68" steps="116029"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.211" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.13" steps="1346"/></proof>
  <proof prover="10"><result status="valid" time="0.88" steps="124943"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.212" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="261"/></proof>
  <proof prover="10"><result status="valid" time="0.28" steps="63173"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.213" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.72" steps="124398"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
