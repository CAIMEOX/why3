<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.0.0" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="3.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.7.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="3" name="Vampire" version="4.2.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="4" name="Eprover" version="2.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="5" name="CVC4" version="1.7" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="6" name="Alt-Ergo" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="7" name="Z3" version="4.12.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="8" name="CVC3" version="2.4.1" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="9" name="Alt-Ergo" version="2.3.3" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="10" name="CVC4" version="1.8" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="11" name="Z3" version="4.8.10" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="12" name="CVC5" version="1.0.4" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="13" name="Alt-Ergo" version="2.4.2" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="14" name="CVC5" version="1.0.0" timelimit="5" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="euler_sieve.mlw"/>
<theory name="ArithmeticResults" proved="true">
 <goal name="mult_croissance_locale&#39;vc" expl="VC for mult_croissance_locale" proved="true">
 <proof prover="9"><result status="valid" time="0.00" steps="10"/></proof>
 </goal>
 <goal name="mult_croissance&#39;vc" expl="VC for mult_croissance" proved="true">
 <proof prover="9"><result status="valid" time="0.01" steps="16"/></proof>
 </goal>
 <goal name="comp_mult_2&#39;vc" expl="VC for comp_mult_2" proved="true">
 <proof prover="9"><result status="valid" time="0.01" steps="12"/></proof>
 </goal>
 <goal name="div_croissance_locale1&#39;vc" expl="VC for div_croissance_locale1" proved="true">
 <proof prover="10"><result status="valid" time="0.27" steps="49178"/></proof>
 </goal>
 <goal name="div_croissance1&#39;vc" expl="VC for div_croissance1" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
 </goal>
 <goal name="div_croissance_locale2&#39;vc" expl="VC for div_croissance_locale2" proved="true">
 <proof prover="10"><result status="valid" time="0.24" steps="56147"/></proof>
 </goal>
 <goal name="div_croissance2&#39;vc" expl="VC for div_croissance2" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="43"/></proof>
 </goal>
 <goal name="div_mult_1&#39;vc" expl="VC for div_mult_1" proved="true">
 <proof prover="10"><result status="valid" time="0.28" steps="61419"/></proof>
 </goal>
 <goal name="mult_borne_sous_exp&#39;vc" expl="VC for mult_borne_sous_exp" proved="true">
 <proof prover="9"><result status="valid" time="0.30" steps="387"/></proof>
 </goal>
 <goal name="sq_ineq&#39;vc" expl="VC for sq_ineq" proved="true">
 <proof prover="10"><result status="valid" time="0.18" steps="42238"/></proof>
 </goal>
</theory>
<theory name="DivisibilityResults" proved="true">
 <goal name="divides_div&#39;vc" expl="VC for divides_div" proved="true">
 <proof prover="9"><result status="valid" time="0.05" steps="77"/></proof>
 </goal>
 <goal name="divides_inf&#39;vc" expl="VC for divides_inf" proved="true">
 <proof prover="9"><result status="valid" time="0.04" steps="68"/></proof>
 </goal>
 <goal name="not_prime_divider_limits&#39;vc" expl="VC for not_prime_divider_limits" proved="true">
 <proof prover="9"><result status="valid" time="0.01" steps="46"/></proof>
 </goal>
 <goal name="no_prod_impl_no_divider&#39;vc" expl="VC for no_prod_impl_no_divider" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="no_prod_impl_no_divider&#39;vc.0" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(exists k:int. (2 &lt;= k /\ k &lt; n) /\ not k = i /\ divides k i)">
   <goal name="no_prod_impl_no_divider&#39;vc.0.0" expl="true case (postcondition)" proved="true">
   <transf name="destruct" proved="true" arg1="H">
    <goal name="no_prod_impl_no_divider&#39;vc.0.0.0" expl="true case (postcondition)" proved="true">
    <transf name="destruct" proved="true" arg1="H">
     <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0" expl="destruct premise" proved="true">
     <transf name="introduce_exists" proved="true" >
      <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0" expl="destruct premise" proved="true">
      <transf name="assert" proved="true" arg1="(exists l:int. l * k = i)">
       <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.0" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="0.02" steps="53"/></proof>
       </goal>
       <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1" expl="destruct premise" proved="true">
       <transf name="introduce_exists" proved="true" >
        <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0" expl="destruct premise" proved="true">
        <transf name="exists" proved="true" arg1="k">
         <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0" proved="true">
         <transf name="exists" proved="true" arg1="l">
          <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0" proved="true">
          <transf name="case" proved="true" arg1="(l = i)">
           <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0.0" expl="true case" proved="true">
           <transf name="assert" proved="true" arg1="(k = 1)">
            <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0.0.0" expl="asserted formula" proved="true">
            <proof prover="3"><result status="valid" time="0.08"/></proof>
            </goal>
            <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0.0.1" expl="true case" proved="true">
            <proof prover="9"><result status="valid" time="0.01" steps="24"/></proof>
            </goal>
           </transf>
           </goal>
           <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.0.0.1.0.0.0.1" expl="false case" proved="true">
           <proof prover="9"><result status="valid" time="1.82" steps="443"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="no_prod_impl_no_divider&#39;vc.0.0.0.1" expl="true case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.01" steps="12"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="no_prod_impl_no_divider&#39;vc.0.1" expl="false case (postcondition)" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="22"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="not_prime_impl_divisor_under_sqrt&#39;vc" expl="VC for not_prime_impl_divisor_under_sqrt" proved="true">
 <proof prover="9"><result status="valid" time="0.03" steps="162"/></proof>
 </goal>
</theory>
<theory name="EulerSieveSpec" proved="true">
 <goal name="conservation_all_eliminated_marked_on_marked_change&#39;vc" expl="VC for conservation_all_eliminated_marked_on_marked_change" proved="true">
 <proof prover="9"><result status="valid" time="0.06" steps="711"/></proof>
 </goal>
 <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc" expl="VC for conservation_all_eliminated_marked_on_nexts_change" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc.0" expl="VC for conservation_all_eliminated_marked_on_nexts_change" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc.0.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc.0.0.0" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="16"/></proof>
    </goal>
    <goal name="conservation_all_eliminated_marked_on_nexts_change&#39;vc.0.0.1" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="176"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="EulerSieve" proved="true">
 <goal name="multiples_of_marked_are_marked&#39;vc" expl="VC for multiples_of_marked_are_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="multiples_of_marked_are_marked&#39;vc.0" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="multiples_of_marked_are_marked&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="28"/></proof>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="28"/></proof>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.2" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="28"/></proof>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.3" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="0.01" steps="28"/></proof>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.4" expl="VC for multiples_of_marked_are_marked" proved="true">
   <transf name="inline_all" proved="true" >
    <goal name="multiples_of_marked_are_marked&#39;vc.0.4.0" expl="VC for multiples_of_marked_are_marked" proved="true">
    <proof prover="8"><result status="valid" time="0.04"/></proof>
    <transf name="remove" proved="true" arg1="Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,even_or_odd,even_not_odd,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,mod_divides_computer,divides_mod_computer,odd_divides,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,H13,H12,Requires,H11,H10,H9,H8,H7,H6,H5,H4,H3,H">
     <goal name="multiples_of_marked_are_marked&#39;vc.0.4.0.0" expl="VC for multiples_of_marked_are_marked" proved="true">
     <proof prover="8"><result status="valid" time="0.01"/></proof>
     <proof prover="10"><result status="valid" time="0.03" steps="5970"/></proof>
     <proof prover="11"><result status="valid" time="0.01" steps="10361"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.5" expl="VC for multiples_of_marked_are_marked" proved="true">
   <transf name="assert" proved="true" arg1="(k * (i * j) = i*j + (k-1)*(i*j))">
    <goal name="multiples_of_marked_are_marked&#39;vc.0.5.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="29"/></proof>
    </goal>
    <goal name="multiples_of_marked_are_marked&#39;vc.0.5.1" expl="VC for multiples_of_marked_are_marked" proved="true">
    <transf name="assert" proved="true" arg1="((k-1)*(i*j) &gt;= 0)">
     <goal name="multiples_of_marked_are_marked&#39;vc.0.5.1.0" expl="asserted formula" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
     </goal>
     <goal name="multiples_of_marked_are_marked&#39;vc.0.5.1.1" expl="VC for multiples_of_marked_are_marked" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="multiples_of_marked_are_marked&#39;vc.0.6" expl="VC for multiples_of_marked_are_marked" proved="true">
   <transf name="unfold" proved="true" arg1="previously_marked_multiples" arg2="in" arg3="Requires">
    <goal name="multiples_of_marked_are_marked&#39;vc.0.6.0" expl="VC for multiples_of_marked_are_marked" proved="true">
    <transf name="unfold" proved="true" arg1="all_multiples_marked" arg2="in" arg3="Requires">
     <goal name="multiples_of_marked_are_marked&#39;vc.0.6.0.0" expl="VC for multiples_of_marked_are_marked" proved="true">
     <proof prover="1"><result status="valid" time="0.04"/></proof>
     <transf name="remove" proved="true" arg1="zero,one,(-),even,([]),inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,Assoc1,Unit_def_r,Mul_distr_l,Refl,Trans,Div_unique,Div_bound,Div_minus1_left,Div_sign_pos,even_not_odd,odd_not_even,even_odd,odd_2k1,divides_left,divides_oppr_rev,divides_multl,divides_multr,divides_mod_euclidean,mod_divides_computer,prime_divisors,odd_prime,mult_croissance_locale,comp_mult_2,sq_ineq,divides_div,no_prod_impl_no_divider,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change">
      <goal name="multiples_of_marked_are_marked&#39;vc.0.6.0.0.0" expl="VC for multiples_of_marked_are_marked" proved="true">
      <proof prover="1"><result status="valid" time="0.03"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="prev_and_new_impl_all_multiples_marked&#39;vc" expl="VC for prev_and_new_impl_all_multiples_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="previously_marked_multiples" arg2="in" arg3="Requires2">
    <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.0.0.0" expl="assertion" proved="true">
    <transf name="unfold" proved="true" arg1="all_multiples_marked" arg2="in" arg3="Requires2">
     <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.0.0.0.0" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.03" steps="77"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="151"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="27"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="27"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.6" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.7" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.25" steps="256"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.8" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="26"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.9" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="82"/></proof>
  </goal>
  <goal name="prev_and_new_impl_all_multiples_marked&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="120"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_only_multiples_marked&#39;vc" expl="VC for conservation_only_multiples_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_only_multiples_marked&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.12" steps="26"/></proof>
  </goal>
  <goal name="conservation_only_multiples_marked&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="135"/></proof>
  </goal>
  <goal name="conservation_only_multiples_marked&#39;vc.2" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="20"/></proof>
  </goal>
  <goal name="conservation_only_multiples_marked&#39;vc.3" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="conservation_only_multiples_marked&#39;vc.3.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="conservation_only_multiples_marked&#39;vc.3.0.0" expl="postcondition" proved="true">
    <transf name="case" proved="true" arg1="(k = i * j)">
     <goal name="conservation_only_multiples_marked&#39;vc.3.0.0.0" expl="true case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.03" steps="27"/></proof>
     </goal>
     <goal name="conservation_only_multiples_marked&#39;vc.3.0.0.1" expl="false case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.10" steps="148"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_previously_marked_multiples&#39;vc" expl="VC for conservation_previously_marked_multiples" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_previously_marked_multiples&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="67"/></proof>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="92"/></proof>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.2" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_multiples&#39;vc.2.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
   </goal>
   <goal name="conservation_previously_marked_multiples&#39;vc.2.1" expl="VC for conservation_previously_marked_multiples" proved="true">
   <proof prover="9"><result status="valid" time="0.08" steps="234"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="28"/></proof>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.5" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_multiples&#39;vc.5.0" expl="assertion" proved="true">
   <proof prover="3"><result status="valid" time="0.94"/></proof>
   </goal>
   <goal name="conservation_previously_marked_multiples&#39;vc.5.1" expl="VC for conservation_previously_marked_multiples" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="109"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.6" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_multiples&#39;vc.6.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="conservation_previously_marked_multiples&#39;vc.6.0.0" expl="assertion" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="conservation_previously_marked_multiples&#39;vc.6.0.0.0" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
     </goal>
     <goal name="conservation_previously_marked_multiples&#39;vc.6.0.0.1" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
     </goal>
     <goal name="conservation_previously_marked_multiples&#39;vc.6.0.0.2" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="38"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="conservation_previously_marked_multiples&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_previously_marked_multiples_on_marked_change" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="conservation_previously_marked_multiples_on_marked_change.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="conservation_previously_marked_multiples_on_marked_change.0.0" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.0" proved="true">
     <proof prover="9"><result status="valid" time="0.01" steps="12"/></proof>
     </goal>
     <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.1" proved="true">
     <proof prover="4" timelimit="5"><result status="valid" time="0.13"/></proof>
     <transf name="remove" proved="true" arg1="zero,one,(-),(&gt;),(&lt;=),(&gt;=),abs,even,odd,divides,prime,([]),singleton,cons,snoc,(++),inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Unitary,NonTrivialRing,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_inf,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;def,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples">
      <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.1.0" proved="true">
      <proof prover="3"><result status="valid" time="0.04"/></proof>
      <proof prover="4"><result status="valid" time="0.01"/></proof>
      <proof prover="9"><result status="valid" time="0.10" steps="137"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.2" proved="true">
     <transf name="inline_all" proved="true" >
      <goal name="conservation_previously_marked_multiples_on_marked_change.0.0.0.2.0" proved="true">
      <proof prover="2"><result status="valid" time="0.02" steps="104574"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_not_marked_impl_next_not_marked&#39;vc" expl="VC for conservation_not_marked_impl_next_not_marked" proved="true">
 <proof prover="9"><result status="valid" time="0.35" steps="430"/></proof>
 </goal>
 <goal name="unchanged_other_elements&#39;vc" expl="VC for unchanged_other_elements" proved="true">
 <proof prover="9"><result status="valid" time="0.03" steps="22"/></proof>
 </goal>
 <goal name="t&#39;vc" expl="VC for t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="10"/></proof>
  </goal>
  <goal name="t&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
  <goal name="t&#39;vc.2" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="18"/></proof>
  </goal>
  <goal name="t&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
  </goal>
  <goal name="t&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="175"/></proof>
  </goal>
  <goal name="t&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="236"/></proof>
  </goal>
  <goal name="t&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
  </goal>
  <goal name="t&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="30"/></proof>
  </goal>
  <goal name="t&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="280"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="remove_products&#39;vc" expl="VC for remove_products" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="remove_products&#39;vc.0" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="25"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="130"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="61"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="63"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.4" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.4.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="83"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.4.1" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.08" steps="87"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.4.2" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.31" steps="444"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="214"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="92"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.7" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="91"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.8" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.8.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="89"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.8.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="89"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.9" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(mod (int63&#39;int n) 2 = 1)">
   <goal name="remove_products&#39;vc.9.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.33" steps="350"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.9.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="95"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.10" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.10.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.10.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.11" steps="99"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.10.2" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.11" steps="99"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.11" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="100"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.12" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.12.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.12.0.0" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.12.0.1" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.12.0.2" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.12" steps="101"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.12.0.3" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.13" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.13.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="100"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.13.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.13" steps="104"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.13.2" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.24" steps="411"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.14" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.14.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="102"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.14.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="102"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.14.2" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.14" steps="106"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.14.3" expl="VC for remove_products" proved="true">
   <proof prover="13"><result status="valid" time="0.59" steps="10719"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.15" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.15.0" expl="assertion" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.15.0.0" expl="assertion" proved="true">
    <transf name="split_vc" proved="true" >
     <goal name="remove_products&#39;vc.15.0.0.0" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.12" steps="108"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.15.0.0.1" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.03" steps="104"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.15.0.0.2" expl="assertion" proved="true">
     <proof prover="9"><result status="valid" time="0.13" steps="108"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.15.0.0.3" expl="assertion" proved="true">
     <transf name="remove" proved="true" arg1="Ensures1">
      <goal name="remove_products&#39;vc.15.0.0.3.0" expl="assertion" proved="true">
      <proof prover="13"><result status="valid" time="0.62" steps="6518"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.15.1" expl="VC for remove_products" proved="true">
   <proof prover="0"><result status="valid" time="1.25" steps="752"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.16" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.16.0" expl="assertion" proved="true">
   <proof prover="10" timelimit="10"><result status="valid" time="10.55" steps="602722"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.16.1" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.72" steps="438"/></proof>
   <proof prover="10"><result status="valid" time="0.34" steps="70101"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.17" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="106"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.18" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="107"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.19" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.12" steps="112"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.20" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="110"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.21" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="111"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.22" expl="precondition" proved="true">
  <proof prover="5"><result status="valid" time="0.21" steps="44920"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.23" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="120"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.24" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="1.14"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.25" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="120"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.26" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="120"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.27" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.17" steps="312"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.28" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="127"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.29" expl="assertion" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.29.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.29.0.0" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="122"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.1" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="122"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.2" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="0.71" steps="745"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.3" expl="VC for remove_products" proved="true">
    <proof prover="9"><result status="valid" time="0.15" steps="128"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.29.0.4" expl="VC for remove_products" proved="true">
    <transf name="case" proved="true" arg1="(j &lt; x)">
     <goal name="remove_products&#39;vc.29.0.4.0" expl="true case" proved="true">
     <proof prover="9"><result status="valid" time="0.04" steps="131"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.29.0.4.1" expl="false case" proved="true">
     <transf name="unfold" proved="true" arg1="all_eliminated_marked_partial" arg2="in" arg3="Requires4">
      <goal name="remove_products&#39;vc.29.0.4.1.0" expl="false case" proved="true">
      <proof prover="10" timelimit="10"><result status="valid" time="10.79" steps="576259"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.30" expl="variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.51" steps="74804"/></proof>
  <proof prover="11"><result status="valid" time="0.25" steps="671685"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.31" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.31.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="124"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="124"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.2" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="124"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.3" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="124"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.4" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="124"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.5" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="124"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.48" steps="75978"/></proof>
   <proof prover="11"><result status="valid" time="0.25" steps="667739"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.7" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.28" steps="46358"/></proof>
   <proof prover="11"><result status="valid" time="0.42" steps="1217248"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.31.8" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.03" steps="128779"/></proof>
   <proof prover="10"><result status="valid" time="0.23" steps="54311"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.32" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.32.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.32.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.32.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.16" steps="133"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.52" steps="624"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.2" expl="VC for remove_products" proved="true">
     <transf name="unfold" proved="true" arg1="inv_remove_products" arg2="in" arg3="Requires8">
      <goal name="remove_products&#39;vc.32.0.0.2.0" expl="VC for remove_products" proved="true">
      <transf name="split_premise_right" proved="true" >
       <goal name="remove_products&#39;vc.32.0.0.2.0.0" expl="VC for remove_products" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="remove_products&#39;vc.32.0.0.2.0.0.0" expl="VC for remove_products" proved="true">
        <transf name="unfold" proved="true" arg1="all_primes" arg2="in" arg3="Requires11">
         <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0" expl="VC for remove_products" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.0" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.0.0" expl="VC for remove_products" proved="true">
           <proof prover="9"><result status="valid" time="0.56" steps="653"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.1" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.32.0.0.2.0.0.0.0.1.0" expl="VC for remove_products" proved="true">
           <proof prover="9"><result status="valid" time="0.53" steps="644"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.3" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.17" steps="133"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.4" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.43" steps="606"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.32.0.0.5" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.28" steps="133"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.32.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.10" steps="28852"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.33" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.93" steps="510"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.34" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="135"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.35" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.29" steps="55508"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.36" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.37" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.37.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.37.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.28" steps="142"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.37.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.16" steps="142"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.37.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.37.0.3" expl="precondition" proved="true">
    <transf name="case" proved="true" arg1="(i = p)">
     <goal name="remove_products&#39;vc.37.0.3.0" expl="true case (precondition)" proved="true">
     <transf name="remove" proved="true" arg1="H24,H23,H22">
      <goal name="remove_products&#39;vc.37.0.3.0.0" expl="true case (precondition)" proved="true">
      <proof prover="9"><result status="valid" time="3.17" steps="696"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="remove_products&#39;vc.37.0.3.1" expl="false case (precondition)" proved="true">
     <transf name="assert" proved="true" arg1="(forall i. 0 &lt;= i &lt; div (length marked_old - 1) n -&gt; i &lt;&gt; p -&gt; (nexts t)[i] = (nexts t1)[i])">
      <goal name="remove_products&#39;vc.37.0.3.1.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.22" steps="158"/></proof>
      </goal>
      <goal name="remove_products&#39;vc.37.0.3.1.1" expl="false case (precondition)" proved="true">
      <transf name="inline_all" proved="true" >
       <goal name="remove_products&#39;vc.37.0.3.1.1.0" expl="false case (precondition)" proved="true">
       <proof prover="2" timelimit="1"><result status="valid" time="0.07" steps="256665"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.38" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.40" steps="470"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.39" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.39.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.39.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.28" steps="146"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.17" steps="146"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="142"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.3" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.19" steps="146"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.39.0.4" expl="precondition" proved="true">
    <transf name="unfold" proved="true" arg1="not_marked_impl_next_not_marked_partial" arg2="in" arg3="Requires8">
     <goal name="remove_products&#39;vc.39.0.4.0" expl="precondition" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="remove_products&#39;vc.39.0.4.0.0" expl="precondition" proved="true">
      <transf name="instantiate" proved="true" arg1="Requires8" arg2="i">
       <goal name="remove_products&#39;vc.39.0.4.0.0.0" expl="precondition" proved="true">
       <proof prover="10"><result status="valid" time="0.57" steps="90033"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.40" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="144"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.41" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.42" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.43" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.44" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.45" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.46" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="138"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.47" expl="assertion" proved="true">
  <proof prover="10"><result status="valid" time="0.67" steps="106778"/></proof>
  <proof prover="11"><result status="valid" time="0.34" steps="1004446"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.48" expl="variant decrease" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.48.0" expl="variant decrease" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.48.1" expl="variant decrease" proved="true">
   <proof prover="10"><result status="valid" time="0.32" steps="68764"/></proof>
   <proof prover="11"><result status="valid" time="0.22" steps="604369"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.49" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.49.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.2" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.3" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.4" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.5" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.36" steps="68754"/></proof>
   <proof prover="11"><result status="valid" time="0.36" steps="605388"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.7" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.49.8" expl="precondition" proved="true">
   <proof prover="2"><result status="valid" time="0.03" steps="121255"/></proof>
   <proof prover="10"><result status="valid" time="0.25" steps="50750"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.50" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.50.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.50.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.50.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.13" steps="118"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.49" steps="434"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.2" expl="VC for remove_products" proved="true">
     <transf name="unfold" proved="true" arg1="inv_remove_products" arg2="in" arg3="Requires8">
      <goal name="remove_products&#39;vc.50.0.0.2.0" expl="VC for remove_products" proved="true">
      <transf name="split_premise_right" proved="true" >
       <goal name="remove_products&#39;vc.50.0.0.2.0.0" expl="VC for remove_products" proved="true">
       <transf name="inline_goal" proved="true" >
        <goal name="remove_products&#39;vc.50.0.0.2.0.0.0" expl="VC for remove_products" proved="true">
        <transf name="unfold" proved="true" arg1="all_primes" arg2="in" arg3="Requires11">
         <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0" expl="VC for remove_products" proved="true">
         <transf name="split_vc" proved="true" >
          <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.0" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.0.0" expl="VC for remove_products" proved="true">
           <proof prover="9"><result status="valid" time="0.62" steps="468"/></proof>
           </goal>
          </transf>
          </goal>
          <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.1" expl="VC for remove_products" proved="true">
          <transf name="instantiate" proved="true" arg1="Requires11" arg2="i">
           <goal name="remove_products&#39;vc.50.0.0.2.0.0.0.0.1.0" expl="VC for remove_products" proved="true">
           <proof prover="9"><result status="valid" time="0.60" steps="469"/></proof>
           </goal>
          </transf>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.3" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.14" steps="118"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.4" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.44" steps="424"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.50.0.0.5" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.13" steps="118"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="remove_products&#39;vc.50.1" expl="precondition" proved="true">
   <proof prover="5"><result status="valid" time="0.08" steps="27805"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.51" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.04" steps="457"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.52" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.53" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.22" steps="468"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.54" expl="precondition" proved="true">
  <proof prover="7"><result status="valid" time="0.96" steps="1343156"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.55" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="126"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.56" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="127"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.57" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.57.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.57.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.14" steps="129"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.14" steps="129"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.04" steps="127"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.3" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.30" steps="129"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.57.0.4" expl="precondition" proved="true">
    <transf name="unfold" proved="true" arg1="not_marked_impl_next_not_marked_partial" arg2="in" arg3="Requires8">
     <goal name="remove_products&#39;vc.57.0.4.0" expl="precondition" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="remove_products&#39;vc.57.0.4.0.0" expl="precondition" proved="true">
      <transf name="instantiate" proved="true" arg1="Requires8" arg2="i">
       <goal name="remove_products&#39;vc.57.0.4.0.0.0" expl="precondition" proved="true">
       <proof prover="10"><result status="valid" time="1.63" steps="137469"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.58" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="129"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.59" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.60" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.61" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.62" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.63" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.64" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="122"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.65" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.65.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="83"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.1" expl="VC for remove_products" proved="true">
   <proof prover="11"><result status="valid" time="0.08" steps="200956"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.2" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.87" steps="524"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.3" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.12" steps="298"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.65.4" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.10" steps="93"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.66" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.66.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.43" steps="55584"/></proof>
   <proof prover="11"><result status="valid" time="0.18" steps="313529"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="89"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.2" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.80" steps="552"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.3" expl="VC for remove_products" proved="true">
   <proof prover="10"><result status="valid" time="0.43" steps="57636"/></proof>
   <proof prover="11"><result status="valid" time="0.07" steps="242220"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.4" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="85"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.66.5" expl="VC for remove_products" proved="true">
   <proof prover="11"><result status="valid" time="0.09" steps="257705"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.67" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="87"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.68" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="87"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.69" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="87"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.70" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="87"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.71" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.71.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.71.0.0" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.06" steps="91"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.71.0.1" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.07" steps="91"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.71.0.2" expl="postcondition" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="87"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.71.0.3" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="prime_multiples_marked" arg2="in" arg3="Requires2">
     <goal name="remove_products&#39;vc.71.0.3.0" expl="postcondition" proved="true">
     <transf name="split_all_right" proved="true" >
      <goal name="remove_products&#39;vc.71.0.3.0.0" expl="postcondition" proved="true">
      <transf name="case" proved="true" arg1="(i &lt; (nexts t)[x])">
       <goal name="remove_products&#39;vc.71.0.3.0.0.0" expl="true case (postcondition)" proved="true">
       <proof prover="9"><result status="valid" time="0.08" steps="105"/></proof>
       </goal>
       <goal name="remove_products&#39;vc.71.0.3.0.0.1" expl="false case (postcondition)" proved="true">
       <proof prover="9"><result status="valid" time="0.29" steps="328"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.72" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="89"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.73" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.73.0" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.39" steps="54344"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="85"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.2" expl="VC for remove_products" proved="true">
   <proof prover="6"><result status="valid" time="3.09" steps="28146"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.3" expl="VC for remove_products" proved="true">
   <proof prover="10"><result status="valid" time="0.42" steps="56750"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="236039"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.4" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="81"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.73.5" expl="VC for remove_products" proved="true">
   <proof prover="11"><result status="valid" time="0.09" steps="250085"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.74" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="83"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.75" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="83"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.76" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="83"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.77" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="83"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.78" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="86"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.79" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="85"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.80" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="86"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.81" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="79"/></proof>
  <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,max,marked_old,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,t&#39;invariant,H2,H1,H,Requires4,Requires3,Requires1,Ensures1,Ensures,Requires">
   <goal name="remove_products&#39;vc.81.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.00" steps="16"/></proof>
   <proof prover="9"><result status="valid" time="0.00" steps="32"/></proof>
   <proof prover="11"><result status="valid" time="0.02" steps="18401"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.82" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="31"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.83" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="31"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.84" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(mod (int63&#39;int n) 2 = 1)">
   <goal name="remove_products&#39;vc.84.0" expl="asserted formula" proved="true">
   <proof prover="10"><result status="valid" time="0.17" steps="36572"/></proof>
   <proof prover="11"><result status="valid" time="0.06" steps="138836"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.84.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.08" steps="37"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.85" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="111"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.86" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="42"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.87" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.87.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.06" steps="185"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.87.1" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.22" steps="48945"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.87.2" expl="VC for remove_products" proved="true">
   <proof prover="10"><result status="valid" time="0.17" steps="39275"/></proof>
   <proof prover="12"><result status="valid" time="0.43" steps="31359"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.87.3" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="49"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.87.4" expl="VC for remove_products" proved="true">
   <proof prover="9"><result status="valid" time="0.04" steps="43"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.88" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.88.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.2" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.3" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.4" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.20" steps="43093"/></proof>
   <proof prover="11"><result status="valid" time="0.06" steps="149121"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.5" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.6" expl="precondition" proved="true">
   <proof prover="10"><result status="valid" time="0.24" steps="48522"/></proof>
   <proof prover="11"><result status="valid" time="0.07" steps="196830"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.7" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="37"/></proof>
   </goal>
   <goal name="remove_products&#39;vc.88.8" expl="precondition" proved="true">
   <proof prover="11"><result status="valid" time="0.08" steps="166131"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.89" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.89.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.89.0.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.18" steps="40259"/></proof>
    <proof prover="11"><result status="valid" time="0.07" steps="171172"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.1" expl="precondition" proved="true">
    <proof prover="11"><result status="valid" time="0.06" steps="160617"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.2" expl="precondition" proved="true">
    <transf name="assert" proved="true" arg1="(n * n &gt; n)">
     <goal name="remove_products&#39;vc.89.0.2.0" expl="asserted formula" proved="true">
     <proof prover="11"><result status="valid" time="0.07" steps="159121"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.89.0.2.1" expl="precondition" proved="true">
     <proof prover="10"><result status="valid" time="0.37" steps="50739"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="remove_products&#39;vc.89.0.3" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.15" steps="35569"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="142232"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.4" expl="precondition" proved="true">
    <proof prover="11"><result status="valid" time="0.07" steps="174750"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.89.0.5" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.16" steps="36551"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="142277"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.90" expl="precondition" proved="true">
  <proof prover="11"><result status="valid" time="0.08" steps="176584"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.91" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.14" steps="35675"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="178541"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.92" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.22" steps="44131"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.93" expl="precondition" proved="true">
  <proof prover="8"><result status="valid" time="2.81"/></proof>
  <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),inv_nexts,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,max,marked_copy,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,H4,H3,H2,Requires8,Requires7,Requires6,Requires5,Ensures5,Ensures4,Ensures3,Ensures2,H,Ensures1,Ensures,Assert,Requires3,Requires2,Requires1,Requires">
   <goal name="remove_products&#39;vc.93.0" expl="precondition" proved="true">
   <proof prover="8" timelimit="1"><result status="valid" time="0.02"/></proof>
   <proof prover="9"><result status="valid" time="0.10" steps="174"/></proof>
   <proof prover="10"><result status="valid" time="0.06" steps="10575"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.94" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.94.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.94.0.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.15" steps="37005"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="149955"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.94.0.1" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.18" steps="40001"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="149206"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.94.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="54"/></proof>
    <proof prover="10"><result status="valid" time="0.15" steps="35667"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.94.0.3" expl="precondition" proved="true">
    <proof prover="2"><result status="valid" time="0.02" steps="113451"/></proof>
    <proof prover="12"><result status="valid" time="0.49" steps="43261"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.95" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove_products&#39;vc.95.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="remove_products&#39;vc.95.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_products&#39;vc.95.0.0.0" expl="VC for remove_products" proved="true">
     <proof prover="10"><result status="valid" time="0.20" steps="39292"/></proof>
     <proof prover="11"><result status="valid" time="0.08" steps="208672"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.95.0.0.1" expl="VC for remove_products" proved="true">
     <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
     <proof prover="10"><result status="valid" time="0.11" steps="37054"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.95.0.0.2" expl="VC for remove_products" proved="true">
     <proof prover="10"><result status="valid" time="0.28" steps="55412"/></proof>
     <proof prover="11"><result status="valid" time="0.08" steps="279357"/></proof>
     </goal>
     <goal name="remove_products&#39;vc.95.0.0.3" expl="VC for remove_products" proved="true">
     <proof prover="10"><result status="valid" time="0.26" steps="50081"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.96" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.96.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.96.0.0" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.15" steps="37020"/></proof>
    <proof prover="11"><result status="valid" time="0.08" steps="195307"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.1" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="0.18" steps="40266"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="151023"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="57"/></proof>
    <proof prover="10"><result status="valid" time="0.15" steps="35700"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="135184"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.3" expl="precondition" proved="true">
    <proof prover="11"><result status="valid" time="0.06" steps="204911"/></proof>
    </goal>
    <goal name="remove_products&#39;vc.96.0.4" expl="precondition" proved="true">
    <transf name="inline_all" proved="true" >
     <goal name="remove_products&#39;vc.96.0.4.0" expl="precondition" proved="true">
     <transf name="remove" proved="true" arg1="Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,(==)&#39;spec&#39;0,create&#39;spec,create&#39;spec&#39;0,empty&#39;def,set&#39;spec,set&#39;spec&#39;0,set&#39;spec&#39;1,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,singleton&#39;spec&#39;0,cons&#39;spec,cons&#39;spec&#39;0,cons&#39;spec&#39;1,snoc&#39;spec,snoc&#39;spec&#39;0,snoc&#39;spec&#39;1,([..])&#39;spec,([..])&#39;spec&#39;0,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,(++)&#39;spec&#39;0,(++)&#39;spec&#39;1,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,H17,H16,H15,Requires10,Requires9,Requires8,Requires7,Ensures5,Ensures4,Ensures3,Ensures2,H14,H13,Ensures1,Assert,Requires6,Requires5,Requires3,Requires2,H12,H11,H10,H9,H8,H7,H6,H5,H4">
      <goal name="remove_products&#39;vc.96.0.4.0.0" expl="precondition" proved="true">
      <proof prover="7"><result status="valid" time="2.94" steps="10636695"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_products&#39;vc.97" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="59"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="35776"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="150892"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.98" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="54"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="40517"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="143045"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.99" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="33436"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="9539"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.100" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="33439"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="9544"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.101" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="33442"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="9549"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.102" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="33445"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="9554"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.103" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="33448"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="9559"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.104" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.28" steps="55550"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="252886"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.105" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="34386"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="9530"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.106" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="34392"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="9535"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.107" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="41594"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="143459"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.108" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="34403"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="9545"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.109" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="34406"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="9550"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.110" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="33356"/></proof>
  <proof prover="11"><result status="valid" time="0.01" steps="9502"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.111" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="33359"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="9507"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.112" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="33362"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="9512"/></proof>
  </goal>
  <goal name="remove_products&#39;vc.113" expl="postcondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="remove_products&#39;vc.113.0" expl="postcondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="remove_products&#39;vc.113.0.0" expl="postcondition" proved="true">
    <transf name="unfold" proved="true" arg1="only_multiples_marked" arg2="in" arg3="Ensures5">
     <goal name="remove_products&#39;vc.113.0.0.0" expl="postcondition" proved="true">
     <transf name="instantiate" proved="true" arg1="Ensures5" arg2="k">
      <goal name="remove_products&#39;vc.113.0.0.0.0" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="1.48" steps="314"/></proof>
      <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,max,marked_old,marked_copy,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,H8,H6,Requires3,Requires2,Requires1,Requires,Ensures16,Ensures15,Ensures14,Ensures13,H5,Ensures12,Ensures11,Assert,Ensures10,Ensures9,Ensures8,Ensures7,Ensures6,Ensures5,Ensures4,Ensures3,Ensures2,Ensures1,Ensures">
       <goal name="remove_products&#39;vc.113.0.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="0"><result status="valid" time="0.06" steps="61"/></proof>
       <proof prover="9"><result status="valid" time="0.05" steps="91"/></proof>
       <proof prover="11"><result status="valid" time="0.02" steps="45341"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="previously_marked_multiples_impl_prime&#39;vc" expl="VC for previously_marked_multiples_impl_prime" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="previously_marked_multiples_impl_prime&#39;vc.0" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="previously_marked_multiples_impl_prime&#39;vc.0.0" expl="assertion" proved="true">
   <transf name="inline_all" proved="true" >
    <goal name="previously_marked_multiples_impl_prime&#39;vc.0.0.0" expl="assertion" proved="true">
    <proof prover="11"><result status="valid" time="0.10" steps="166992"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="previously_marked_multiples_impl_prime&#39;vc.0.1" expl="VC for previously_marked_multiples_impl_prime" proved="true">
   <proof prover="9"><result status="valid" time="0.66" steps="626"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="previously_marked_multiples_impl_prime&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="80"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="36514"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="107513"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="only_multiples_marked_impl_not_marked&#39;vc" expl="VC for only_multiples_marked_impl_not_marked" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="only_multiples_marked_impl_not_marked&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="73"/></proof>
  </goal>
  <goal name="only_multiples_marked_impl_not_marked&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.79" steps="395"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="EulerSieveImpl" proved="true">
 <goal name="conservation_inv_arr_on_mark&#39;vc" expl="VC for conservation_inv_arr_on_mark" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_inv_arr_on_mark&#39;vc.0" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="68"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="30152"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_mark&#39;vc.1" expl="assertion" proved="true">
  <proof prover="7"><result status="valid" time="0.25" steps="352584"/></proof>
  <proof prover="9"><result status="valid" time="0.04" steps="24"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="29830"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_mark&#39;vc.2" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(abs arr[i] = abs arr[i &lt;- - arr[i]][i])">
   <goal name="conservation_inv_arr_on_mark&#39;vc.2.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.16" steps="90"/></proof>
   <proof prover="10"><result status="valid" time="0.16" steps="30029"/></proof>
   <proof prover="11"><result status="valid" time="0.05" steps="111451"/></proof>
   </goal>
   <goal name="conservation_inv_arr_on_mark&#39;vc.2.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(j = i)">
    <goal name="conservation_inv_arr_on_mark&#39;vc.2.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.23" steps="100"/></proof>
    <proof prover="10"><result status="valid" time="0.16" steps="31031"/></proof>
    </goal>
    <goal name="conservation_inv_arr_on_mark&#39;vc.2.1.1" expl="false case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.47" steps="202"/></proof>
    <proof prover="10"><result status="valid" time="0.19" steps="35304"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="conservation_inv_arr_on_jump&#39;vc" expl="VC for conservation_inv_arr_on_jump" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="conservation_inv_arr_on_jump&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="22"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="26965"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="7125"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.1" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="78"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="31185"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.2" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="77"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="31366"/></proof>
  </goal>
  <goal name="conservation_inv_arr_on_jump&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="6.14" steps="2002"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="t&#39;vc" expl="VC for t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t&#39;vc.0" expl="array creation size" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="10"/></proof>
  <proof prover="10"><result status="valid" time="0.09" steps="24330"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="5947"/></proof>
  </goal>
  <goal name="t&#39;vc.1" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="27758"/></proof>
  <proof prover="11"><result status="valid" time="0.01" steps="13026"/></proof>
  </goal>
  <goal name="t&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="16"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="28051"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="7675"/></proof>
  </goal>
  <goal name="t&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="20"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="31239"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="8722"/></proof>
  </goal>
  <goal name="t&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="24"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="31476"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="15244"/></proof>
  </goal>
  <goal name="t&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="73"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="35634"/></proof>
  </goal>
  <goal name="t&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.00" steps="30"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="31686"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="8967"/></proof>
  </goal>
  <goal name="t&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="31"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="31754"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="15488"/></proof>
  </goal>
  <goal name="t&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="206"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="37925"/></proof>
  </goal>
  <goal name="t&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="275"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="38591"/></proof>
  </goal>
  <goal name="t&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="34394"/></proof>
  <proof prover="11"><result status="valid" time="0.03" steps="140924"/></proof>
  </goal>
  <goal name="t&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="34621"/></proof>
  </goal>
  <goal name="t&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.13" steps="358"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="38083"/></proof>
  </goal>
  <goal name="t&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="38600"/></proof>
  </goal>
  <goal name="t&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="1.40" steps="1110"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="38925"/></proof>
  </goal>
  <goal name="t&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.51" steps="364"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="39276"/></proof>
  <proof prover="12"><result status="valid" time="1.06" steps="77654"/></proof>
  </goal>
  <goal name="t&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.63" steps="549"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="39676"/></proof>
  </goal>
  <goal name="t&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.21" steps="40401"/></proof>
  </goal>
  <goal name="t&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.23" steps="322"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="41006"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="create&#39;vc.0" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="16"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="30020"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="90342"/></proof>
  </goal>
  <goal name="create&#39;vc.1" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="16"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="26891"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="7025"/></proof>
  </goal>
  <goal name="create&#39;vc.2" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="70"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="30336"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="92198"/></proof>
  </goal>
  <goal name="create&#39;vc.3" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="81"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="30446"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="92700"/></proof>
  </goal>
  <goal name="create&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="20"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="28740"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="89703"/></proof>
  </goal>
  <goal name="create&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="36"/></proof>
  <proof prover="10"><result status="valid" time="0.11" steps="30804"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="9082"/></proof>
  </goal>
  <goal name="create&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="24"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="33164"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="134494"/></proof>
  </goal>
  <goal name="create&#39;vc.7" expl="array creation size" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="30"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="39411"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="156092"/></proof>
  </goal>
  <goal name="create&#39;vc.8" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="32"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="37115"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="157359"/></proof>
  </goal>
  <goal name="create&#39;vc.9" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="141"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="43103"/></proof>
  </goal>
  <goal name="create&#39;vc.10" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="42"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="37342"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="163617"/></proof>
  </goal>
  <goal name="create&#39;vc.11" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="46"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="40182"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="163760"/></proof>
  </goal>
  <goal name="create&#39;vc.12" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="48"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="41864"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="176364"/></proof>
  </goal>
  <goal name="create&#39;vc.13" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="50"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="41983"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="179276"/></proof>
  </goal>
  <goal name="create&#39;vc.14" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="48"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="40587"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="165889"/></proof>
  </goal>
  <goal name="create&#39;vc.15" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.17" steps="356"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="42381"/></proof>
  </goal>
  <goal name="create&#39;vc.16" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="40121"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="160994"/></proof>
  </goal>
  <goal name="create&#39;vc.17" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="35068"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="10625"/></proof>
  </goal>
  <goal name="create&#39;vc.18" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="41"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="40346"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="162617"/></proof>
  </goal>
  <goal name="create&#39;vc.19" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="35099"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="18958"/></proof>
  </goal>
  <goal name="create&#39;vc.20" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="37211"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="163983"/></proof>
  </goal>
  <goal name="create&#39;vc.21" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="43"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="44304"/></proof>
  </goal>
  <goal name="create&#39;vc.22" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="45"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="42845"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="175332"/></proof>
  </goal>
  <goal name="create&#39;vc.23" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.22" steps="46031"/></proof>
  </goal>
  <goal name="create&#39;vc.24" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.36" steps="52541"/></proof>
  </goal>
  <goal name="create&#39;vc.25" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="57"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="43726"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="264310"/></proof>
  </goal>
  <goal name="create&#39;vc.26" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="225"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="44863"/></proof>
  </goal>
  <goal name="create&#39;vc.27" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.93" steps="490"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="46383"/></proof>
  </goal>
  <goal name="create&#39;vc.28" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="2.04" steps="1533"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="48147"/></proof>
  </goal>
  <goal name="create&#39;vc.29" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.62" steps="1228"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="47448"/></proof>
  </goal>
  <goal name="create&#39;vc.30" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="2.03" steps="1500"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="48717"/></proof>
  </goal>
  <goal name="create&#39;vc.31" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.53" steps="1146"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="47989"/></proof>
  </goal>
  <goal name="create&#39;vc.32" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="9.53" steps="2451"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="47234"/></proof>
  </goal>
  <goal name="create&#39;vc.33" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="49912"/></proof>
  </goal>
  <goal name="create&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="35251"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="10715"/></proof>
  </goal>
  <goal name="create&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.44" steps="430"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="47470"/></proof>
  </goal>
  <goal name="create&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.81" steps="262"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="47940"/></proof>
  </goal>
  <goal name="create&#39;vc.37" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="72"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="48436"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="191263"/></proof>
  </goal>
  <goal name="create&#39;vc.38" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.88" steps="663"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="46523"/></proof>
  <proof prover="12"><result status="valid" time="0.85" steps="52866"/></proof>
  </goal>
  <goal name="create&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.98" steps="778"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="49538"/></proof>
  <proof prover="12"><result status="valid" time="0.78" steps="54356"/></proof>
  </goal>
  <goal name="create&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.85" steps="556"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="48274"/></proof>
  <proof prover="12"><result status="valid" time="0.85" steps="54318"/></proof>
  </goal>
  <goal name="create&#39;vc.41" expl="out of loop bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="35"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="46365"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="222957"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="set_next&#39;vc" expl="VC for set_next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_next&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="35"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="38804"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="158900"/></proof>
  </goal>
  <goal name="set_next&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="37"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="38857"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="159526"/></proof>
  </goal>
  <goal name="set_next&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="39"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="38987"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="160150"/></proof>
  </goal>
  <goal name="set_next&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="41"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="39058"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="159753"/></proof>
  </goal>
  <goal name="set_next&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="43"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="39102"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="165748"/></proof>
  </goal>
  <goal name="set_next&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="49"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="39149"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="166069"/></proof>
  </goal>
  <goal name="set_next&#39;vc.6" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="34"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="30482"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="10202"/></proof>
  </goal>
  <goal name="set_next&#39;vc.7" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="186"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="35290"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="165266"/></proof>
  </goal>
  <goal name="set_next&#39;vc.8" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="99"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="40629"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="172251"/></proof>
  </goal>
  <goal name="set_next&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="46"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="38396"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="165629"/></proof>
  </goal>
  <goal name="set_next&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="50"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="39578"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="165952"/></proof>
  </goal>
  <goal name="set_next&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="57"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="39952"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="169557"/></proof>
  </goal>
  <goal name="set_next&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="59"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="42055"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="175126"/></proof>
  </goal>
  <goal name="set_next&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="45685"/></proof>
  </goal>
  <goal name="set_next&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="56"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="34337"/></proof>
  </goal>
  <goal name="set_next&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="69"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="43183"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="179417"/></proof>
  </goal>
  <goal name="set_next&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="1.18" steps="946"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="45371"/></proof>
  </goal>
  <goal name="set_next&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.53" steps="537"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="43149"/></proof>
  </goal>
  <goal name="set_next&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.24" steps="45246"/></proof>
  </goal>
  <goal name="set_next&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.31" steps="51284"/></proof>
  </goal>
  <goal name="set_next&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.44" steps="52694"/></proof>
  </goal>
  <goal name="set_next&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.27" steps="46806"/></proof>
  </goal>
  <goal name="set_next&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.23" steps="47389"/></proof>
  </goal>
  <goal name="set_next&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.30" steps="49709"/></proof>
  </goal>
  <goal name="set_next&#39;vc.24" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="52"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="33202"/></proof>
  <proof prover="11"><result status="valid" time="0.04" steps="82854"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_next&#39;vc" expl="VC for get_next" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="get_next&#39;vc.0" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
  <proof prover="10"><result status="valid" time="0.09" steps="27076"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="10006"/></proof>
  </goal>
  <goal name="get_next&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="114"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="31480"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="153648"/></proof>
  </goal>
  <goal name="get_next&#39;vc.2" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="83"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="37029"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="162640"/></proof>
  </goal>
  <goal name="get_next&#39;vc.3" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="37564"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="185568"/></proof>
  </goal>
  <goal name="get_next&#39;vc.4" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="142"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="39198"/></proof>
  </goal>
  <goal name="get_next&#39;vc.5" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="37563"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="185519"/></proof>
  </goal>
  <goal name="get_next&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.82" steps="715"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="42947"/></proof>
  </goal>
  <goal name="get_next&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="226"/></proof>
  <proof prover="10"><result status="valid" time="0.62" steps="82363"/></proof>
  </goal>
  <goal name="get_next&#39;vc.8" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(i &gt;= 3)">
   <goal name="get_next&#39;vc.8.0" expl="asserted formula" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="36"/></proof>
   <proof prover="10"><result status="valid" time="0.10" steps="29568"/></proof>
   <proof prover="11"><result status="valid" time="0.02" steps="10222"/></proof>
   </goal>
   <goal name="get_next&#39;vc.8.1" expl="postcondition" proved="true">
   <transf name="case" proved="true" arg1="(i &lt; max t - 1)">
    <goal name="get_next&#39;vc.8.1.0" expl="true case (postcondition)" proved="true">
    <proof prover="9"><result status="valid" time="0.05" steps="48"/></proof>
    <proof prover="10"><result status="valid" time="0.20" steps="37766"/></proof>
    <proof prover="11"><result status="valid" time="0.06" steps="178063"/></proof>
    </goal>
    <goal name="get_next&#39;vc.8.1.1" expl="false case (postcondition)" proved="true">
    <transf name="case" proved="true" arg1="(i = max t)">
     <goal name="get_next&#39;vc.8.1.1.0" expl="false case (true case. postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.05" steps="50"/></proof>
     <proof prover="10"><result status="valid" time="0.14" steps="34691"/></proof>
     <proof prover="11"><result status="valid" time="0.06" steps="170875"/></proof>
     </goal>
     <goal name="get_next&#39;vc.8.1.1.1" expl="false case (postcondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.10" steps="191"/></proof>
     <proof prover="10"><result status="valid" time="0.26" steps="46141"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="set_mark&#39;vc" expl="VC for set_mark" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="set_mark&#39;vc.0" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="27076"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="10006"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="119"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="31434"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="154253"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="30"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="38415"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="151172"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="32"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="38498"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="151559"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="34"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="38587"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="152180"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="36"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="38668"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="153631"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.6" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="88"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="38006"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="161994"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="46"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="48908"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.8" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="203"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="42744"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.9" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="97"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="39267"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="185857"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.10" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.01" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="33487"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="160383"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.11" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="97"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="38695"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="184466"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.12" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="36393"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="166110"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.13" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="108"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="39044"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="192780"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.14" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="49"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="39678"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="172356"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="127"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="42199"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="177767"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="40186"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="176456"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="42458"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="182035"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="64"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="40192"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="177937"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="34353"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.20" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.64" steps="256"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="43911"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.21" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="74"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="44201"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="204562"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.22" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="65"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="42102"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.23" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.26" steps="47788"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.24" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.39" steps="49846"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.28" steps="46226"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.50" steps="55726"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="10"><result status="valid" time="0.22" steps="46559"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.28" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.12" steps="76"/></proof>
  <proof prover="10"><result status="valid" time="0.37" steps="58427"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.29" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="56"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="34188"/></proof>
  <proof prover="11"><result status="valid" time="0.04" steps="88013"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.30" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="41"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="38031"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="166919"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.31" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="109"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="41537"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="171748"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.32" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="52"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="39624"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="170688"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.33" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="54"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="39532"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="171623"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.34" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="56"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="39649"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="172039"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.35" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="52"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="34099"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.62" steps="214"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="43182"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="66"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="43554"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="196740"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="107843"/></proof>
  <proof prover="9"><result status="valid" time="0.07" steps="57"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="41352"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.39" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="63"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="43141"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.40" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.22" steps="284"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="47592"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.41" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="124546"/></proof>
  <proof prover="9"><result status="valid" time="0.07" steps="66"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="44419"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.42" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="125159"/></proof>
  <proof prover="9"><result status="valid" time="0.08" steps="66"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="47474"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.43" expl="type invariant" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="63"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="45231"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.44" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.02" steps="136112"/></proof>
  <proof prover="9"><result status="valid" time="0.11" steps="68"/></proof>
  <proof prover="10"><result status="valid" time="0.48" steps="55649"/></proof>
  </goal>
  <goal name="set_mark&#39;vc.45" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="48"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="32973"/></proof>
  <proof prover="11"><result status="valid" time="0.04" steps="85826"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get_mark&#39;vc" expl="VC for get_mark" proved="true">
 <proof prover="9"><result status="valid" time="0.32" steps="328"/></proof>
 </goal>
 <goal name="get_max&#39;vc" expl="VC for get_max" proved="true">
 <proof prover="9"><result status="valid" time="0.03" steps="24"/></proof>
 <proof prover="10"><result status="valid" time="0.14" steps="30981"/></proof>
 <proof prover="11"><result status="valid" time="0.06" steps="135433"/></proof>
 </goal>
 <goal name="EulerSieve.t&#39;refn&#39;vc" expl="VC for t" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="t&#39;refn&#39;vc.0" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="36218"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="116416"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.1" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="36196"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="116449"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.2" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="44003"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="169258"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.3" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="40046"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="137274"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.4" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="40242"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="148600"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.5" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="36201"/></proof>
  <proof prover="11"><result status="valid" time="0.05" steps="169523"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.6" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="18"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="40766"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="156327"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.7" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="20"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="41099"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="184971"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.8" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="12"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="38992"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="156283"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.9" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="14"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="39345"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="159469"/></proof>
  </goal>
  <goal name="t&#39;refn&#39;vc.10" expl="VC for t" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="14"/></proof>
  <proof prover="10"><result status="valid" time="0.16" steps="39281"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="159512"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="EulerSieve.create&#39;refn&#39;vc" expl="VC for create&#39;refn" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="create&#39;refn&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="14"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="32046"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="15598"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="38402"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="12912"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="32"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="38423"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="22581"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="38"/></proof>
  <proof prover="10"><result status="valid" time="0.28" steps="54753"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="103"/></proof>
  <proof prover="11"><result status="valid" time="0.20" steps="780787"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="103"/></proof>
  <proof prover="11"><result status="valid" time="0.39" steps="782400"/></proof>
  </goal>
  <goal name="create&#39;refn&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="42"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="45066"/></proof>
  <proof prover="12"><result status="valid" time="0.40" steps="37198"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="EulerSieve.set_next&#39;refn&#39;vc" expl="VC for set_next&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.10" steps="41"/></proof>
 <proof prover="10"><result status="valid" time="0.16" steps="40745"/></proof>
 </goal>
 <goal name="EulerSieve.get_next&#39;refn&#39;vc" expl="VC for get_next&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
 <proof prover="10"><result status="valid" time="0.13" steps="34341"/></proof>
 <proof prover="11"><result status="valid" time="0.05" steps="166785"/></proof>
 </goal>
 <goal name="EulerSieve.set_mark&#39;refn&#39;vc" expl="VC for set_mark&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.03" steps="26"/></proof>
 <proof prover="10"><result status="valid" time="0.18" steps="34341"/></proof>
 <proof prover="11"><result status="valid" time="0.06" steps="166785"/></proof>
 </goal>
 <goal name="EulerSieve.get_mark&#39;refn&#39;vc" expl="VC for get_mark&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="26"/></proof>
 <proof prover="10"><result status="valid" time="0.13" steps="37093"/></proof>
 <proof prover="11"><result status="valid" time="0.05" steps="166829"/></proof>
 </goal>
 <goal name="EulerSieve.get_max&#39;refn&#39;vc" expl="VC for get_max&#39;refn" proved="true">
 <proof prover="9"><result status="valid" time="0.02" steps="20"/></proof>
 <proof prover="10"><result status="valid" time="0.10" steps="32129"/></proof>
 <proof prover="11"><result status="valid" time="0.01" steps="12276"/></proof>
 </goal>
 <goal name="euler_sieve&#39;vc" expl="VC for euler_sieve" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="euler_sieve&#39;vc.0" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="14"/></proof>
  <proof prover="10"><result status="valid" time="0.10" steps="32363"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="15884"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.1" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="58"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="41905"/></proof>
  <proof prover="11"><result status="valid" time="0.06" steps="210601"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.2" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="39324"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13476"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.3" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="39327"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13481"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.4" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="39330"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13486"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.5" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="60"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="39333"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13491"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.6" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="78"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="41903"/></proof>
  <proof prover="11"><result status="valid" time="0.04" steps="111045"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.7" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.19" steps="256"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="53166"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="372300"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.8" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="84"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="42151"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="23877"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.9" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.18" steps="364"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="49008"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="371500"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.10" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.49" steps="403"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.11" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.11.0" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.02" steps="68"/></proof>
   <proof prover="10"><result status="valid" time="0.18" steps="42018"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="213407"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.11.1" expl="precondition" proved="true">
   <proof prover="9"><result status="valid" time="0.06" steps="72"/></proof>
   <proof prover="10"><result status="valid" time="0.11" steps="49653"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="383516"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.11.2" expl="precondition" proved="true">
   <transf name="unfold" proved="true" arg1="not_marked_impl_next_not_marked" arg2="in" arg3="Ensures5">
    <goal name="euler_sieve&#39;vc.11.2.0" expl="precondition" proved="true">
    <transf name="split_premise_right" proved="true" >
     <goal name="euler_sieve&#39;vc.11.2.0.0" expl="precondition" proved="true">
     <transf name="assert" proved="true" arg1="(int63&#39;int nn &lt;= div (int63&#39;int (max1 t)) (int63&#39;int nn))">
      <goal name="euler_sieve&#39;vc.11.2.0.0.0" expl="asserted formula" proved="true">
      <proof prover="9"><result status="valid" time="0.10" steps="76"/></proof>
      <proof prover="11"><result status="valid" time="0.10" steps="390397"/></proof>
      </goal>
      <goal name="euler_sieve&#39;vc.11.2.0.0.1" expl="precondition" proved="true">
      <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,singleton,cons,snoc,(++),exchange,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Div_mod,Div_unique,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,create&#39;spec&#39;0,empty&#39;def,set&#39;spec,set&#39;spec&#39;0,set&#39;spec&#39;1,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,singleton&#39;spec&#39;0,cons&#39;spec,cons&#39;spec&#39;0,cons&#39;spec&#39;1,snoc&#39;spec,snoc&#39;spec&#39;0,snoc&#39;spec&#39;1,([..])&#39;spec,([..])&#39;spec&#39;0,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,(++)&#39;spec&#39;0,(++)&#39;spec&#39;1,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H15,H14,H13,H12,H11,Ensures14,Ensures13,Ensures12,Ensures11,Ensures10,H10,H6,Requires3,Requires2,Requires1,Requires,H5,Ensures4,Ensures3,H2,H1,Ensures1,Ensures,H,Assert,H9,H4,(==)&#39;spec&#39;02,(==)&#39;spec&#39;01,(==)&#39;spec&#39;0,Abs_le2,Abs_le1,Abs_le,Div_bound3,Div_bound2,Mod_bound3,Mod_bound2,array63&#39;invariant3,array63&#39;invariant2,array63&#39;invariant1,array63&#39;invariant,Mod_bound1,Mod_bound,Div_bound1,Div_bound,divides&#39;spec1,divides&#39;spec,even_mod21,even_mod2,even_divides1,even_divides,odd_divides1,odd_divides,div_mult_11,div_mult_1,mult_borne_sous_exp1,mult_borne_sous_exp,t&#39;invariant22,t&#39;invariant21,t&#39;invariant20,t&#39;invariant18,t&#39;invariant17,t&#39;invariant16,t&#39;invariant15,t&#39;invariant14,t&#39;invariant13,t&#39;invariant12,t&#39;invariant11,t&#39;invariant10,t&#39;invariant9,t&#39;invariant8,t&#39;invariant7,t&#39;invariant6,t&#39;invariant5,t&#39;invariant4,t&#39;invariant3,t&#39;invariant2,t&#39;invariant1,t&#39;invariant,Ensures8,Ensures7,Ensures6
">
       <goal name="euler_sieve&#39;vc.11.2.0.0.1.0" expl="precondition" proved="true">
       <proof prover="7"><result status="valid" time="0.05" steps="633123"/></proof>
       <proof prover="13"><result status="valid" time="0.01" steps="215"/></proof>
       <proof prover="14"><result status="valid" time="1.81" steps="144869"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.12" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="43213"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="232303"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.13" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.13.0" expl="assertion" proved="true">
   <proof prover="10"><result status="valid" time="0.37" steps="64810"/></proof>
   <proof prover="11"><result status="valid" time="1.60" steps="3704462"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.13.1" expl="VC for euler_sieve" proved="true">
   <transf name="unfold" proved="true" arg1="only_multiples_marked" arg2="in" arg3="Ensures4">
    <goal name="euler_sieve&#39;vc.13.1.0" expl="VC for euler_sieve" proved="true">
    <transf name="remove" proved="true" arg1="zero1,one1,(-),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,singleton,cons,snoc,(++),exchange,all_eliminated_marked_partial,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Refl,CompatOrderAdd,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,array63&#39;invariant,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H18,H17,Ensures13,H16,H15,H14,Ensures12,Ensures11,Ensures10,Ensures9,Ensures8,H13,H10,H9,Requires4,Requires3,Requires2,Requires,H8,Ensures7,Ensures6,Ensures5,H5,Ensures2,Ensures1,H3,Assert,Ensures,H12,H11,H7,H6">
     <goal name="euler_sieve&#39;vc.13.1.0.0" expl="VC for euler_sieve" proved="true">
     <proof prover="2"><result status="valid" time="0.02" steps="47700"/></proof>
     <proof prover="7"><result status="valid" time="0.16" steps="283727"/></proof>
     <proof prover="9"><result status="valid" time="0.05" steps="109"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.13.2" expl="VC for euler_sieve" proved="true">
   <transf name="remove" proved="true" arg1="(==)&#39;spec&#39;0,(==)&#39;spec,create&#39;spec&#39;0,create&#39;spec,set&#39;spec&#39;1,set&#39;spec&#39;0,set&#39;spec,singleton&#39;spec&#39;0,singleton&#39;spec,cons&#39;spec&#39;1,cons&#39;spec&#39;0,cons&#39;spec,snoc&#39;spec&#39;1,snoc&#39;spec&#39;0,snoc&#39;spec">
    <goal name="euler_sieve&#39;vc.13.2.0" expl="VC for euler_sieve" proved="true">
    <proof prover="3"><result status="valid" time="2.42"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.14" expl="variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="7.28" steps="727"/></proof>
  <proof prover="10"><result status="valid" time="0.34" steps="61148"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.15" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="49222"/></proof>
  <proof prover="11"><result status="valid" time="0.22" steps="370522"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.16" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="39875"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13733"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.17" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="42427"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="232080"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.18" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="95"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="42439"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="232926"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.19" expl="precondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.19.0" expl="precondition" proved="true">
   <transf name="inline_goal" proved="true" >
    <goal name="euler_sieve&#39;vc.19.0.0" expl="precondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="euler_sieve&#39;vc.19.0.0.0" expl="VC for euler_sieve" proved="true">
     <proof prover="9"><result status="valid" time="0.07" steps="78"/></proof>
     <proof prover="10"><result status="valid" time="0.21" steps="49528"/></proof>
     <proof prover="11"><result status="valid" time="0.10" steps="261594"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.19.0.0.1" expl="VC for euler_sieve" proved="true">
     <proof prover="9"><result status="valid" time="0.07" steps="78"/></proof>
     <proof prover="10"><result status="valid" time="0.43" steps="56334"/></proof>
     <proof prover="11"><result status="valid" time="0.10" steps="260186"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.19.0.0.2" expl="VC for euler_sieve" proved="true">
     <proof prover="9"><result status="valid" time="0.03" steps="74"/></proof>
     <proof prover="10"><result status="valid" time="0.18" steps="47301"/></proof>
     <proof prover="11"><result status="valid" time="0.08" steps="238238"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.19.0.0.3" expl="VC for euler_sieve" proved="true">
     <proof prover="2"><result status="valid" time="0.04" steps="176161"/></proof>
     <proof prover="9"><result status="valid" time="2.36" steps="337"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.20" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.20.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.20.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.07" steps="79"/></proof>
    <proof prover="10"><result status="valid" time="0.18" steps="44361"/></proof>
    <proof prover="11"><result status="valid" time="0.09" steps="233525"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.07" steps="79"/></proof>
    <proof prover="10"><result status="valid" time="0.17" steps="42533"/></proof>
    <proof prover="11"><result status="valid" time="0.22" steps="423337"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.2" expl="precondition" proved="true">
    <proof prover="10"><result status="valid" time="1.15" steps="101775"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.3" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="75"/></proof>
    <proof prover="10"><result status="valid" time="0.14" steps="39754"/></proof>
    <proof prover="11"><result status="valid" time="0.02" steps="13675"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.4" expl="precondition" proved="true">
    <transf name="unfold" proved="true" arg1="not_marked_impl_next_not_marked" arg2="in" arg3="Requires">
     <goal name="euler_sieve&#39;vc.20.0.4.0" expl="precondition" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.20.0.4.0.0" expl="precondition" proved="true">
      <transf name="assert" proved="true" arg1="(int63&#39;int nn &lt;= div (int63&#39;int (max1 t)) (int63&#39;int nn))">
       <goal name="euler_sieve&#39;vc.20.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="9"><result status="valid" time="0.11" steps="83"/></proof>
       <proof prover="11"><result status="valid" time="0.10" steps="264906"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.20.0.4.0.0.1" expl="precondition" proved="true">
       <proof prover="4"><result status="valid" time="1.21"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.20.0.5" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.07" steps="79"/></proof>
    <proof prover="10"><result status="valid" time="0.18" steps="43462"/></proof>
    <proof prover="11"><result status="valid" time="0.08" steps="233041"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.12" steps="359"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="51766"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.22" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="88"/></proof>
  <proof prover="10"><result status="valid" time="0.17" steps="42198"/></proof>
  <proof prover="11"><result status="valid" time="0.07" steps="213689"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.23" expl="assertion" proved="true">
  <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Refl,Trans,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,odd_divides,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,array63&#39;invariant,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,t&#39;invariant,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H17,H16,H15,Ensures13,H14,H13,H12,Ensures12,Ensures11,Ensures10,Ensures9,Ensures8,H11,H10,H9,H8,Requires4,Requires3,Requires2,Requires1,Requires,H7,H6,Ensures7,Ensures6,Ensures4,H5,H4,Ensures2,Ensures1,H3,Ensures,H2">
   <goal name="euler_sieve&#39;vc.23.0" expl="assertion" proved="true">
   <proof prover="3" timelimit="1"><result status="valid" time="1.32"/></proof>
   <proof prover="9"><result status="valid" time="0.03" steps="258"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.24" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="88"/></proof>
  <proof prover="10"><result status="valid" time="0.29" steps="43759"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="216743"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.25" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.25.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.07" steps="69"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.1" expl="VC for euler_sieve" proved="true">
   <proof prover="11"><result status="valid" time="0.10" steps="394098"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.2" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="1.47" steps="407"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="219038"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.3" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.10" steps="71"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.4" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.03" steps="72"/></proof>
   <proof prover="10"><result status="valid" time="0.17" steps="44751"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="219516"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.25.5" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.07" steps="71"/></proof>
   <proof prover="10"><result status="valid" time="0.23" steps="50768"/></proof>
   <proof prover="11"><result status="valid" time="0.09" steps="390425"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.26" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.26.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="1.05" steps="574"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="1.18" steps="330"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.2" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="1.13" steps="332"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.3" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.08" steps="93"/></proof>
   <proof prover="11"><result status="valid" time="0.08" steps="247190"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.4" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.93" steps="330"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.26.5" expl="VC for euler_sieve" proved="true">
   <proof prover="9"><result status="valid" time="0.75" steps="318"/></proof>
   <proof prover="10"><result status="valid" time="0.42" steps="59925"/></proof>
   <proof prover="11"><result status="valid" time="0.37" steps="794361"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.27" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.27.0" expl="postcondition" proved="true">
   <proof prover="9"><result status="valid" time="3.33" steps="536"/></proof>
   <proof prover="10"><result status="valid" time="0.47" steps="64172"/></proof>
   <proof prover="11"><result status="valid" time="0.78" steps="1334554"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.27.1" expl="postcondition" proved="true">
   <transf name="assert" proved="true" arg1="(forall j k. 2 &lt;= j &lt; (nexts t)[n] -&gt; 2 &lt;= k &lt; length (marked t) -&gt; j * k &lt;&gt; i)">
    <goal name="euler_sieve&#39;vc.27.1.0" expl="asserted formula" proved="true">
    <proof prover="9"><result status="valid" time="0.76" steps="310"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.27.1.1" expl="postcondition" proved="true">
    <proof prover="10"><result status="valid" time="0.29" steps="56724"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.28" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="34"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="38729"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13119"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.29" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="35"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="38747"/></proof>
  <proof prover="11"><result status="valid" time="0.01" steps="13126"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.30" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.15" steps="167"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.31" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="1.07" steps="621"/></proof>
  <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,divides,prime,singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,array63&#39;invariant,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H6,H5,H4,H3,H2,Ensures4,Ensures3,Ensures2,Ensures1,H,Requires2,Requires1,Requires">
   <goal name="euler_sieve&#39;vc.31.0" expl="precondition" proved="true">
   <proof prover="0"><result status="valid" time="0.03" steps="67"/></proof>
   <proof prover="9"><result status="valid" time="0.11" steps="162"/></proof>
   <proof prover="10"><result status="valid" time="0.06" steps="10137"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.32" expl="precondition" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.32.0" expl="precondition" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.32.0.0" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="32"/></proof>
    <proof prover="10"><result status="valid" time="0.22" steps="46087"/></proof>
    <proof prover="11"><result status="valid" time="0.08" steps="204021"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.32.0.1" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="32"/></proof>
    <proof prover="10"><result status="valid" time="0.20" steps="45041"/></proof>
    <proof prover="11"><result status="valid" time="0.07" steps="203975"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.32.0.2" expl="precondition" proved="true">
    <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
    <proof prover="10"><result status="valid" time="0.13" steps="38699"/></proof>
    <proof prover="11"><result status="valid" time="0.02" steps="13097"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.32.0.3" expl="precondition" proved="true">
    <transf name="case" proved="true" arg1="(mod i 2 = 0)">
     <goal name="euler_sieve&#39;vc.32.0.3.0" expl="true case (precondition)" proved="true">
     <transf name="case" proved="true" arg1="(i &lt; max - 1)">
      <goal name="euler_sieve&#39;vc.32.0.3.0.0" expl="true case (precondition)" proved="true">
      <transf name="instantiate" proved="true" arg1="Ensures1" arg2="i">
       <goal name="euler_sieve&#39;vc.32.0.3.0.0.0" expl="true case (precondition)" proved="true">
       <proof prover="10"><result status="valid" time="0.59" steps="82074"/></proof>
       </goal>
      </transf>
      </goal>
      <goal name="euler_sieve&#39;vc.32.0.3.0.1" expl="false case (true case. precondition)" proved="true">
      <proof prover="9"><result status="valid" time="0.06" steps="44"/></proof>
      <proof prover="10"><result status="valid" time="0.21" steps="45588"/></proof>
      <proof prover="11"><result status="valid" time="0.08" steps="209817"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="euler_sieve&#39;vc.32.0.3.1" expl="false case (precondition)" proved="true">
     <proof prover="9"><result status="valid" time="0.30" steps="137"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="58093"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.33" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.91" steps="811"/></proof>
  <proof prover="10"><result status="valid" time="0.55" steps="64476"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.34" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="223"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="49418"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.35" expl="assertion" proved="true">
  <transf name="case" proved="true" arg1="(mod i 2 = 0)">
   <goal name="euler_sieve&#39;vc.35.0" expl="true case (assertion)" proved="true">
   <proof prover="9"><result status="valid" time="0.31" steps="206"/></proof>
   <proof prover="10"><result status="valid" time="0.24" steps="50405"/></proof>
   <proof prover="11"><result status="valid" time="0.24" steps="491361"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.35.1" expl="false case (assertion)" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.35.1.0" expl="VC for euler_sieve" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="56"/></proof>
    <proof prover="10"><result status="valid" time="0.13" steps="40237"/></proof>
    <proof prover="11"><result status="valid" time="0.02" steps="13551"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.35.1.1" expl="VC for euler_sieve" proved="true">
    <proof prover="9"><result status="valid" time="0.03" steps="56"/></proof>
    <proof prover="10"><result status="valid" time="0.14" steps="40256"/></proof>
    <proof prover="11"><result status="valid" time="0.02" steps="13590"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.35.1.2" expl="VC for euler_sieve" proved="true">
    <proof prover="9"><result status="valid" time="1.70" steps="896"/></proof>
    <proof prover="10"><result status="valid" time="0.63" steps="85581"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.36" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="163"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="47256"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.37" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="48"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="47625"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="258745"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.38" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="52"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="47087"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="259641"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.39" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="53"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="40373"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13655"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.40" expl="loop invariant init" proved="true">
  <proof prover="7"><result status="valid" time="0.45" steps="622286"/></proof>
  <proof prover="9"><result status="valid" time="0.32" steps="320"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="49985"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.41" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="55"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="40437"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13730"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.42" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.42.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.42.0.0" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.42.0.0.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.15" steps="260854"/></proof>
     <proof prover="9"><result status="valid" time="0.05" steps="50"/></proof>
     <proof prover="10"><result status="valid" time="0.21" steps="48441"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.42.0.0.1" expl="loop invariant init" proved="true">
     <proof prover="9"><result status="valid" time="0.61" steps="180"/></proof>
     <proof prover="10"><result status="valid" time="0.26" steps="51921"/></proof>
     <proof prover="12"><result status="valid" time="1.02" steps="69870"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.1" expl="loop invariant init" proved="true">
    <proof prover="7"><result status="valid" time="0.49" steps="699293"/></proof>
    <proof prover="9"><result status="valid" time="0.99" steps="343"/></proof>
    <proof prover="10"><result status="valid" time="0.26" steps="51767"/></proof>
    <proof prover="12"><result status="valid" time="1.04" steps="69815"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.2" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.35" steps="277"/></proof>
    <proof prover="10"><result status="valid" time="0.26" steps="51586"/></proof>
    <proof prover="11"><result status="valid" time="0.50" steps="1079802"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.3" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.12" steps="156"/></proof>
    <proof prover="10"><result status="valid" time="0.25" steps="51583"/></proof>
    <proof prover="11"><result status="valid" time="0.40" steps="777590"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.4" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.42.0.4.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.17" steps="290506"/></proof>
     <proof prover="9"><result status="valid" time="0.06" steps="54"/></proof>
     <proof prover="10"><result status="valid" time="0.23" steps="48809"/></proof>
     <proof prover="12"><result status="valid" time="1.46" steps="108620"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.42.0.4.1" expl="loop invariant init" proved="true">
     <proof prover="9"><result status="valid" time="1.00" steps="512"/></proof>
     <proof prover="10"><result status="valid" time="0.31" steps="57383"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.42.0.5" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.59" steps="423"/></proof>
    <proof prover="10"><result status="valid" time="0.38" steps="64272"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.43" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="158"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="48713"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="282931"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.44" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.18" steps="196"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="48960"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.45" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="208"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="53951"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.46" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="68"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="49410"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="293137"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.47" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.20" steps="199"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="52540"/></proof>
  <proof prover="11"><result status="valid" time="0.90" steps="2049275"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.48" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="69"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="50179"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="287889"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.49" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="71"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="50689"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.50" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="78"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="51014"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="291425"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.51" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="74"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="42103"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14688"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.52" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="297"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="50629"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.53" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="189"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="50610"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.54" expl="index in array bounds" proved="true">
  <proof prover="7"><result status="valid" time="0.15" steps="659824"/></proof>
  <proof prover="9"><result status="valid" time="0.07" steps="193"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="51577"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.55" expl="index in array bounds" proved="true">
  <proof prover="7"><result status="valid" time="0.59" steps="959119"/></proof>
  <proof prover="9"><result status="valid" time="0.06" steps="201"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="51788"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.56" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.46" steps="343"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="58916"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.57" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="51849"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="279911"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.58" expl="index in array bounds" proved="true">
  <proof prover="7"><result status="valid" time="0.60" steps="993441"/></proof>
  <proof prover="9"><result status="valid" time="0.07" steps="220"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="52177"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.59" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="226"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="55284"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="318762"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.60" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="405"/></proof>
  <proof prover="10"><result status="valid" time="0.32" steps="61783"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.61" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.61.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant5">
    <goal name="euler_sieve&#39;vc.61.0.0" expl="assertion" proved="true">
    <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="(int63&#39;int p)">
     <goal name="euler_sieve&#39;vc.61.0.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="(int63&#39;int next)">
      <goal name="euler_sieve&#39;vc.61.0.0.0.0" expl="assertion" proved="true">
      <proof prover="10"><result status="valid" time="1.16" steps="121138"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.62" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.62.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.23" steps="358"/></proof>
   <proof prover="10"><result status="valid" time="0.30" steps="53128"/></proof>
   <proof prover="11"><result status="valid" time="0.42" steps="830512"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.62.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="2.12" steps="1062"/></proof>
   <proof prover="10"><result status="valid" time="0.52" steps="70250"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.62.2" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="1.58" steps="1179"/></proof>
   <proof prover="10"><result status="valid" time="0.42" steps="59333"/></proof>
   <proof prover="11"><result status="valid" time="0.43" steps="837008"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.63" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="104"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="46104"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="247289"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.64" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.30"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.65" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="2.17" steps="534"/></proof>
  <proof prover="10"><result status="valid" time="0.47" steps="62637"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.66" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="107"/></proof>
  <proof prover="10"><result status="valid" time="0.38" steps="53981"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="305629"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.67" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="109"/></proof>
  <proof prover="10"><result status="valid" time="0.57" steps="73084"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.68" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.14" steps="112"/></proof>
  <proof prover="10"><result status="valid" time="0.63" steps="80664"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.69" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.65" steps="419"/></proof>
  <proof prover="10"><result status="valid" time="0.45" steps="60273"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.70" expl="assertion" proved="true">
  <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant5">
   <goal name="euler_sieve&#39;vc.70.0" expl="assertion" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.70.0.0" expl="assertion" proved="true">
    <proof prover="9"><result status="valid" time="1.06" steps="423"/></proof>
    <proof prover="10"><result status="valid" time="2.86" steps="228209"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.70.0.1" expl="assertion" proved="true">
    <proof prover="2"><result status="valid" time="0.03" steps="178955"/></proof>
    <proof prover="9"><result status="valid" time="1.01" steps="411"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.71" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="111"/></proof>
  <proof prover="10"><result status="valid" time="0.34" steps="60769"/></proof>
  <proof prover="11"><result status="valid" time="0.30" steps="610668"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.72" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
  <proof prover="10"><result status="valid" time="0.15" steps="44198"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="27709"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.73" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="108"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="44214"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="27718"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.74" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="110"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="47081"/></proof>
  <proof prover="11"><result status="valid" time="0.30" steps="619017"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.75" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="111"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="44249"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="15729"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.76" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.76.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.76.0.0" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.76.0.0.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.80" steps="425"/></proof>
     <proof prover="10"><result status="valid" time="0.32" steps="61449"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.76.0.0.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="2.06" steps="428"/></proof>
     <proof prover="10"><result status="valid" time="0.45" steps="61098"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.1" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.76.0.1.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.73" steps="418"/></proof>
     <proof prover="10"><result status="valid" time="0.32" steps="61468"/></proof>
     <proof prover="12"><result status="valid" time="2.63" steps="124362"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.76.0.1.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.54" steps="432"/></proof>
     <proof prover="10"><result status="valid" time="0.32" steps="60616"/></proof>
     <proof prover="12"><result status="valid" time="1.27" steps="79144"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="2.34" steps="1082"/></proof>
    <proof prover="10"><result status="valid" time="0.33" steps="61805"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.84" steps="400"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="61541"/></proof>
    <proof prover="11"><result status="valid" time="0.50" steps="977794"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.4" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="1.73" steps="427"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.76.0.5" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.76.0.5.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="8"><result status="valid" time="0.26"/></proof>
     <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,Refl,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,t&#39;invariant,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H39,H38,Ensures18,H37,H36,H35,Ensures17,Ensures16,Ensures15,Ensures14,Ensures13,H34,H33,Ensures12,Assert3,Assert2,Assert1,H30,H29,Ensures11,H28,H27,H26,H25,H24,LoopInvariant9,LoopInvariant8,LoopInvariant6,LoopInvariant5,LoopInvariant4,LoopInvariant3,LoopInvariant2,Ensures10,Ensures9,H23,Ensures8,Ensures7,H22,Ensures6,H17,Ensures5,Ensures4,H16,Ensures3,Ensures2,Assert,Ensures,LoopInvariant1,LoopInvariant,H32,H31,H21,H20,H19,H18,H14,H13,H12,H11,H10,H9,H8,H7,H6,H4">
      <goal name="euler_sieve&#39;vc.76.0.5.0.0" expl="true case (loop invariant preservation)" proved="true">
      <proof prover="8"><result status="valid" time="0.02"/></proof>
      <proof prover="9"><result status="valid" time="0.02" steps="61"/></proof>
      <proof prover="10"><result status="valid" time="0.04" steps="7322"/></proof>
      <proof prover="11"><result status="valid" time="0.02" steps="21136"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="euler_sieve&#39;vc.76.0.5.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="2.09" steps="1203"/></proof>
     <proof prover="10"><result status="valid" time="0.53" steps="66214"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.77" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.71" steps="80538"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.78" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.64" steps="77271"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.79" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.47" steps="710"/></proof>
  <proof prover="10"><result status="valid" time="0.46" steps="64281"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.80" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="1.79" steps="981"/></proof>
  <proof prover="10"><result status="valid" time="0.45" steps="63931"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.81" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.81.0" expl="loop invariant preservation" proved="true">
   <proof prover="9"><result status="valid" time="2.33" steps="952"/></proof>
   <proof prover="10"><result status="valid" time="0.49" steps="65718"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.82" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="90"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="45142"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="309676"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.83" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="51228"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="314378"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.84" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="51862"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="265926"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.85" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="229"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="55035"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="320433"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.86" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="101"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.87" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="98"/></proof>
  <proof prover="10"><result status="valid" time="0.36" steps="52424"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="322829"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.88" expl="assertion" proved="true">
  <proof prover="7"><result status="valid" time="0.53" steps="818085"/></proof>
  <proof prover="9"><result status="valid" time="0.15" steps="106"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="53128"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.89" expl="loop variant decrease" proved="true">
  <proof prover="10"><result status="valid" time="0.55" steps="71283"/></proof>
  <proof prover="11"><result status="valid" time="0.43" steps="839725"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.90" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.53" steps="387"/></proof>
  <proof prover="10"><result status="valid" time="0.50" steps="67407"/></proof>
  <proof prover="11"><result status="valid" time="0.44" steps="834902"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.91" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.60" steps="402"/></proof>
  <proof prover="10"><result status="valid" time="0.59" steps="73639"/></proof>
  <proof prover="11"><result status="valid" time="0.42" steps="840410"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.92" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="352"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="53532"/></proof>
  <proof prover="11"><result status="valid" time="0.44" steps="847438"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.93" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="112"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="53517"/></proof>
  <proof prover="11"><result status="valid" time="0.53" steps="975514"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.94" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.94.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.94.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="3.16" steps="898"/></proof>
    <proof prover="10"><result status="valid" time="0.46" steps="62462"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="10"><result status="valid" time="0.32" steps="61676"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.89" steps="774"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="61470"/></proof>
    <proof prover="12"><result status="valid" time="1.64" steps="110322"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.69" steps="504"/></proof>
    <proof prover="10"><result status="valid" time="0.33" steps="61539"/></proof>
    <proof prover="11"><result status="valid" time="0.44" steps="870728"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.4" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.94.0.4.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.94.0.4.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.94.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="0.41" steps="62296"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.94.0.4.0.0.1" expl="loop invariant preservation" proved="true">
       <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
        <goal name="euler_sieve&#39;vc.94.0.4.0.0.1.0" expl="loop invariant preservation" proved="true">
        <transf name="assert" proved="true" arg1="(cnt1 &lt;= i &lt; length t_arr1)">
         <goal name="euler_sieve&#39;vc.94.0.4.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.12" steps="101"/></proof>
         <proof prover="10"><result status="valid" time="0.24" steps="53117"/></proof>
         <proof prover="11"><result status="valid" time="0.12" steps="332954"/></proof>
         </goal>
         <goal name="euler_sieve&#39;vc.94.0.4.0.0.1.0.1" expl="loop invariant preservation" proved="true">
         <proof prover="8"><result status="valid" time="4.67"/></proof>
         <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Div_mod,Div_unique,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,empty&#39;def,set&#39;def,([&lt;-])&#39;def,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H33,H32,Ensures18,H31,H30,H29,Ensures17,Ensures16,Ensures15,Ensures14,Ensures13,H28,H27,Assert2,Assert1,H24,H23,Ensures10,H22,H21,H20,H19,H18,LoopInvariant15,LoopInvariant14,LoopInvariant7,LoopInvariant6,LoopInvariant3,LoopInvariant2,Ensures9,Ensures8,H17,Ensures7,Ensures6,H16,Ensures5,H11,Ensures4,Ensures3,H10,H9,Ensures2,Ensures1,Ensures,H8,LoopInvariant1,LoopInvariant,H26,H25,H15,H14,H13,H12,H7,H6,H5,H4,H2,(==)&#39;spec3,(==)&#39;spec2,(==)&#39;spec1,(==)&#39;spec,create&#39;spec1,create&#39;spec,set&#39;spec2,set&#39;spec1,set&#39;spec,singleton&#39;spec1,singleton&#39;spec,cons&#39;spec2,cons&#39;spec1,cons&#39;spec,snoc&#39;spec2,snoc&#39;spec1,snoc&#39;spec,([..])&#39;spec1,([..])&#39;spec,(++)&#39;spec2,(++)&#39;spec1,(++)&#39;spec,Abs_le2,Abs_le1,Abs_le,Div_bound3,Div_bound2,Mod_bound3,Mod_bound2,array63&#39;invariant3,array63&#39;invariant2,array63&#39;invariant1,array63&#39;invariant,Mod_bound1,Mod_bound,Div_bound1,Div_bound,divides&#39;spec1,divides&#39;spec,even_mod21,even_mod2,even_divides1,even_divides,odd_divides1,odd_divides,div_mult_11,div_mult_1,mult_borne_sous_exp1,mult_borne_sous_exp,t&#39;invariant22,t&#39;invariant21,t&#39;invariant20,t&#39;invariant19,t&#39;invariant18,t&#39;invariant17,t&#39;invariant16,t&#39;invariant15,t&#39;invariant14,t&#39;invariant13,t&#39;invariant12,t&#39;invariant11,t&#39;invariant10,t&#39;invariant9,t&#39;invariant8,t&#39;invariant7,t&#39;invariant6,t&#39;invariant5,t&#39;invariant4,t&#39;invariant3,t&#39;invariant2,t&#39;invariant1,t&#39;invariant,Ensures12,Ensures11,Assert4,Assert3,LoopInvariant13,LoopInvariant11,LoopInvariant10,LoopInvariant9,LoopInvariant8,LoopInvariant5,LoopInvariant4,h1">
          <goal name="euler_sieve&#39;vc.94.0.4.0.0.1.0.1.0" expl="loop invariant preservation" proved="true">
          <proof prover="8"><result status="valid" time="0.01"/></proof>
          <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
          <proof prover="10"><result status="valid" time="0.04" steps="7016"/></proof>
          <proof prover="11"><result status="valid" time="0.02" steps="17554"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.94.0.5" expl="loop invariant preservation" proved="true">
    <proof prover="13" timelimit="10"><result status="valid" time="3.44" steps="42196"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.95" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.95.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.95.0.0" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(j = cnt1)">
     <goal name="euler_sieve&#39;vc.95.0.0.0" expl="true case (loop invariant preservation)" proved="true">
     <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H32,H31,Ensures17,H30,H29,H28,Ensures16,Ensures15,Ensures14,Ensures13,Ensures12,H27,H26,Ensures11,Assert3,Assert2,Assert1,H23,H22,H20,H19,H18,H17,LoopInvariant10,LoopInvariant9,LoopInvariant8,LoopInvariant7,LoopInvariant5,LoopInvariant4,LoopInvariant3,Ensures9,Ensures8,H16,Ensures7,Ensures6,H15,Ensures5,H10,H9,H8,Ensures1,Ensures,H7,Assert,LoopInvariant2,LoopInvariant1,LoopInvariant,H25,H24,H14,H13,H12,H11,H6,H4">
      <goal name="euler_sieve&#39;vc.95.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
      <proof prover="8"><result status="valid" time="0.10"/></proof>
      <proof prover="9"><result status="valid" time="0.08" steps="122"/></proof>
      <proof prover="10"><result status="valid" time="0.03" steps="10463"/></proof>
      <proof prover="11"><result status="valid" time="0.02" steps="40748"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="euler_sieve&#39;vc.95.0.0.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="2.14" steps="1229"/></proof>
     <proof prover="10"><result status="valid" time="0.47" steps="64994"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.96" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.96.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.96.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.96.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.96.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant1">
       <goal name="euler_sieve&#39;vc.96.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="split_premise_right" proved="true" >
        <goal name="euler_sieve&#39;vc.96.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
        <transf name="instantiate" proved="true" arg1="LoopInvariant6" arg2="(int63&#39;int p1)">
         <goal name="euler_sieve&#39;vc.96.0.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
         <proof prover="10"><result status="valid" time="0.84" steps="97634"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.97" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.41" steps="773"/></proof>
  <proof prover="10"><result status="valid" time="0.34" steps="63826"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.98" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.98.0" expl="loop invariant preservation" proved="true">
   <proof prover="9"><result status="valid" time="0.34" steps="630"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.99" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.99.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.99.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="1.24" steps="857"/></proof>
    <proof prover="10"><result status="valid" time="0.47" steps="65414"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.99.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.99.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="10"><result status="valid" time="0.49" steps="65139"/></proof>
    <proof prover="11"><result status="valid" time="0.58" steps="1152260"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.99.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="8"><result status="valid" time="2.81"/></proof>
    <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_le,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H24,H23,H22,Ensures17,H21,H20,H19,Ensures16,Ensures15,Ensures14,Ensures13,Ensures12,H18,H17,H16,Assert4,Assert3,Assert2,H15,Ensures10,H12,H11,H10,LoopInvariant16,LoopInvariant15,LoopInvariant13,LoopInvariant12,LoopInvariant11,LoopInvariant10,LoopInvariant9,Ensures9,Ensures8,H8,Ensures5,H6,Ensures4,Ensures3,H5,H4,Ensures2,Ensures1,Ensures,Assert,LoopInvariant8,LoopInvariant7,LoopInvariant6,LoopInvariant5,LoopInvariant4,LoopInvariant3,LoopInvariant2,LoopInvariant1,LoopInvariant,H2">
     <goal name="euler_sieve&#39;vc.99.1.1.0" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="0.33" steps="183"/></proof>
     </goal>
    </transf>
    <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Div_mod,Mod_bound,Div_unique,Div_bound,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_bound1,Mod_bound1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,even_even,odd_odd,even_2k,odd_2k1,even_mod2,divides&#39;spec,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,even_divides,odd_divides,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,div_mult_1,mult_borne_sous_exp,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,(==)&#39;spec,create&#39;spec,empty&#39;def,set&#39;spec,set&#39;def,([&lt;-])&#39;def,singleton&#39;spec,cons&#39;spec,snoc&#39;spec,([..])&#39;spec,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,(++)&#39;spec,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H24,H23,H22,Ensures17,H21,H20,H19,Ensures16,Ensures15,Ensures14,Ensures13,Ensures12,H18,H17,H16,Ensures11,Assert4,Assert3,Assert2,H15,Ensures10,H12,H11,H10,LoopInvariant16,LoopInvariant15,LoopInvariant13,LoopInvariant12,LoopInvariant11,LoopInvariant10,LoopInvariant9,Ensures9,Ensures8,H8,Ensures4,Ensures3,H5,H4,Ensures2,Ensures1,Ensures,LoopInvariant8,LoopInvariant6,LoopInvariant5,LoopInvariant4,LoopInvariant3,LoopInvariant2,LoopInvariant,H2">
     <goal name="euler_sieve&#39;vc.99.1.1.0" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="8" timelimit="1"><result status="valid" time="0.05"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.100" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="84"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="45059"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="292523"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.101" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="86"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="51049"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="297382"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.102" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="88"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="51657"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="303372"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.103" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="218"/></proof>
  <proof prover="10"><result status="valid" time="0.38" steps="54785"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="308662"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.104" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="91"/></proof>
  <proof prover="10"><result status="valid" time="0.31" steps="57998"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.105" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="52160"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="305528"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.106" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="52188"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="304201"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.107" expl="assertion" proved="true">
  <proof prover="7"><result status="valid" time="0.50" steps="760444"/></proof>
  <proof prover="9"><result status="valid" time="0.14" steps="100"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="52826"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.108" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="97"/></proof>
  <proof prover="10"><result status="valid" time="0.28" steps="55769"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="315589"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.109" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="90"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="45931"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="238539"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.110" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="98"/></proof>
  <proof prover="10"><result status="valid" time="0.27" steps="52451"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="316171"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.111" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="103"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="52711"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="316400"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.112" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="105"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="53052"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="328923"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.113" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.113.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.113.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="5.88" steps="1542"/></proof>
    <proof prover="10"><result status="valid" time="0.47" steps="63597"/></proof>
    <proof prover="12"><result status="valid" time="1.82" steps="110051"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="10"><result status="valid" time="0.31" steps="62991"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="2.23" steps="1313"/></proof>
    <proof prover="10"><result status="valid" time="0.44" steps="62785"/></proof>
    <proof prover="11"><result status="valid" time="1.22" steps="2304565"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.59" steps="384"/></proof>
    <proof prover="10"><result status="valid" time="0.46" steps="62729"/></proof>
    <proof prover="11"><result status="valid" time="0.43" steps="846080"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.4" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.113.0.4.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.113.0.4.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.113.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="0.42" steps="61609"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.113.0.4.0.0.1" expl="loop invariant preservation" proved="true">
       <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
        <goal name="euler_sieve&#39;vc.113.0.4.0.0.1.0" expl="loop invariant preservation" proved="true">
        <transf name="assert" proved="true" arg1="(cnt1 &lt;= i &lt; length t_arr1)">
         <goal name="euler_sieve&#39;vc.113.0.4.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.12" steps="94"/></proof>
         <proof prover="10"><result status="valid" time="0.23" steps="53039"/></proof>
         <proof prover="11"><result status="valid" time="0.13" steps="333605"/></proof>
         </goal>
         <goal name="euler_sieve&#39;vc.113.0.4.0.0.1.0.1" expl="loop invariant preservation" proved="true">
         <proof prover="8"><result status="valid" time="2.57"/></proof>
         <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Div_mod,Div_unique,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,empty&#39;def,set&#39;def,([&lt;-])&#39;def,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H27,H26,Ensures18,H25,H24,H23,Ensures17,Ensures16,Ensures15,Ensures14,Ensures13,H22,H21,Assert2,Assert1,H18,H17,Ensures10,H16,H15,H14,H13,H12,LoopInvariant15,LoopInvariant14,LoopInvariant7,LoopInvariant6,LoopInvariant3,LoopInvariant2,Ensures9,Ensures8,H11,Ensures7,Ensures6,H10,Ensures5,Ensures4,H9,H8,Ensures3,Ensures2,Ensures1,Ensures,LoopInvariant1,LoopInvariant,H20,H19,H7,H6,H5,H4,H2,(==)&#39;spec3,(==)&#39;spec2,(==)&#39;spec1,(==)&#39;spec,create&#39;spec1,create&#39;spec,set&#39;spec2,set&#39;spec1,set&#39;spec,singleton&#39;spec1,singleton&#39;spec,cons&#39;spec2,cons&#39;spec1,cons&#39;spec,snoc&#39;spec2,snoc&#39;spec1,snoc&#39;spec,([..])&#39;spec1,([..])&#39;spec,(++)&#39;spec2,(++)&#39;spec1,(++)&#39;spec,Abs_le2,Abs_le1,Abs_le,Div_bound3,Div_bound2,Mod_bound3,Mod_bound2,array63&#39;invariant3,array63&#39;invariant2,array63&#39;invariant1,array63&#39;invariant,Mod_bound1,Mod_bound,Div_bound1,Div_bound,divides&#39;spec1,divides&#39;spec,even_mod21,even_mod2,even_divides1,even_divides,odd_divides1,odd_divides,div_mult_11,div_mult_1,mult_borne_sous_exp1,mult_borne_sous_exp,t&#39;invariant22,t&#39;invariant21,t&#39;invariant20,t&#39;invariant19,t&#39;invariant18,t&#39;invariant17,t&#39;invariant16,t&#39;invariant15,t&#39;invariant14,t&#39;invariant13,t&#39;invariant12,t&#39;invariant11,t&#39;invariant10,t&#39;invariant9,t&#39;invariant8,t&#39;invariant7,t&#39;invariant6,t&#39;invariant5,t&#39;invariant4,t&#39;invariant3,t&#39;invariant2,t&#39;invariant1,t&#39;invariant,Ensures12,Ensures11,Assert4,Assert3,LoopInvariant13,LoopInvariant11,LoopInvariant10,LoopInvariant9,LoopInvariant8,LoopInvariant5,LoopInvariant4,h1">
          <goal name="euler_sieve&#39;vc.113.0.4.0.0.1.0.1.0" expl="loop invariant preservation" proved="true">
          <proof prover="8"><result status="valid" time="0.01"/></proof>
          <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
          <proof prover="10"><result status="valid" time="0.04" steps="7015"/></proof>
          <proof prover="11"><result status="valid" time="0.02" steps="17554"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.113.0.5" expl="loop invariant preservation" proved="true">
    <proof prover="13" timelimit="10" memlimit="4000"><result status="valid" time="2.87" steps="50685"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.114" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.114.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.114.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="ordered" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.114.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.114.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="j">
       <goal name="euler_sieve&#39;vc.114.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="case" proved="true" arg1="(j = cnt1)">
        <goal name="euler_sieve&#39;vc.114.0.0.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
        <proof prover="9"><result status="valid" time="3.14" steps="2270"/></proof>
        <proof prover="10"><result status="valid" time="0.46" steps="64412"/></proof>
        </goal>
        <goal name="euler_sieve&#39;vc.114.0.0.0.0.0.1" expl="false case (loop invariant preservation)" proved="true">
        <proof prover="9"><result status="valid" time="0.47" steps="569"/></proof>
        <proof prover="10"><result status="valid" time="0.40" steps="55530"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.115" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.115.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.115.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.115.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.115.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="case" proved="true" arg1="(i &lt; cnt1)">
       <goal name="euler_sieve&#39;vc.115.0.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
       <proof prover="9"><result status="valid" time="0.30" steps="397"/></proof>
       <proof prover="10"><result status="valid" time="0.27" steps="54486"/></proof>
       <proof prover="12"><result status="valid" time="0.92" steps="62936"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.115.0.0.0.0.1" expl="false case (loop invariant preservation)" proved="true">
       <proof prover="9"><result status="valid" time="0.17" steps="335"/></proof>
       <proof prover="10"><result status="valid" time="0.31" steps="54631"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.116" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.35" steps="538"/></proof>
  <proof prover="10"><result status="valid" time="0.48" steps="64848"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.117" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; cnt1)">
   <goal name="euler_sieve&#39;vc.117.0" expl="true case (loop invariant preservation)" proved="true">
   <proof prover="9"><result status="valid" time="1.41" steps="1235"/></proof>
   <proof prover="10"><result status="valid" time="0.47" steps="65069"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.117.1" expl="false case (loop invariant preservation)" proved="true">
   <proof prover="9"><result status="valid" time="0.14" steps="114"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.118" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.118.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.118.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="1.07" steps="860"/></proof>
    <proof prover="10"><result status="valid" time="0.48" steps="66843"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.118.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.118.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="10"><result status="valid" time="0.52" steps="66146"/></proof>
    <proof prover="11"><result status="valid" time="0.55" steps="1087856"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.118.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="7.04" steps="1246"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.119" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="75"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="51189"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="249732"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.120" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.34" steps="286"/></proof>
  <proof prover="10"><result status="valid" time="1.11" steps="119840"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.121" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.85" steps="799"/></proof>
  <proof prover="10"><result status="valid" time="1.87" steps="135681"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.122" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.38" steps="314"/></proof>
  <proof prover="10"><result status="valid" time="0.42" steps="61542"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.123" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.57" steps="78735"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.124" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.26" steps="221"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.125" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.31" steps="255"/></proof>
  <proof prover="10"><result status="valid" time="2.92" steps="312700"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.126" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="120"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="44913"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.127" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="36"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="45305"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="228530"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.128" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="40"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="44745"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="236541"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.129" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="41"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="39300"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13516"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.130" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="222"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="46978"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.131" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.02" steps="43"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="39364"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="13591"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.132" expl="loop invariant init" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.132.0" expl="loop invariant init" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.132.0.0" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.132.0.0.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.04" steps="233763"/></proof>
     <proof prover="9"><result status="valid" time="0.04" steps="44"/></proof>
     <proof prover="10"><result status="valid" time="0.21" steps="46195"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.132.0.0.1" expl="loop invariant init" proved="true">
     <proof prover="7"><result status="valid" time="0.46" steps="620479"/></proof>
     <proof prover="9"><result status="valid" time="0.52" steps="148"/></proof>
     <proof prover="10"><result status="valid" time="0.24" steps="48947"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.1" expl="loop invariant init" proved="true">
    <proof prover="7"><result status="valid" time="0.44" steps="618689"/></proof>
    <proof prover="9"><result status="valid" time="0.58" steps="267"/></proof>
    <proof prover="10"><result status="valid" time="0.24" steps="48803"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.2" expl="loop invariant init" proved="true">
    <proof prover="7"><result status="valid" time="0.44" steps="635485"/></proof>
    <proof prover="9"><result status="valid" time="0.13" steps="202"/></proof>
    <proof prover="10"><result status="valid" time="0.24" steps="48609"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.3" expl="loop invariant init" proved="true">
    <proof prover="9"><result status="valid" time="0.08" steps="124"/></proof>
    <proof prover="10"><result status="valid" time="0.25" steps="48606"/></proof>
    <proof prover="11"><result status="valid" time="0.36" steps="710843"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.4" expl="loop invariant init" proved="true">
    <transf name="assert" proved="true" arg1="(forall i. 1 &lt;= i &lt; length (arr t)[0 &lt;- 2] -&gt; (arr t)[i] = (arr t)[0 &lt;- 2][i])">
     <goal name="euler_sieve&#39;vc.132.0.4.0" expl="asserted formula" proved="true">
     <proof prover="7"><result status="valid" time="0.05" steps="259365"/></proof>
     <proof prover="9"><result status="valid" time="0.06" steps="48"/></proof>
     <proof prover="10"><result status="valid" time="0.22" steps="46563"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.132.0.4.1" expl="loop invariant init" proved="true">
     <proof prover="7"><result status="valid" time="1.66" steps="2320178"/></proof>
     <proof prover="9"><result status="valid" time="1.14" steps="607"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="54173"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.132.0.5" expl="loop invariant init" proved="true">
    <proof prover="7"><result status="valid" time="0.44" steps="650895"/></proof>
    <proof prover="9"><result status="valid" time="0.17" steps="256"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="59984"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.133" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="118"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="46346"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="257085"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.134" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="153"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="46586"/></proof>
  <proof prover="11"><result status="valid" time="0.23" steps="462578"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.135" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="166"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="50719"/></proof>
  <proof prover="12"><result status="valid" time="0.80" steps="57260"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.136" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.11" steps="56"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="47004"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="261772"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.137" expl="loop invariant init" proved="true">
  <proof prover="9"><result status="valid" time="0.18" steps="292"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="49523"/></proof>
  <proof prover="11"><result status="valid" time="0.87" steps="1854515"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.138" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="57"/></proof>
  <proof prover="10"><result status="valid" time="0.31" steps="47761"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="263815"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.139" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="59"/></proof>
  <proof prover="10"><result status="valid" time="0.20" steps="47859"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="265682"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.140" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="66"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="48616"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="267011"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.141" expl="division by zero" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="62"/></proof>
  <proof prover="10"><result status="valid" time="0.12" steps="41030"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="14549"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.142" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="242"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="48189"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.143" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="162"/></proof>
  <proof prover="10"><result status="valid" time="0.22" steps="48200"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.144" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="166"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="49162"/></proof>
  <proof prover="11"><result status="valid" time="0.48" steps="1009598"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.145" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="174"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="49373"/></proof>
  <proof prover="11"><result status="valid" time="0.59" steps="1157860"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.146" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.41" steps="281"/></proof>
  <proof prover="10"><result status="valid" time="0.28" steps="54775"/></proof>
  <proof prover="12"><result status="valid" time="0.82" steps="60292"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.147" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="82"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="49443"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="276907"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.148" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="193"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="49762"/></proof>
  <proof prover="11"><result status="valid" time="0.49" steps="1033168"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.149" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="199"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="52658"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="287849"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.150" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.28" steps="347"/></proof>
  <proof prover="10"><result status="valid" time="0.32" steps="57939"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.151" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.151.0" expl="assertion" proved="true">
   <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant5">
    <goal name="euler_sieve&#39;vc.151.0.0" expl="assertion" proved="true">
    <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="(int63&#39;int p)">
     <goal name="euler_sieve&#39;vc.151.0.0.0" expl="assertion" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant5" arg2="(int63&#39;int next)">
      <goal name="euler_sieve&#39;vc.151.0.0.0.0" expl="assertion" proved="true">
      <proof prover="10"><result status="valid" time="0.55" steps="71502"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.152" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="euler_sieve&#39;vc.152.0" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.26" steps="318"/></proof>
   <proof prover="10"><result status="valid" time="0.28" steps="50827"/></proof>
   <proof prover="11"><result status="valid" time="0.38" steps="755813"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.152.1" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="1.06" steps="892"/></proof>
   <proof prover="10"><result status="valid" time="0.36" steps="65815"/></proof>
   </goal>
   <goal name="euler_sieve&#39;vc.152.2" expl="assertion" proved="true">
   <proof prover="9"><result status="valid" time="0.46" steps="327"/></proof>
   <proof prover="10"><result status="valid" time="0.28" steps="55267"/></proof>
   <proof prover="11"><result status="valid" time="0.39" steps="761560"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.153" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="92"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="44983"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="245592"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.154" expl="precondition" proved="true">
  <proof prover="10"><result status="valid" time="5.03" steps="328106"/></proof>
  <proof prover="11"><result status="valid" time="0.57" steps="1082538"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.155" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="1.89" steps="432"/></proof>
  <proof prover="10"><result status="valid" time="0.61" steps="69372"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.156" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="95"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="51568"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="302835"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.157" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.10" steps="97"/></proof>
  <proof prover="10"><result status="valid" time="0.51" steps="68031"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.158" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.13" steps="100"/></proof>
  <proof prover="10"><result status="valid" time="0.61" steps="74888"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.159" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.54" steps="367"/></proof>
  <proof prover="10"><result status="valid" time="0.43" steps="56498"/></proof>
  <proof prover="11"><result status="valid" time="1.49" steps="2872253"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.160" expl="assertion" proved="true">
  <proof prover="9"><result status="valid" time="0.92" steps="752"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.161" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.08" steps="99"/></proof>
  <proof prover="10"><result status="valid" time="0.46" steps="57511"/></proof>
  <proof prover="11"><result status="valid" time="0.33" steps="547267"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.162" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="96"/></proof>
  <proof prover="10"><result status="valid" time="0.13" steps="43125"/></proof>
  <proof prover="11"><result status="valid" time="0.03" steps="27454"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.163" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="96"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="43141"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="27463"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.164" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="98"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="45945"/></proof>
  <proof prover="11"><result status="valid" time="0.28" steps="557472"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.165" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="99"/></proof>
  <proof prover="10"><result status="valid" time="0.14" steps="43176"/></proof>
  <proof prover="11"><result status="valid" time="0.02" steps="15590"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.166" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.166.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.166.0.0" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.166.0.0.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.50" steps="378"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="58196"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.166.0.0.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.93" steps="379"/></proof>
     <proof prover="10"><result status="valid" time="0.44" steps="58414"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.1" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.166.0.1.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.13" steps="373"/></proof>
     <proof prover="10"><result status="valid" time="0.30" steps="58215"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.166.0.1.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="9"><result status="valid" time="1.18" steps="387"/></proof>
     <proof prover="10"><result status="valid" time="0.41" steps="57146"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="2.34" steps="1144"/></proof>
    <proof prover="10"><result status="valid" time="0.41" steps="58047"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.66" steps="350"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="58043"/></proof>
    <proof prover="11"><result status="valid" time="0.43" steps="890306"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.4" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="1.48" steps="378"/></proof>
    <proof prover="10"><result status="valid" time="1.07" steps="115321"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.166.0.5" expl="loop invariant preservation" proved="true">
    <transf name="case" proved="true" arg1="(i &lt;&gt; p)">
     <goal name="euler_sieve&#39;vc.166.0.5.0" expl="true case (loop invariant preservation)" proved="true">
     <proof prover="9" timelimit="20"><result status="valid" time="11.18" steps="4243"/></proof>
     </goal>
     <goal name="euler_sieve&#39;vc.166.0.5.1" expl="false case (loop invariant preservation)" proved="true">
     <proof prover="10"><result status="valid" time="0.49" steps="60434"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.167" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="0.49" steps="62996"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.168" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="3.24" steps="2051"/></proof>
  <proof prover="10"><result status="valid" time="0.41" steps="72184"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.169" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.38" steps="592"/></proof>
  <proof prover="10"><result status="valid" time="0.33" steps="60496"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.170" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="1.71" steps="834"/></proof>
  <proof prover="10"><result status="valid" time="0.45" steps="60638"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.171" expl="loop invariant preservation" proved="true">
  <proof prover="10"><result status="valid" time="1.16" steps="130373"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.172" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="78"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="44006"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="279323"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.173" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="80"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="48851"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="283391"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.174" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="82"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="49456"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="261743"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.175" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="202"/></proof>
  <proof prover="10"><result status="valid" time="0.37" steps="52427"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="289223"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.176" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="89"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.177" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="86"/></proof>
  <proof prover="10"><result status="valid" time="0.23" steps="50009"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="291317"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.178" expl="assertion" proved="true">
  <proof prover="7"><result status="valid" time="0.33" steps="504872"/></proof>
  <proof prover="9"><result status="valid" time="0.11" steps="94"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="50475"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.179" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.94" steps="1335"/></proof>
  <proof prover="10"><result status="valid" time="0.48" steps="63985"/></proof>
  <proof prover="11"><result status="valid" time="0.39" steps="767632"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.180" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.36" steps="324"/></proof>
  <proof prover="10"><result status="valid" time="0.46" steps="63430"/></proof>
  <proof prover="11"><result status="valid" time="0.41" steps="759460"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.181" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.43" steps="324"/></proof>
  <proof prover="10"><result status="valid" time="0.50" steps="66245"/></proof>
  <proof prover="11"><result status="valid" time="0.39" steps="767485"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.182" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.09" steps="312"/></proof>
  <proof prover="10"><result status="valid" time="0.39" steps="50647"/></proof>
  <proof prover="11"><result status="valid" time="0.39" steps="776272"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.183" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="100"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="51075"/></proof>
  <proof prover="11"><result status="valid" time="0.48" steps="883271"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.184" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.184.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.184.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="3.69" steps="1043"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="59677"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="3.95" steps="1397"/></proof>
    <proof prover="10"><result status="valid" time="0.42" steps="58617"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.77" steps="683"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="59845"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.61" steps="449"/></proof>
    <proof prover="10"><result status="valid" time="0.49" steps="59296"/></proof>
    <proof prover="11"><result status="valid" time="0.43" steps="804017"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.4" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.184.0.4.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.184.0.4.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.184.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="0.36" steps="59335"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.184.0.4.0.0.1" expl="loop invariant preservation" proved="true">
       <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
        <goal name="euler_sieve&#39;vc.184.0.4.0.0.1.0" expl="loop invariant preservation" proved="true">
        <transf name="assert" proved="true" arg1="(cnt1 &lt;= i &lt; length t_arr1)">
         <goal name="euler_sieve&#39;vc.184.0.4.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.11" steps="95"/></proof>
         <proof prover="10"><result status="valid" time="0.38" steps="51890"/></proof>
         <proof prover="11"><result status="valid" time="0.12" steps="329353"/></proof>
         </goal>
         <goal name="euler_sieve&#39;vc.184.0.4.0.0.1.0.1" expl="loop invariant preservation" proved="true">
         <proof prover="9"><result status="valid" time="7.91" steps="3121"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.184.0.5" expl="loop invariant preservation" proved="true">
    <proof prover="2"><result status="valid" time="0.04" steps="181401"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.185" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.185.0" expl="loop invariant preservation" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="euler_sieve&#39;vc.185.0.0" expl="loop invariant preservation" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="euler_sieve&#39;vc.185.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="case" proved="true" arg1="(j = cnt1)">
      <goal name="euler_sieve&#39;vc.185.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
      <proof prover="10"><result status="valid" time="0.46" steps="66388"/></proof>
      </goal>
      <goal name="euler_sieve&#39;vc.185.0.0.0.1" expl="false case (loop invariant preservation)" proved="true">
      <proof prover="9"><result status="valid" time="0.48" steps="488"/></proof>
      <proof prover="10"><result status="valid" time="0.41" steps="68019"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.186" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.186.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.186.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.186.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.186.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant1">
       <goal name="euler_sieve&#39;vc.186.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="split_premise_right" proved="true" >
        <goal name="euler_sieve&#39;vc.186.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
        <transf name="instantiate" proved="true" arg1="LoopInvariant6" arg2="(int63&#39;int p1)">
         <goal name="euler_sieve&#39;vc.186.0.0.0.0.0.0.0" expl="loop invariant preservation" proved="true">
         <proof prover="10"><result status="valid" time="0.66" steps="87854"/></proof>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.187" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.34" steps="673"/></proof>
  <proof prover="10"><result status="valid" time="0.30" steps="60046"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.188" expl="loop invariant preservation" proved="true">
  <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
   <goal name="euler_sieve&#39;vc.188.0" expl="loop invariant preservation" proved="true">
   <proof prover="9"><result status="valid" time="0.33" steps="553"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.189" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.189.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.189.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="0.91" steps="770"/></proof>
    <proof prover="10"><result status="valid" time="0.44" steps="60797"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.189.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.189.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="10"><result status="valid" time="0.33" steps="60818"/></proof>
    <proof prover="11"><result status="valid" time="0.50" steps="984815"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.189.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="3.19" steps="1202"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.190" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="72"/></proof>
  <proof prover="10"><result status="valid" time="0.19" steps="43923"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="269797"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.191" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="74"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="48680"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="273814"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.192" expl="index in array bounds" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="76"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="49259"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="279776"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.193" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="191"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="52212"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="284478"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.194" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="79"/></proof>
  <proof prover="10"><result status="valid" time="0.28" steps="55084"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.195" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.05" steps="80"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="49747"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="281373"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.196" expl="integer overflow" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="82"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="49784"/></proof>
  <proof prover="11"><result status="valid" time="0.09" steps="280942"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.197" expl="assertion" proved="true">
  <proof prover="7"><result status="valid" time="0.30" steps="482544"/></proof>
  <proof prover="9"><result status="valid" time="0.16" steps="88"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="50226"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.198" expl="loop variant decrease" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="85"/></proof>
  <proof prover="10"><result status="valid" time="0.26" steps="53168"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="291350"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.199" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.03" steps="78"/></proof>
  <proof prover="10"><result status="valid" time="0.18" steps="44795"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="236924"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.200" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="86"/></proof>
  <proof prover="10"><result status="valid" time="0.24" steps="50045"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="291983"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.201" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.07" steps="91"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="50303"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="286792"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.202" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.06" steps="93"/></proof>
  <proof prover="10"><result status="valid" time="0.25" steps="50588"/></proof>
  <proof prover="11"><result status="valid" time="0.10" steps="290668"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.203" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.203.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.203.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="7"><result status="valid" time="0.52" steps="772250"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="60509"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.1" expl="loop invariant preservation" proved="true">
    <proof prover="7"><result status="valid" time="0.52" steps="772559"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="59623"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.2" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.87" steps="921"/></proof>
    <proof prover="10"><result status="valid" time="0.45" steps="60425"/></proof>
    <proof prover="11"><result status="valid" time="0.50" steps="971817"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.3" expl="loop invariant preservation" proved="true">
    <proof prover="9"><result status="valid" time="0.47" steps="340"/></proof>
    <proof prover="10"><result status="valid" time="0.30" steps="59600"/></proof>
    <proof prover="11"><result status="valid" time="0.42" steps="796733"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.4" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="inv_count" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.203.0.4.0" expl="loop invariant preservation" proved="true">
     <transf name="split_premise_right" proved="true" >
      <goal name="euler_sieve&#39;vc.203.0.4.0.0" expl="loop invariant preservation" proved="true">
      <transf name="assert" proved="true" arg1="(t_arr[cnt1 &lt;- ((2 * p1) + 1)][i] = t_arr[i])">
       <goal name="euler_sieve&#39;vc.203.0.4.0.0.0" expl="asserted formula" proved="true">
       <proof prover="10"><result status="valid" time="0.37" steps="58715"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.203.0.4.0.0.1" expl="loop invariant preservation" proved="true">
       <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
        <goal name="euler_sieve&#39;vc.203.0.4.0.0.1.0" expl="loop invariant preservation" proved="true">
        <transf name="assert" proved="true" arg1="(cnt1 &lt;= i &lt; length t_arr1)">
         <goal name="euler_sieve&#39;vc.203.0.4.0.0.1.0.0" expl="asserted formula" proved="true">
         <proof prover="9"><result status="valid" time="0.10" steps="88"/></proof>
         <proof prover="10"><result status="valid" time="0.23" steps="51812"/></proof>
         <proof prover="11"><result status="valid" time="0.12" steps="329573"/></proof>
         </goal>
         <goal name="euler_sieve&#39;vc.203.0.4.0.0.1.0.1" expl="loop invariant preservation" proved="true">
         <proof prover="8"><result status="valid" time="2.69"/></proof>
         <transf name="remove" proved="true" arg1="zero1,one1,(-),(&gt;),(&lt;=),(&gt;=),abs,int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,zero,one,even,odd,divides,prime,([]),singleton,cons,snoc,(++),exchange,inv_nexts,all_eliminated_marked,all_eliminated_marked_partial,not_marked_impl_next_not_marked,is_copy,not_marked_impl_next_not_marked_partial,all_primes,all_multiples_marked,previously_marked_multiples,only_multiples_marked,prime_multiples_marked,inv_remove_products,ordered,all_inf_or_eq,inv_count,Assoc1,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm1,Assoc,Mul_distr_l,Mul_distr_r,Comm,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Div_mod,Div_unique,Mod_1,Div_1,Div_inf,Div_inf_neg,Mod_0,Div_1_left,Div_minus1_left,Mod_1_left,Mod_minus1_left,Div_mult,Mod_mult,Div_mod1,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_11,Mod_11,Div_inf1,Mod_inf,Div_mult1,Mod_mult1,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,even_or_odd,even_not_odd,odd_not_even,even_odd,odd_even,even_even,odd_odd,even_2k,odd_2k1,divides_refl,divides_1_n,divides_0,divides_left,divides_right,divides_oppr,divides_oppl,divides_oppr_rev,divides_oppl_rev,divides_plusr,divides_minusr,divides_multl,divides_multr,divides_factorl,divides_factorr,divides_n_1,divides_antisym,divides_trans,divides_bounds,mod_divides_euclidean,divides_mod_euclidean,mod_divides_computer,divides_mod_computer,not_prime_1,prime_2,prime_3,prime_divisors,small_divisors,even_prime,odd_prime,mult_croissance_locale,mult_croissance,comp_mult_2,div_croissance_locale1,div_croissance1,div_croissance_locale2,div_croissance2,sq_ineq,divides_div,divides_inf,not_prime_divider_limits,no_prod_impl_no_divider,not_prime_impl_divisor_under_sqrt,length_nonnegative,empty&#39;def,set&#39;def,([&lt;-])&#39;def,([..])&#39;def,([_..])&#39;def,([.._])&#39;def,exchange_set,conservation_all_eliminated_marked_on_marked_change,conservation_all_eliminated_marked_on_nexts_change,conservation_inv_arr_on_mark,conservation_inv_arr_on_jump,multiples_of_marked_are_marked,prev_and_new_impl_all_multiples_marked,conservation_only_multiples_marked,conservation_previously_marked_multiples,conservation_previously_marked_multiples_on_marked_change,conservation_not_marked_impl_next_not_marked,unchanged_other_elements,previously_marked_multiples_impl_prime,only_multiples_marked_impl_not_marked,H24,H23,Ensures16,Ensures15,Ensures14,Ensures13,H22,H21,Assert2,Assert1,H18,H17,Ensures10,H16,H15,H14,H13,H12,LoopInvariant15,LoopInvariant14,LoopInvariant7,LoopInvariant6,LoopInvariant3,LoopInvariant2,Ensures9,Ensures8,H11,Ensures7,Ensures6,H10,Ensures5,Ensures4,H9,H8,Ensures3,Ensures2,Ensures1,Ensures,LoopInvariant1,LoopInvariant,H20,H19,H7,H6,H5,H4,H2,(==)&#39;spec3,(==)&#39;spec2,(==)&#39;spec1,(==)&#39;spec,create&#39;spec1,create&#39;spec,set&#39;spec2,set&#39;spec1,set&#39;spec,singleton&#39;spec1,singleton&#39;spec,cons&#39;spec2,cons&#39;spec1,cons&#39;spec,snoc&#39;spec2,snoc&#39;spec1,snoc&#39;spec,([..])&#39;spec1,([..])&#39;spec,(++)&#39;spec2,(++)&#39;spec1,(++)&#39;spec,Abs_le2,Abs_le1,Abs_le,Div_bound3,Div_bound2,Mod_bound3,Mod_bound2,array63&#39;invariant3,array63&#39;invariant2,array63&#39;invariant1,array63&#39;invariant,Mod_bound1,Mod_bound,Div_bound1,Div_bound,divides&#39;spec1,divides&#39;spec,even_mod21,even_mod2,even_divides1,even_divides,odd_divides1,odd_divides,div_mult_11,div_mult_1,mult_borne_sous_exp1,mult_borne_sous_exp,t&#39;invariant22,t&#39;invariant21,t&#39;invariant20,t&#39;invariant19,t&#39;invariant18,t&#39;invariant17,t&#39;invariant16,t&#39;invariant15,t&#39;invariant14,t&#39;invariant13,t&#39;invariant12,t&#39;invariant11,t&#39;invariant10,t&#39;invariant9,t&#39;invariant8,t&#39;invariant7,t&#39;invariant6,t&#39;invariant5,t&#39;invariant4,t&#39;invariant3,t&#39;invariant2,t&#39;invariant1,t&#39;invariant,Ensures12,Ensures11,Assert4,Assert3,LoopInvariant13,LoopInvariant11,LoopInvariant10,LoopInvariant9,LoopInvariant8,LoopInvariant5,LoopInvariant4,h1">
          <goal name="euler_sieve&#39;vc.203.0.4.0.0.1.0.1.0" expl="loop invariant preservation" proved="true">
          <proof prover="8"><result status="valid" time="0.01"/></proof>
          <proof prover="9"><result status="valid" time="0.02" steps="30"/></proof>
          <proof prover="10"><result status="valid" time="0.03" steps="7002"/></proof>
          <proof prover="11"><result status="valid" time="0.02" steps="17481"/></proof>
          </goal>
         </transf>
         </goal>
        </transf>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="euler_sieve&#39;vc.203.0.5" expl="loop invariant preservation" proved="true">
    <proof prover="7" timelimit="1"><result status="valid" time="0.52" steps="776781"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.204" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.204.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.204.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="ordered" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.204.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.204.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="instantiate" proved="true" arg1="Hinst" arg2="j">
       <goal name="euler_sieve&#39;vc.204.0.0.0.0.0" expl="loop invariant preservation" proved="true">
       <transf name="case" proved="true" arg1="(j = cnt1)">
        <goal name="euler_sieve&#39;vc.204.0.0.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
        <proof prover="9"><result status="valid" time="1.19" steps="850"/></proof>
        <proof prover="10"><result status="valid" time="0.45" steps="61106"/></proof>
        </goal>
        <goal name="euler_sieve&#39;vc.204.0.0.0.0.0.1" expl="false case (loop invariant preservation)" proved="true">
        <proof prover="9"><result status="valid" time="0.26" steps="365"/></proof>
        <proof prover="10"><result status="valid" time="0.26" steps="52581"/></proof>
        </goal>
       </transf>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.205" expl="loop invariant preservation" proved="true">
  <transf name="inline_goal" proved="true" >
   <goal name="euler_sieve&#39;vc.205.0" expl="loop invariant preservation" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="euler_sieve&#39;vc.205.0.0" expl="loop invariant preservation" proved="true">
    <transf name="unfold" proved="true" arg1="all_inf_or_eq" arg2="in" arg3="LoopInvariant7">
     <goal name="euler_sieve&#39;vc.205.0.0.0" expl="loop invariant preservation" proved="true">
     <transf name="instantiate" proved="true" arg1="LoopInvariant7" arg2="i">
      <goal name="euler_sieve&#39;vc.205.0.0.0.0" expl="loop invariant preservation" proved="true">
      <transf name="case" proved="true" arg1="(i &lt; cnt1)">
       <goal name="euler_sieve&#39;vc.205.0.0.0.0.0" expl="true case (loop invariant preservation)" proved="true">
       <proof prover="9"><result status="valid" time="0.13" steps="418"/></proof>
       <proof prover="10"><result status="valid" time="0.26" steps="51930"/></proof>
       <proof prover="12"><result status="valid" time="1.29" steps="79843"/></proof>
       </goal>
       <goal name="euler_sieve&#39;vc.205.0.0.0.0.1" expl="false case (loop invariant preservation)" proved="true">
       <proof prover="9"><result status="valid" time="0.18" steps="305"/></proof>
       <proof prover="10"><result status="valid" time="0.30" steps="51984"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.206" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="0.18" steps="462"/></proof>
  <proof prover="10"><result status="valid" time="0.32" steps="61313"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.207" expl="loop invariant preservation" proved="true">
  <proof prover="9"><result status="valid" time="1.34" steps="961"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.208" expl="loop invariant preservation" proved="true">
  <transf name="case" proved="true" arg1="(i &lt; 2 * p1 + 1)">
   <goal name="euler_sieve&#39;vc.208.0" expl="true case (loop invariant preservation)" proved="true">
   <transf name="instantiate" proved="true" arg1="LoopInvariant9" arg2="i">
    <goal name="euler_sieve&#39;vc.208.0.0" expl="true case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="0.99" steps="1104"/></proof>
    <proof prover="10"><result status="valid" time="0.32" steps="63074"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="euler_sieve&#39;vc.208.1" expl="false case (loop invariant preservation)" proved="true">
   <transf name="case" proved="true" arg1="(i = 2 * p1 + 1)">
    <goal name="euler_sieve&#39;vc.208.1.0" expl="false case (true case. loop invariant preservation)" proved="true">
    <proof prover="10"><result status="valid" time="0.46" steps="61887"/></proof>
    <proof prover="11"><result status="valid" time="0.47" steps="958489"/></proof>
    </goal>
    <goal name="euler_sieve&#39;vc.208.1.1" expl="false case (loop invariant preservation)" proved="true">
    <proof prover="9"><result status="valid" time="2.62" steps="1080"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="euler_sieve&#39;vc.209" expl="precondition" proved="true">
  <proof prover="9"><result status="valid" time="0.04" steps="63"/></proof>
  <proof prover="10"><result status="valid" time="0.21" steps="48765"/></proof>
  <proof prover="11"><result status="valid" time="0.08" steps="244807"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.210" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.33" steps="390"/></proof>
  <proof prover="10"><result status="valid" time="0.95" steps="110392"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.211" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="1.29" steps="1013"/></proof>
  <proof prover="10"><result status="valid" time="1.29" steps="118710"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.212" expl="postcondition" proved="true">
  <proof prover="9"><result status="valid" time="0.36" steps="264"/></proof>
  <proof prover="10"><result status="valid" time="0.28" steps="58008"/></proof>
  </goal>
  <goal name="euler_sieve&#39;vc.213" expl="postcondition" proved="true">
  <proof prover="10"><result status="valid" time="0.91" steps="118239"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
