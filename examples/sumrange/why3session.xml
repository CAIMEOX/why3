<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="8">
<prover id="0" name="Alt-Ergo" version="2.0.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Alt-Ergo" version="2.3.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC4" version="1.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="CVC4" version="1.7" timelimit="1" steplimit="0" memlimit="1000"/>
<file proved="true">
<path name=".."/><path name="sumrange.mlw"/>
<theory name="Simple" proved="true">
 <goal name="VC query" expl="VC for query" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="VC query.0" expl="loop invariant init" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="10059"/></proof>
  </goal>
  <goal name="VC query.1" expl="index in array bounds" proved="true">
  <proof prover="3"><result status="valid" time="0.01" steps="13823"/></proof>
  </goal>
  <goal name="VC query.2" expl="loop invariant preservation" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="12902"/></proof>
  </goal>
  <goal name="VC query.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.00" steps="8934"/></proof>
  </goal>
  <goal name="VC query.4" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="8901"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="ExtraLemmas" proved="true">
 <goal name="sum_set_slice" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sum_set_slice.0" proved="true">
  <transf name="assert" proved="true" arg1="(sum s i j = sum s i k + s[k] + sum s (k+1) j)">
   <goal name="sum_set_slice.0.0" expl="asserted formula" proved="true">
   <proof prover="4"><result status="valid" time="0.10" steps="29146"/></proof>
   </goal>
   <goal name="sum_set_slice.0.1" proved="true">
   <transf name="assert" proved="true" arg1="(sum s[k&lt;-v] i j = sum s[k&lt;-v] i k + v + sum s[k&lt;-v] (k+1) j)">
    <goal name="sum_set_slice.0.1.0" expl="asserted formula" proved="true">
    <proof prover="4"><result status="valid" time="0.17" steps="48704"/></proof>
    </goal>
    <goal name="sum_set_slice.0.1.1" proved="true">
    <proof prover="4"><result status="valid" time="0.10" steps="25789"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="CumulativeArray" proved="true">
 <goal name="VC create" expl="VC for create" proved="true">
 <proof prover="1"><result status="valid" time="0.90" steps="1386"/></proof>
 </goal>
 <goal name="VC query" expl="VC for query" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC query.0" expl="index in array bounds" proved="true">
  <proof prover="4"><result status="valid" time="0.05" steps="14319"/></proof>
  </goal>
  <goal name="VC query.1" expl="index in array bounds" proved="true">
  <proof prover="4"><result status="valid" time="0.05" steps="14338"/></proof>
  </goal>
  <goal name="VC query.2" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.30" steps="75997"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC update" expl="VC for update" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC update.0" expl="index in array bounds" proved="true">
  <proof prover="4"><result status="valid" time="0.05" steps="14305"/></proof>
  </goal>
  <goal name="VC update.1" expl="index in array bounds" proved="true">
  <proof prover="4"><result status="valid" time="0.05" steps="14335"/></proof>
  </goal>
  <goal name="VC update.2" expl="index in array bounds" proved="true">
  <proof prover="4"><result status="valid" time="0.05" steps="14318"/></proof>
  </goal>
  <goal name="VC update.3" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.22" steps="430"/></proof>
  </goal>
  <goal name="VC update.4" expl="loop invariant init" proved="true">
  <proof prover="4" timelimit="5"><result status="valid" time="0.10" steps="35584"/></proof>
  </goal>
  <goal name="VC update.5" expl="index in array bounds" proved="true">
  <proof prover="4"><result status="valid" time="0.05" steps="16015"/></proof>
  </goal>
  <goal name="VC update.6" expl="index in array bounds" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="16015"/></proof>
  </goal>
  <goal name="VC update.7" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.11" steps="22269"/></proof>
  </goal>
  <goal name="VC update.8" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.16" steps="24261"/></proof>
  </goal>
  <goal name="VC update.9" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="14898"/></proof>
  </goal>
  <goal name="VC update.10" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="14178"/></proof>
  </goal>
  <goal name="VC update.11" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="14207"/></proof>
  </goal>
  <goal name="VC update.12" expl="out of loop bounds" proved="true">
  <proof prover="4"><result status="valid" time="0.05" steps="13426"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="CumulativeTree" proved="true">
 <goal name="VC tree_of_array" expl="VC for tree_of_array" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC tree_of_array.0" expl="index in array bounds" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="17277"/></proof>
  </goal>
  <goal name="VC tree_of_array.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="11451"/></proof>
  </goal>
  <goal name="VC tree_of_array.2" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="14430"/></proof>
  </goal>
  <goal name="VC tree_of_array.3" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="12249"/></proof>
  </goal>
  <goal name="VC tree_of_array.4" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="12354"/></proof>
  </goal>
  <goal name="VC tree_of_array.5" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.03" steps="12446"/></proof>
  </goal>
  <goal name="VC tree_of_array.6" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="12544"/></proof>
  </goal>
  <goal name="VC tree_of_array.7" expl="assertion" proved="true">
  <transf name="destruct_term" proved="true" arg1="l">
   <goal name="VC tree_of_array.7.0" expl="assertion" proved="true">
   <transf name="destruct_term" proved="true" arg1="r">
    <goal name="VC tree_of_array.7.0.0" expl="assertion" proved="true">
    <proof prover="4"><result status="valid" time="0.11" steps="25247"/></proof>
    </goal>
    <goal name="VC tree_of_array.7.0.1" expl="assertion" proved="true">
    <proof prover="4"><result status="valid" time="0.17" steps="17519"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC tree_of_array.7.1" expl="assertion" proved="true">
   <transf name="destruct_term" proved="true" arg1="r">
    <goal name="VC tree_of_array.7.1.0" expl="assertion" proved="true">
    <proof prover="4"><result status="valid" time="0.11" steps="24232"/></proof>
    </goal>
    <goal name="VC tree_of_array.7.1.1" expl="assertion" proved="true">
    <proof prover="4"><result status="valid" time="0.11" steps="23400"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="VC tree_of_array.8" expl="assertion" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="15048"/></proof>
  </goal>
  <goal name="VC tree_of_array.9" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.04" steps="112"/></proof>
  </goal>
  <goal name="VC tree_of_array.10" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="12773"/></proof>
  </goal>
  <goal name="VC tree_of_array.11" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.05" steps="13026"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC create" expl="VC for create" proved="true">
 <proof prover="3"><result status="valid" time="0.02" steps="12361"/></proof>
 </goal>
 <goal name="VC query_aux" expl="VC for query_aux" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="VC query_aux.0" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.05" steps="14250"/></proof>
  </goal>
  <goal name="VC query_aux.1" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="13914"/></proof>
  </goal>
  <goal name="VC query_aux.2" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.05" steps="14142"/></proof>
  </goal>
  <goal name="VC query_aux.3" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.05" steps="14320"/></proof>
  </goal>
  <goal name="VC query_aux.4" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.05" steps="14390"/></proof>
  </goal>
  <goal name="VC query_aux.5" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="14320"/></proof>
  </goal>
  <goal name="VC query_aux.6" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.05" steps="14329"/></proof>
  </goal>
  <goal name="VC query_aux.7" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.04" steps="14408"/></proof>
  </goal>
  <goal name="VC query_aux.8" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.05" steps="14350"/></proof>
  </goal>
  <goal name="VC query_aux.9" expl="variant decrease" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="14329"/></proof>
  </goal>
  <goal name="VC query_aux.10" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.06" steps="14343"/></proof>
  </goal>
  <goal name="VC query_aux.11" expl="precondition" proved="true">
  <proof prover="4"><result status="valid" time="0.05" steps="14237"/></proof>
  </goal>
  <goal name="VC query_aux.12" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC query_aux.12.0" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.04" steps="22970"/></proof>
   </goal>
   <goal name="VC query_aux.12.1" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.04" steps="16408"/></proof>
   </goal>
   <goal name="VC query_aux.12.2" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.03" steps="11970"/></proof>
   </goal>
   <goal name="VC query_aux.12.3" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.07" steps="11985"/></proof>
   </goal>
   <goal name="VC query_aux.12.4" expl="postcondition" proved="true">
   <proof prover="4"><result status="valid" time="0.08" steps="18949"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC query" expl="VC for query" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="VC query.0" expl="VC for query" proved="true">
  <transf name="destruct_term" proved="true" arg1="t">
   <goal name="VC query.0.0" expl="VC for query" proved="true">
   <proof prover="3"><result status="valid" time="0.03" steps="16241"/></proof>
   </goal>
   <goal name="VC query.0.1" expl="VC for query" proved="true">
   <proof prover="3"><result status="valid" time="0.04" steps="14846"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="is_tree_for_frame" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="is_tree_for_frame.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="is_tree_for_frame.0.0" proved="true">
   <proof prover="4"><result status="valid" time="0.22" steps="49480"/></proof>
   </goal>
   <goal name="is_tree_for_frame.0.1" proved="true">
   <proof prover="4"><result status="valid" time="0.24" steps="52737"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC update_aux" expl="VC for update_aux" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="VC update_aux.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="13749"/></proof>
  </goal>
  <goal name="VC update_aux.1" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="14408"/></proof>
  </goal>
  <goal name="VC update_aux.2" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="13961"/></proof>
  </goal>
  <goal name="VC update_aux.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="14059"/></proof>
  </goal>
  <goal name="VC update_aux.4" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="16702"/></proof>
  </goal>
  <goal name="VC update_aux.5" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="17490"/></proof>
  </goal>
  <goal name="VC update_aux.6" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="14419"/></proof>
  </goal>
  <goal name="VC update_aux.7" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="13983"/></proof>
  </goal>
  <goal name="VC update_aux.8" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="14158"/></proof>
  </goal>
  <goal name="VC update_aux.9" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="17506"/></proof>
  </goal>
  <goal name="VC update_aux.10" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="16784"/></proof>
  </goal>
  <goal name="VC update_aux.11" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="VC update_aux.11.0" expl="VC for update_aux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC update_aux.11.0.0" expl="VC for update_aux" proved="true">
    <proof prover="4"><result status="valid" time="0.10" steps="18940"/></proof>
    </goal>
    <goal name="VC update_aux.11.0.1" expl="VC for update_aux" proved="true">
    <proof prover="4"><result status="valid" time="0.04" steps="14249"/></proof>
    </goal>
    <goal name="VC update_aux.11.0.2" expl="VC for update_aux" proved="true">
    <proof prover="4"><result status="valid" time="0.05" steps="14274"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC update_aux.11.1" expl="VC for update_aux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC update_aux.11.1.0" expl="VC for update_aux" proved="true">
    <proof prover="4"><result status="valid" time="0.06" steps="12620"/></proof>
    </goal>
    <goal name="VC update_aux.11.1.1" expl="VC for update_aux" proved="true">
    <proof prover="4"><result status="valid" time="0.06" steps="12887"/></proof>
    </goal>
    <goal name="VC update_aux.11.1.2" expl="VC for update_aux" proved="true">
    <proof prover="4"><result status="valid" time="0.06" steps="12883"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC update_aux.11.2" expl="VC for update_aux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC update_aux.11.2.0" expl="VC for update_aux" proved="true">
    <proof prover="4"><result status="valid" time="0.06" steps="12607"/></proof>
    </goal>
    <goal name="VC update_aux.11.2.1" expl="VC for update_aux" proved="true">
    <proof prover="4"><result status="valid" time="0.06" steps="12887"/></proof>
    </goal>
    <goal name="VC update_aux.11.2.2" expl="VC for update_aux" proved="true">
    <proof prover="4"><result status="valid" time="0.06" steps="12883"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="VC update_aux.11.3" expl="VC for update_aux" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="VC update_aux.11.3.0" expl="VC for update_aux" proved="true">
    <proof prover="4"><result status="valid" time="0.13" steps="19374"/></proof>
    </goal>
    <goal name="VC update_aux.11.3.1" expl="VC for update_aux" proved="true">
    <proof prover="4" timelimit="5"><result status="valid" time="0.26" steps="45781"/></proof>
    </goal>
    <goal name="VC update_aux.11.3.2" expl="VC for update_aux" proved="true">
    <proof prover="4"><result status="valid" time="0.32" steps="53918"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="VC update" expl="VC for update" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="VC update.0" expl="VC for update" proved="true">
  <transf name="destruct_term" proved="true" arg1="t">
   <goal name="VC update.0.0" expl="VC for update" proved="true">
   <proof prover="3"><result status="valid" time="0.03" steps="20903"/></proof>
   </goal>
   <goal name="VC update.0.1" expl="VC for update" proved="true">
   <proof prover="3"><result status="valid" time="0.04" steps="20130"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="depth_min" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="depth_min.0" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="13930"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC depth_is_log" expl="VC for depth_is_log" proved="true">
 <proof prover="0"><result status="valid" time="0.77" steps="1043"/></proof>
 </goal>
 <goal name="VC update_aux_complexity" expl="VC for update_aux_complexity" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="VC update_aux_complexity.0" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="15032"/></proof>
  </goal>
  <goal name="VC update_aux_complexity.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="14171"/></proof>
  </goal>
  <goal name="VC update_aux_complexity.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.12" steps="32853"/></proof>
  </goal>
  <goal name="VC update_aux_complexity.3" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="15757"/></proof>
  </goal>
  <goal name="VC update_aux_complexity.4" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="15251"/></proof>
  </goal>
  <goal name="VC update_aux_complexity.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="15356"/></proof>
  </goal>
  <goal name="VC update_aux_complexity.6" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="18060"/></proof>
  </goal>
  <goal name="VC update_aux_complexity.7" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="18972"/></proof>
  </goal>
  <goal name="VC update_aux_complexity.8" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="19599"/></proof>
  </goal>
  <goal name="VC update_aux_complexity.9" expl="postcondition" proved="true">
  <proof prover="4" timelimit="5"><result status="valid" time="0.20" steps="36699"/></proof>
  </goal>
  <goal name="VC update_aux_complexity.10" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="15768"/></proof>
  </goal>
  <goal name="VC update_aux_complexity.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="15273"/></proof>
  </goal>
  <goal name="VC update_aux_complexity.12" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="15455"/></proof>
  </goal>
  <goal name="VC update_aux_complexity.13" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="18988"/></proof>
  </goal>
  <goal name="VC update_aux_complexity.14" expl="assertion" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="18142"/></proof>
  </goal>
  <goal name="VC update_aux_complexity.15" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="19692"/></proof>
  </goal>
  <goal name="VC update_aux_complexity.16" expl="postcondition" proved="true">
  <proof prover="4"><result status="valid" time="0.18" steps="35993"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="VC query_aux_complexity" expl="VC for query_aux_complexity" proved="true">
 <transf name="split_goal_right" proved="true" >
  <goal name="VC query_aux_complexity.0" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="14561"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.1" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="17404"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="14768"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.06" steps="18148"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.4" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="16112"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.5" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="15600"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.6" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="15804"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.7" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="17578"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.8" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="13478"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.9" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="16183"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.10" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="15680"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.11" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="15955"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.12" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="17695"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.13" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.02" steps="13504"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.14" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.05" steps="16181"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.15" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="15678"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.16" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="15987"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.17" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="16383"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.18" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="15847"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.19" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.04" steps="16094"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.20" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.03" steps="18243"/></proof>
  </goal>
  <goal name="VC query_aux_complexity.21" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.06" steps="20483"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
</file>
</why3session>
