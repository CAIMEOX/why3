
module Char
  use int.Int
  use mach.int.Byte

  type char = byte

  function code (c: char): int = byte'int c

  function chr (n: int): char

  axiom code_chr: forall n. 0 <= n < 256 -> code (chr n) = n

  let chr (n: int): char
    requires { 0 <= n < 256 }
    ensures  { result = chr n }
  = of_int n

  lemma chr_code: forall c. chr (code c) = c

end

module String
  use int.Int
  use int.MinMax
  use Char
  use seq.Seq as Seq
  use seq.FreeMonoid

  type cstring = Seq.seq char

  let function empty: cstring = Seq.empty

  let function length (s: cstring) : int = Seq.length s

  lemma length_nonnegative: forall s. 0 <= length s

  function get (s: cstring) (i: int): char = Seq.get s i
  function ([]) (s: cstring) (i: int): char = get s i

  let get (s: cstring) (i: int): char
    requires { 0 <= i < length s }
    ensures  { result = s[i] }
  = Seq.get s i

  let ([]) (s: cstring) (i: int) : char
    requires { 0 <= i < length s }
    ensures  { result = s[i] }
  = get s i

  let predicate (==) (s1 s2: cstring)
    ensures { result <-> length s1 = length s2 &&
              forall i: int. 0 <= i < length s1 -> s1[i] = s2[i] }
    ensures { result -> s1 = s2 }
  = Seq.(s1 == s2)

  let function make (len: int) (c: char): cstring
    requires { 0 <= len }
    ensures  { length result = len }
    ensures  { forall i. 0 <= i < len -> result[i] = c }
  = Seq.create len (fun _ -> c)

  let function init (len: int) (f: int -> char): cstring
    requires { 0 <= len }
    ensures  { length result = len }
    ensures  { forall i. 0 <= i < len -> result[i] = f i }
  = Seq.create len f

  let function sub (s: cstring) (i: int) (j: int): cstring
    requires { 0 <= i <= j <= length s }
    ensures  { length result = j - i }
    ensures  { forall k. 0 <= k < j - i -> result[k] = s[i + k] }
  = Seq.(s[i..j])

  let function concat (s1 s2: cstring): cstring
    ensures { result = Seq.(s1 ++ s2) }
  = Seq.(s1 ++ s2)

  let rec function map (f: char -> char) (s: cstring): cstring
    ensures { length result = length s }
    ensures { forall i. 0 <= i < length result -> result[i] = f s[i] }
  = variant { length s }
    if s == empty then empty else
      Seq.cons (f s[0]) (map f (sub s 1 (length s)))

  (* function index_from (j: int) (s: cstring) (c: char): int *)
  (* = if j < length s || j >= length s then -1 else *)
  (*     if s[j] = c then j else *)
  (*       index_from (j+1) s c *)

  exception Not_found

  let rec index_from (j: int) (s: cstring) (c: char): int
    requires { 0 <= j <= length s }
    ensures { s[result] = c }
    raises  { Not_found -> forall i. j <= i < length s -> s[i] <> c }
  = variant { length s - j }
    if j = length s then raise Not_found else
      if Byte.(s[j] = c) then j else
        index_from (j+1) s c

  let index (s: cstring) (c: char): int
    ensures { s[result] = c }
    raises  { Not_found -> forall i. 0 <= i < length s -> s[i] <> c }
  = index_from 0 s c

  use seq.Mem

  let rec predicate contains (s: cstring) (c: char)
    ensures { result <-> mem c s }
  = variant { length s }
    if s == empty then false else
      if Byte.(s[0] = c) then true else
        contains (sub s 1 (length s)) c

  (* Do we need Sys.max_string_length? *)

end

module OCaml

  use int.Int
  use mach.int.Int63
  use String
  use Char

  (* In OCaml max_string_length is 144_115_188_075_855_863 *)

  val get (s: cstring) (i: int63) : char
    requires { 0 <= i < length s }
    ensures  { result = get s i }

  let ([]) (s: cstring) (i: int63) : char
    requires { 0 <= i < length s }
    ensures  { result = get s i }
  = get s i

  val code (c: char) : int63
    ensures { result = code c }

  val chr (n: int63) : char
    requires { 0 <= n < 256 }
    ensures  { result = chr n }

  val partial length (s: cstring) : int63
    ensures { result = length s }

  val sub (s: cstring) (start: int63) (len: int63) : cstring
    requires { 0 <= start <= length s }
    requires { 0 <= len <= length s - start }
    ensures  { result = sub s start len }

  val make (size: int63) (v: char) : cstring
    requires { 0 <= size }
    ensures  { result = make size v }

end

module StringBuffer

  use int.Int
  use mach.int.Int63
  use String
  use Char
  use seq.Seq as Seq

  type buffer = abstract {
    mutable str: cstring;
  }
  meta coercion function str

  val create (_: int63) : buffer
    ensures { result.str = empty }

  val length (b: buffer) : int63
    ensures { result = length b.str }

  val contents (b: buffer) : cstring
    ensures { result = b.str }

  val clear (b: buffer) : unit
    writes  { b }
    ensures { b.str = empty }

  val reset (b: buffer) : unit
    writes  { b }
    ensures { b.str = empty }

  val sub (b: buffer) (ofs len: int63) : cstring
    requires { 0 <= ofs /\ 0 <= len /\ ofs + len <= length b.str }
    ensures  { result = sub b.str ofs len }

  val add_char (b: buffer) (c: char) : unit
    writes   { b }
    ensures  { b.str = concat (old b.str) (Seq.singleton c) }

  val add_string (b: buffer) (s: cstring) : unit
    writes   { b }
    ensures  { b.str = concat (old b.str) s }

  val truncate (b: buffer) (n: int63) : unit
    requires { 0 <= n <= length b.str }
    writes   { b }
    ensures  { b.str = sub (old b.str) 0 n }

end