include ../../share/Makefile.config

WHY3 = ../../bin/why3.$(OCAMLBEST)

DEBUG_ON=--debug extraction --debug java_extraction

CLASSNAMES=\
  Recursive \
  ExceptionCatch \
  ExceptionThrow \
  Exception1 Exception2 \
  RecursiveRecord \
  fr.labri.AnInterface \
  AnImplementation \
  SimpleClass \
  MaxIntegerTest \
  fr.lri.whyml2java.SimpleClass \
  fr.labri.whyml2java.DependantClass \
  ForLoop \
  AllAreZeros \
  EnumClass \
  IfThenElse \
  Return1  Return2  Return3 \
  ErrorMissingConstructor \
  IgnoreRes \
  ${dummy}


CLASSPATHS=$(subst .,/,${CLASSNAMES})

JAVA_GENERATED_FILES=$(CLASSPATHS:%=generated/%.java)
CLASS_FILES=$(JAVA_GENERATED_FILES:%.java=%.class)
SUCCESS_CLASS_FILES=$(JAVA_GENERATED_FILES:%.java=%.class)

WHY3_EXTRACT_JAVA=\
  ${WHY3} ${DEBUG_${DEBUG_MODE}} extract -D java -L . --modular --recursive

WHY3_CHECK=${WHY3} prove -L .

GENERATED_FILES= \
  ${JAVA_GENERATED_FILES} \
  ${JAVA_GENERATED_FILES:%.java=%.java.bak} \
  ${CLASS_FILES} \
  ${JAVA_GENERATED_FILES:%.java=%.java-err} \
  ${CLASS_FILES:%.class=%.class-err} \
  generated/EnumClass\$$KindOfT.class


DO_EXTRACTION= \
 mkdir -p $$(dirname $@); \
 module=$$(basename $< .mlw).$$(basename $@ .java); \
 echo "EXTRACT $${module} from $<"; \
 (${WHY3_EXTRACT_JAVA} -o generated $${module} || echo "an error occurs") 2> $@-err ; \
 if test -s $@-err; then cat $@-err; echo; exit 1; fi

#
#  Extraction of Java classes
# ----------------------------
extract : ${JAVA_GENERATED_FILES} 

generated/Recursive.java : recursive.mlw 
	@ $(DO_EXTRACTION)

generated/ExceptionCatch.java : exceptions.mlw generated/ExceptionThrow.java
	@ $(DO_EXTRACTION)

generated/ExceptionThrow.java : exceptions.mlw generated/Exception1.java generated/Exception2.java
	@ $(DO_EXTRACTION)

generated/Exception1.java generated/Exception2.java : exceptions.mlw
	@ $(DO_EXTRACTION)

generated/SimpleClass.java : simple.mlw
	@ $(DO_EXTRACTION)

generated/fr/lri/whyml2java/SimpleClass.java : simple_with_package.mlw
	@ $(DO_EXTRACTION)

generated/fr/labri/whyml2java/DependantClass.java : depclass.mlw
	@ $(DO_EXTRACTION)

generated/ForLoop.java : forloop.mlw
	@ $(DO_EXTRACTION)

generated/AllAreZeros.java : all_are_zeros.mlw
	@ $(DO_EXTRACTION)

generated/EnumClass.java : enumclass.mlw
	@ $(DO_EXTRACTION)

generated/ErrorMissingConstructor.java : missing_constructor.mlw
	@ $(DO_EXTRACTION)

generated/yet/another/MissingUseClass.java : missing_use_class.mlw
	@ $(DO_EXTRACTION)

generated/IfThenElse.java : if_then_else.mlw
	@ $(DO_EXTRACTION)

generated/MaxIntegerTest.java : max_integer.mlw
	@ $(DO_EXTRACTION)

generated/Return1.java generated/Return2.java generated/Return3.java : returns.mlw
	@ $(DO_EXTRACTION)

generated/RecursiveRecord.java : rectype.mlw
	@ $(DO_EXTRACTION)

generated/IgnoreRes.java : ignore.mlw
	@ $(DO_EXTRACTION)

generated/fr/labri/AnInterface.java : implements.mlw
	@ $(DO_EXTRACTION)

generated/AnImplementation.java : implements.mlw
	@ $(DO_EXTRACTION)

#
# Non-regression of generated files
# ---------------------------------
non-regression : extract ${JAVA_GENERATED_FILES:%=%-nr}

generated/%.java-nr : generated/%.java
	@ echo -n DIFF $< ... 
	@ E="$<"; R="$(<:generated/%=expected/%)"; \
    if cmp -s $$E $$R; then \
      echo "ok" ; \
    else \
      echo "fail"; \
      diff -u $$E $$R; \
      exit 1; \
    fi

non-regression-update : extract
	@ echo Copying generated files to expected results
	@ for f in ${JAVA_GENERATED_FILES}; do \
      dst=$${f/generated/expected}; \
      dir=$$(dirname $$dst); \
      mkdir -p $${dir}; \
      cp $$f $$dst; \
    done

#
# Compilation of java files
# ------------------------- 
ifneq (@JAVAC@,no)
compile : extract ${CLASS_FILES}


%.class : %.java
	@- echo JAVAC $<
	@ javac -cp generated $< 2> $@-err || (test -f $$(basename $@)-err && cmp -s $$(basename $@)-err $@-err)

generated/fr/labri/whyml2java/DependantClass.class : \
   generated/fr/lri/whyml2java/SimpleClass.class
else
compile :
	@echo "No java compiler found during configuration."
endif

#
# Running java programs
# --------------------- 
ifneq (@JAVA@,no)
run : compile
	@echo "nothing to run yet."
else 
run :
	@echo "No JVM (java program) found during configuration."
endif

#
# Removal of generated files
# --------------------------
clean:
	@ rm -fr ${GENERATED_FILES} generated

