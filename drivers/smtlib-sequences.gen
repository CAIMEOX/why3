
prelude ";;; generated by SMT-LIB sequences"


theory seq.Seq
  syntax type seq "(Seq %1)"
  syntax function length "(seq.len %1)"
  syntax function get "(seq.nth %1 %2)"
  syntax function empty "(as seq.empty %t0)"
  syntax function singleton "(seq.unit %1)"
  syntax function (++) "(seq.++ %1 %2)"
  syntax function smt_extract "(seq.extract %1 %2 %3)"
  syntax function cons "(seq.++ (seq.unit %1) %2)"
  syntax function snoc "(seq.++ %1 (seq.unit %2))"

  remove prop length_nonnegative
  remove prop empty'def
  remove prop singleton'spec
  remove prop singleton'spec'0
  remove prop (++)'spec
  remove prop (++)'spec'0
  remove prop (++)'spec'1
  remove prop cons'spec
  remove prop cons'spec'0
  remove prop cons'spec'1
  remove prop snoc'spec
  remove prop snoc'spec'0
  remove prop snoc'spec'1
  remove prop ([..])'spec
  remove prop ([..])'spec'0
  remove prop ([..])'spec'1
  remove prop ([..])'spec'2
  remove prop ([..])'spec'3

  meta "encoding:lskept" function length
  meta "encoding:lskept" function get
  meta "encoding:lskept" function empty
  meta "encoding:lskept" function singleton
  meta "encoding:lskept" function (++)
  meta "encoding:lskept" function smt_extract
  meta "encoding:lskept" function set
  meta "encoding:lskept" function ([<-])
end

theory seq.FreeMonoid
  remove prop associative
  remove prop left_neutral
  remove prop right_neutral
  remove prop cons_def
  remove prop snoc_def
  remove prop double_sub_sequence
  remove prop cons_back
  remove prop snoc_back
  remove prop cat_back
  remove prop cons_dec
  remove prop snoc_dec
  remove prop cat_dec
  remove prop empty_dec
  remove prop singleton_dec
end

theory seq.Mem
  syntax predicate mem "(seq.contains %2 (seq.unit %1))"
end
