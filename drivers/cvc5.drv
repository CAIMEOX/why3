(** Why3 driver for CVC5 1.0.0 *)

prelude ";; produced by cvc5.drv ;;"
prelude "(set-logic ALL)"
prelude "(set-info :smt-lib-version 2.6)"

unknown "^(error \"Can't get-info :reason-unknown when the last result wasn't unknown!\")$" "(not unknown!)"

outofmemory "cvc5 suffered a segfault"
outofmemory "cvc5::internal::Minisat::OutOfMemoryException"

steps "resource::resourceUnitsUsed = \\([0-9]+\\)" 1

theory BuiltIn
  meta "supports_smt_get_info_unknown_reason" ""
end

import "smt-libv2.gen"
printer "smtv2.6"
import "smt-libv2-bv.gen"
import "cvc4_bv.gen"
import "smt-libv2-floats.gen"
import "smtlib-sequences.gen"

theory seq.Seq
  syntax function set "(seq.update %1 %2 (seq.unit %3))"
  remove prop set'spec
  remove prop set'spec'0
  remove prop set'spec'1
  remove prop set'spec'2

  meta "encoding:lskept" function set
  meta "encoding:lskept" function ([<-])
end

theory seq.Reverse
  syntax function reverse "(seq.rev %1)"
end

import "smtlib-strings.gen"

theory string.String

  remove prop lt_empty
  remove prop lt_not_com
  remove prop lt_ref
  remove prop lt_ref
  remove prop lt_trans
  remove prop le_empty
  remove prop le_ref
  remove prop lt_le
  remove prop lt_le_eq
  remove prop le_trans
  remove prop replaceall_empty1
  remove prop not_contains_replaceall

end

theory string.RegExpr

  syntax type re             "RegLan"

  syntax function to_re      "(str.to_re %1)"
  syntax predicate in_re     "(str.in_re %1 %2)"

  syntax function concat     "(re.++ %1 %2)"
  syntax function union      "(re.union %1 %2)"
  syntax function inter      "(re.inter %1 %2)"
  syntax function star       "(re.* %1)"
  syntax function plus       "(re.+ %1)"

  syntax function none       "re.none"
  syntax function allchar    "re.allchar"

  syntax function opt        "(re.opt %1)"
  syntax function range      "(re.range %1 %2)"
  syntax function power      "((_ re.^ %1) %2)"
  syntax function loop       "((_ re.loop %1 %2) %3)"

end

import "discrimination.gen"
theory BuiltIn
  meta "select_alginst_default" "local"
  meta "eliminate_algebraic" "keep_mono"
end

transformation "inline_trivial"
transformation "eliminate_builtin"
transformation "remove_unused_keep_constants"
transformation "detect_polymorphism"
transformation "eliminate_definition_conditionally"
transformation "eliminate_inductive"
transformation "eliminate_epsilon"
transformation "eliminate_literal"
transformation "simplify_formula"

(* Prepare for counter-example query: get rid of some quantifiers
   (makes it possible to query model values of the variables in
   premises) and introduce counter-example projections.  Note: does
   nothing if meta get_counterexmp is not set *)
transformation "prepare_for_counterexmp"

transformation "eliminate_projections_sums"
transformation "discriminate_if_poly"
transformation "eliminate_algebraic_if_poly"
transformation "encoding_smt_if_poly"

(** Error messages specific to CVC4 *)

outofmemory "(error \".*out of memory\")"
outofmemory "CVC4 suffered a segfault"
outofmemory "CVC4::BVMinisat::OutOfMemoryException"
outofmemory "std::bad_alloc"
outofmemory "Cannot allocate memory"
timeout "interrupted by timeout"
steps "smt::SmtEngine::resourceUnitsUsed, \\([0-9]+.?[0-9]*\\)" 1
(*
specific output message when CVC4 reaches its resource limit
*)
steplimitexceeded "unknown (RESOURCEOUT)"


(** Extra theories supported by CVC4 *)

(* CVC4 division seems to be the Euclidean one, not the Computer one *)
theory int.EuclideanDivision
  syntax function div "(div %1 %2)"
  syntax function mod "(mod %1 %2)"
  remove prop Mod_bound
  remove prop Div_mod
  remove prop Mod_1
  remove prop Div_1
end

(*
theory int.ComputerDivision
  syntax function div "(div %1 %2)"
  syntax function mod "(mod %1 %2)"
  remove prop Mod_bound
  remove prop Div_mod
  remove prop Mod_1
  remove prop Div_1
end
*)
