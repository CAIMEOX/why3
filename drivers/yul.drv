
(** OCaml driver for 64-bit architecture *)

printer "yul"

theory BuiltIn
  syntax type int "Z.t"
  syntax predicate  (=)   "%1 = %2"
end

theory Bool
  syntax type     bool  "bool"
  syntax function True  "true:bool"
  syntax function False "false:bool"
end

theory bool.Ite
  syntax function ite "(if %1 then %2 else %3)"
end

theory bool.Bool
  syntax function andb  "and(%1,%2)"
  syntax function orb   "or(%1,%2)"
  syntax function xorb  "xor(%1,%2)"
  syntax function notb  "not(%1)"
  syntax function implb "or(not(%1),%2)"
end

module Ref
  syntax type     ref      "[]"
  syntax function contents "[]"
  syntax val      ref      "[]"
end

module ref.Ref
  syntax val      (!_)     "[]"
  syntax val      (:=)     "[]"
end

module ref.Refint
  syntax val incr "%1 := Z.succ (!%1)"
  syntax val decr "%1 := Z.pred (!%1)"
  syntax val (+=) "%1 := Z.add (!%1) %2"
  syntax val (-=) "%1 := Z.sub (!%1) %2"
  syntax val ( *= ) "%1 := Z.mul (!%1) %2"
end

module mach.int.Int32
  syntax type     int32     "s32"

  syntax val      ( + )     "[\"ADD\"]"
  syntax val      ( - )     "[\"SUB\"]"
  syntax val      (-_)      "[[\"PUSH1\",0],\"SWAP1\",\"SUB\"]"
  syntax val      ( * )     "[\"MUL\"]"
  syntax val      ( / )     "[\"SDIV\"]"
  syntax val      ( % )     "[\"SMOD\"]"
  syntax val      (=)       "[\"EQ\"]"
  syntax val      (<=)      "[\"DUP2\",\"DUP2\",\"SLT\",\"EQ\",\"OR\"]"
  syntax val      (<)       "[\"SLT\"]"
  syntax val      (>=)      "[\"DUP2\",\"DUP2\",\"SGT\",\"EQ\",\"OR\"]"
  syntax val      (>)       "[\"SGT\"]"
end


module mach.int.UInt32
  syntax type     uint32     "u32"

  syntax val      ( + )     "[\"ADD\"]"
  syntax val      ( - )     "[\"SUB\"]"
  syntax val      (-_)      "[[\"PUSH1\",0],\"SWAP1\",\"SUB\"]"
  syntax val      ( * )     "[\"MUL\"]"
  syntax val      ( / )     "[\"DIV\"]"
  syntax val      ( % )     "[\"MOD\"]"
  syntax val      (=)       "[\"EQ\"]"
  syntax val      (<=)      "[\"DUP2\",\"DUP2\",\"LT\",\"EQ\",\"OR\"]"
  syntax val      (<)       "[\"LT\"]"
  syntax val      (>=)      "[\"DUP2\",\"DUP2\",\"GT\",\"EQ\",\"OR\"]"
  syntax val      (>)       "[\"GT\"]"
end

module mach.int.Int64
  syntax type     int64     "s64"

  syntax val      ( + )     "[\"ADD\"]"
  syntax val      ( - )     "[\"SUB\"]"
  syntax val      (-_)      "[[\"PUSH1\",0],\"SWAP1\",\"SUB\"]"
  syntax val      ( * )     "[\"MUL\"]"
  syntax val      ( / )     "[\"SDIV\"]"
  syntax val      ( % )     "[\"SMOD\"]"
  syntax val      (=)       "[\"EQ\"]"
  syntax val      (<=)      "[\"DUP2\",\"DUP2\",\"SLT\",\"EQ\",\"OR\"]"
  syntax val      (<)       "[\"SLT\"]"
  syntax val      (>=)      "[\"DUP2\",\"DUP2\",\"SGT\",\"EQ\",\"OR\"]"
  syntax val      (>)       "[\"SGT\"]"
end


module mach.int.UInt64
  syntax type     uint64     "u64"

  syntax val      ( + )     "[\"ADD\"]"
  syntax val      ( - )     "[\"SUB\"]"
  syntax val      (-_)      "[[\"PUSH1\",0],\"SWAP1\",\"SUB\"]"
  syntax val      ( * )     "[\"MUL\"]"
  syntax val      ( / )     "[\"DIV\"]"
  syntax val      ( % )     "[\"MOD\"]"
  syntax val      (=)       "[\"EQ\"]"
  syntax val      (<=)      "[\"DUP2\",\"DUP2\",\"LT\",\"EQ\",\"OR\"]"
  syntax val      (<)       "[\"LT\"]"
  syntax val      (>=)      "[\"DUP2\",\"DUP2\",\"GT\",\"EQ\",\"OR\"]"
  syntax val      (>)       "[\"GT\"]"
end

module mach.int.Int128
  syntax type     int128     "s128"

  syntax val      ( + )     "[\"ADD\"]"
  syntax val      ( - )     "[\"SUB\"]"
  syntax val      (-_)      "[[\"PUSH1\",0],\"SWAP1\",\"SUB\"]"
  syntax val      ( * )     "[\"MUL\"]"
  syntax val      ( / )     "[\"SDIV\"]"
  syntax val      ( % )     "[\"SMOD\"]"
  syntax val      (=)       "[\"EQ\"]"
  syntax val      (<=)      "[\"DUP2\",\"DUP2\",\"SLT\",\"EQ\",\"OR\"]"
  syntax val      (<)       "[\"SLT\"]"
  syntax val      (>=)      "[\"DUP2\",\"DUP2\",\"SGT\",\"EQ\",\"OR\"]"
  syntax val      (>)       "[\"SGT\"]"
end


module mach.int.UInt128
  syntax type     uint128     "u128"

  syntax val      ( + )     "[\"ADD\"]"
  syntax val      ( - )     "[\"SUB\"]"
  syntax val      (-_)      "[[\"PUSH1\",0],\"SWAP1\",\"SUB\"]"
  syntax val      ( * )     "[\"MUL\"]"
  syntax val      ( / )     "[\"DIV\"]"
  syntax val      ( % )     "[\"MOD\"]"
  syntax val      (=)       "[\"EQ\"]"
  syntax val      (<=)      "[\"DUP2\",\"DUP2\",\"LT\",\"EQ\",\"OR\"]"
  syntax val      (<)       "[\"LT\"]"
  syntax val      (>=)      "[\"DUP2\",\"DUP2\",\"GT\",\"EQ\",\"OR\"]"
  syntax val      (>)       "[\"GT\"]"
end

module mach.int.Int256
  syntax type     int256     "s256"

  syntax val      ( + )     "[\"ADD\"]"
  syntax val      ( - )     "[\"SUB\"]"
  syntax val      (-_)      "[[\"PUSH1\",0],\"SWAP1\",\"SUB\"]"
  syntax val      ( * )     "[\"MUL\"]"
  syntax val      ( / )     "[\"SDIV\"]"
  syntax val      ( % )     "[\"SMOD\"]"
  syntax val      (=)       "[\"EQ\"]"
  syntax val      (<=)      "[\"DUP2\",\"DUP2\",\"SLT\",\"EQ\",\"OR\"]"
  syntax val      (<)       "[\"SLT\"]"
  syntax val      (>=)      "[\"DUP2\",\"DUP2\",\"SGT\",\"EQ\",\"OR\"]"
  syntax val      (>)       "[\"SGT\"]"
end


module mach.int.UInt256
  syntax type     uint256     "u256"

  syntax val      ( + )     "[\"ADD\"]"
  syntax val      ( - )     "[\"SUB\"]"
  syntax val      (-_)      "[[\"PUSH1\",0],\"SWAP1\",\"SUB\"]"
  syntax val      ( * )     "[\"MUL\"]"
  syntax val      ( / )     "[\"DIV\"]"
  syntax val      ( % )     "[\"MOD\"]"
  syntax val      (=)       "[\"EQ\"]"
  syntax val      (<=)      "[\"DUP2\",\"DUP2\",\"LT\",\"EQ\",\"OR\"]"
  syntax val      (<)       "[\"LT\"]"
  syntax val      (>=)      "[\"DUP2\",\"DUP2\",\"GT\",\"EQ\",\"OR\"]"
  syntax val      (>)       "[\"GT\"]"
end

module mach.evm.Gas

  syntax val add_gas  "add_gas"
end
