
(** OCaml driver for 64-bit architecture *)

printer "yul"

theory BuiltIn
  syntax type int "Z.t"
  syntax predicate  (=)   "%1 = %2"
end

module HighOrd
  syntax type (->) "%1 -> %2"
  syntax val  ( @ )  "%1 %2"
end

theory option.Option
  syntax type      option  "%1 option"
  syntax function  None    "None"
  syntax function  Some    "Some %1"
  syntax predicate is_none "%1 = None"
end

theory Bool
  syntax type     bool  "bool"
  syntax function True  "true:bool"
  syntax function False "false:bool"
end

theory bool.Ite
  syntax function ite "(if %1 then %2 else %3)"
end

theory bool.Bool
  syntax function andb  "and(%1,%2)"
  syntax function orb   "or(%1,%2)"
  syntax function xorb  "xor(%1,%2)"
  syntax function notb  "not(%1)"
  syntax function implb "not(or(%1,%2))"
end

module Ref
  syntax type     ref      "%1 ref"
  syntax function contents "!%1"
  syntax val      ref      "ref %1"
end

module ref.Ref
  syntax val      (!_)     "!%1"
  syntax val      (:=)     "%1 := %2"
end

module ref.Refint
  syntax val incr "%1 := Z.succ (!%1)"
  syntax val decr "%1 := Z.pred (!%1)"
  syntax val (+=) "%1 := Z.add (!%1) %2"
  syntax val (-=) "%1 := Z.sub (!%1) %2"
  syntax val ( *= ) "%1 := Z.mul (!%1) %2"
end

module mach.int.Int32
  syntax type     int32     "s32"

  syntax literal   int32    "%1:s32"

  syntax val      ( + )     "add(%1,%2)"
  syntax val      ( - )     "sub(%1,%2)"
  syntax val      (-_)      "- %1"
  syntax val      ( * )     "%1 * %2"
  syntax val      ( / )     "%1 / %2"
  syntax val      ( % )     "%1 mod %2"
  syntax val      (=)       "%1 = %2"
  syntax val      (<=)      "%1 <= %2"
  syntax val      (<)       "%1 < %2"
  syntax val      (>=)      "%1 >= %2"
  syntax val      (>)       "%1 > %2"
end


module mach.int.UInt32
  syntax type     uint32     "u32"

  syntax literal   uint32    "%1:u32"

  syntax val      ( + )     "add(%1,%2)"
  syntax val      ( - )     "sub(%1,%2)"
  syntax val      (-_)      "- %1"
  syntax val      ( * )     "%1 * %2"
  syntax val      ( / )     "%1 / %2"
  syntax val      ( % )     "%1 mod %2"
  syntax val      (=)       "%1 = %2"
  syntax val      (<=)      "%1 <= %2"
  syntax val      (<)       "%1 < %2"
  syntax val      (>=)      "%1 >= %2"
  syntax val      (>)       "%1 > %2"
end

module mach.int.Int64
  syntax type     int64     "s64"

  syntax literal   int64    "%1:s64"

  syntax val      ( + )     "add(%1,%2)"
  syntax val      ( - )     "sub(%1,%2)"
  syntax val      (-_)      "- %1"
  syntax val      ( * )     "%1 * %2"
  syntax val      ( / )     "%1 / %2"
  syntax val      ( % )     "%1 mod %2"
  syntax val      (=)       "%1 = %2"
  syntax val      (<=)      "%1 <= %2"
  syntax val      (<)       "%1 < %2"
  syntax val      (>=)      "%1 >= %2"
  syntax val      (>)       "%1 > %2"
end


module mach.int.UInt64
  syntax type     uint64     "u64"

  syntax literal  uint64    "%1:u64"

  syntax val      ( + )     "add(%1,%2)"
  syntax val      ( - )     "sub(%1,%2)"
  syntax val      (-_)      "- %1"
  syntax val      ( * )     "%1 * %2"
  syntax val      ( / )     "%1 / %2"
  syntax val      ( % )     "%1 mod %2"
  syntax val      (=)       "%1 = %2"
  syntax val      (<=)      "%1 <= %2"
  syntax val      (<)       "%1 < %2"
  syntax val      (>=)      "%1 >= %2"
  syntax val      (>)       "%1 > %2"
end

module mach.int.Int128
  syntax type     int128     "s128"

  syntax literal   int128    "%1:s128"

  syntax val      ( + )     "add(%1,%2)"
  syntax val      ( - )     "sub(%1,%2)"
  syntax val      (-_)      "- %1"
  syntax val      ( * )     "%1 * %2"
  syntax val      ( / )     "%1 / %2"
  syntax val      ( % )     "%1 mod %2"
  syntax val      (=)       "%1 = %2"
  syntax val      (<=)      "%1 <= %2"
  syntax val      (<)       "%1 < %2"
  syntax val      (>=)      "%1 >= %2"
  syntax val      (>)       "%1 > %2"
end


module mach.int.UInt128
  syntax type     uint128     "u128"

  syntax literal  uint128    "%1:u128"

  syntax val      ( + )     "add(%1,%2)"
  syntax val      ( - )     "sub(%1,%2)"
  syntax val      (-_)      "- %1"
  syntax val      ( * )     "%1 * %2"
  syntax val      ( / )     "%1 / %2"
  syntax val      ( % )     "%1 mod %2"
  syntax val      (=)       "%1 = %2"
  syntax val      (<=)      "%1 <= %2"
  syntax val      (<)       "%1 < %2"
  syntax val      (>=)      "%1 >= %2"
  syntax val      (>)       "%1 > %2"
end

module mach.int.Int256
  syntax type     int256     "s256"

  syntax literal   int256    "%1:s256"

  syntax val      ( + )     "add(%1,%2)"
  syntax val      ( - )     "sub(%1,%2)"
  syntax val      (-_)      "- %1"
  syntax val      ( * )     "%1 * %2"
  syntax val      ( / )     "%1 / %2"
  syntax val      ( % )     "%1 mod %2"
  syntax val      (=)       "%1 = %2"
  syntax val      (<=)      "%1 <= %2"
  syntax val      (<)       "%1 < %2"
  syntax val      (>=)      "%1 >= %2"
  syntax val      (>)       "%1 > %2"
end


module mach.int.UInt256
  syntax type     uint256     "u256"

  syntax literal  uint256    "%1:u256"

  syntax val      ( + )     "add(%1,%2)"
  syntax val      ( - )     "sub(%1,%2)"
  syntax val      (-_)      "- %1"
  syntax val      ( * )     "%1 * %2"
  syntax val      ( / )     "%1 / %2"
  syntax val      ( % )     "%1 mod %2"
  syntax val      (=)       "%1 = %2"
  syntax val      (<=)      "%1 <= %2"
  syntax val      (<)       "%1 < %2"
  syntax val      (>=)      "%1 >= %2"
  syntax val      (>)       "%1 > %2"
end
