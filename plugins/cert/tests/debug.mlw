(* type t *)

(* constant e : t *)

(* predicate a t *)
(* predicate b *)
(* predicate c *)
(* predicate p int *)

(* goal G1 : (exists x. p x) -> a *)
(* goal G2 : not a -> a -> false *)
(* goal G3 : a -> not a -> false *)
(* goal G : not (a \/ b) *)
(* goal G : not (not a /\ not b) *)

(* goal G2 : not not a *)

(* predicate p (x : bool) (y : bool) *)
(* goal G : forall x y. p x y -> p true false *)

(* use int.Int *)

(* goal G : 1 > 2 /\ 3 >= 4 *)

(* goal G : a /\ b *)



(* axiom A : a e *)

(* goal G : a e *)




(* use int.Int *)
(* predicate a *)
(* goal G : a \/ a *)

(* type t *)

(* val constant a : t *)

(* goal G : a = a *)

(* predicate p (x : bool) *)

(* goal inst_goal : p true -> exists x : bool. p x *)


predicate a
predicate b
predicate c

goal G : a /\ (b \/ c) -> false

